#
# This file is part of John the Ripper password cracker,
# Copyright (c) 1996-2006,2008-2012 by Solar Designer
#
# ...with changes in the jumbo patch, by various authors
#

# The [Options] section is for general options only.
# Note that MPI specific options have been moved
# to [Options.MPI]
# There is also a new section [Options.OpenCL]
# for OpenCL specific options
# Default settings for Markov mode have been moved
# to [Markov.Default], but you can define other
# Markov modes as well, see ../doc/MARKOV
[Options]
# Wordlist file name, to be used in batch mode
Wordlist = /usr/share/john/password.lst
# Use idle cycles only
Idle = Y
# Crash recovery file saving delay in seconds
Save = 600
# Beep when a password is found (who needs this anyway?)
Beep = N

# Time formatting string used in status ETA.
# %c  means 'local' specific canonical form, such as:
# 05/06/11 18:10:34
#
# Other examples
# %d/%m/%y %H:%M   (day/mon/year hour:min)
# %m/%d/%y %H:%M   (mon/day/year hour:min)
# %Y-%m-%d %H:%M   (ISO 8601 style, 2011-05-06 18:10)
TimeFormat = %c

# Threshold for showing ETA, in percent. ETA will not be
# shown if progress is less than this. If too low, early
# reported figures will be less accurate (default 0.05%)
ETAthreshold = 0.05%

# Emit a status line whenever a password is cracked (this is the same as
# passing the --crack-status option flag to john). NOTE: if this is set
# to true here, --crack-status will toggle it back to false.
CrackStatus = N

# When printing status, show number of candidates tried (eg. 1/43210 for one
# guess out of 43 thousand candidates). Note that the number is not equal to
# "words tried" but rather "words x hash" combinations so if you are attacking
# 1000 hashes, "43210" means you have tried about 43 words from your wordlist.
StatusShowCandidates = N

# Always report (to screen and log) cracked passwords as UTF-8, regardless of
# input encoding. This is recommended if you have your terminal set for UTF-8.
AlwaysReportUTF8 = N

# Always store Unicode (UTF-16) passwords as UTF-8 in john.pot, regardless
# of input encoding. This prevents john.pot from being filled with mixed
# and eventually unknown encodings. This is recommended if you have your
# terminal set for UTF-8.
UnicodeStoreUTF8 = N

# Always report/store non-Unicode formats as UTF-8, regardless of input
# encoding. This is NOT recommended unless you REALLY understand the
# implications. The actual codepage that was used is not stored anywhere
# except in the log file.
CPstoreUTF8 = N

# Write cracked passwords to the log file (default is just the user name)
LogCrackedPasswords = N


[Options:MPI]
# Automagically disable OMP if MPI is used (set to N if
# you want to run one MPI process per multi-core host)
MPIOMPmutex = Y

# Print a notice if disabling OMP (when MPIOMPmutex = Y)
# or when running OMP and MPI at the same time
MPIOMPverbose = Y


[Options:OpenCL]
# Set default OpenCL platform and/or device. Command line options will
# override these. If neither is set, we will search for a GPU or fall-back
# to platform 0, device 0.
#Platform = 0
#Device = 0

# Format-specific settings for Local Work Size and Global Work Size call.
# An LWS or GWS of zero will initiate auto enumeration. The environment
# variables LWS and/or GWS will override these figures.
#ssha_LWS = 512
#ssha_GWS = 8192

# For RAR format. MaxDuration (seconds) can be used to limit run time in case
# there is a watch-dog time-out.
#rar_LWS = 128
#rar_GWS = 8192
rar_MaxDuration = 5

# For crypt SHA-512.
#sha512crypt_LWS = 64
#sha512crypt_GWS = 8192


# Markov modes, see ../doc/MARKOV for more information
[Markov:Default]
# Default Markov mode settings
#
# Statsfile cannot be specified on the command line, so
# specifying it here is mandatory
Statsfile = /usr/share/john/stats
# MkvLvl and MkvMaxLen should also be specified here, as a fallback for
# --markov usage without specifying LEVEL and/or LENGTH on the command line
MkvLvl = 200
MkvMaxLen = 12
# MkvMinLvl and MkvMinLen should not be specified at all in [Markov:Default],
# or they should be equal to 0 (which is the default if not specified.
# MkvMinLvl and MkvMinLen can be used in other Markov mode sections
# except [Markov:Default]
; MkvMinLvl = 0
; MkvMinLen = 0

# A user defined character class is named with a single digit, ie. 0..9. After
# the equal-sign, just list all characters that this class should match. You
# can specify ranges within brackets, much like pre-processor ranges in rules.
# BEWARE of encoding if using non-ASCII characters. If you put UTF-8 characters
# here, it will *not* work! You must use a singlebyte encoding and it should
# be the same here as you intend to use for your dictionary.
# You can however put characters here in \xA3 format (for codepoint 0xA3 - in
# many iso-8859-x codepages that would mean a pound sign). This works in ranges
# too but NOTE that this syntax does NOT work in any other section of john.conf
#
# This is a couple of example classes:
# ?0 matches (one version of) base64 characters
# ?1 matches hex digits
# ?2 matches the TAB character (never try to use \x00!)
[UserClasses]
0 = [a-zA-Z0-9/.]
1 = [0-9a-fA-F]
2 = \x09


# "Single crack" mode rules
[List.Rules:Single]
# Simple rules come first...
:
-s x**
-c (?a c Q
-c l Q
-s-c x** /?u l
# These were not included in crackers I've seen, but are pretty efficient,
# so I include them near the beginning
>6 '6
>7 '7 l
-c >6 '6 /?u l
>5 '5
# Weird order, eh? Can't do anything about it, the order is based on the
# number of successful cracks...
<* d
r c
-c <* (?a d c
-c >5 '5 /?u l
-c u Q
-c )?a r l
-[:c] <* !?A \p1[lc] p
-c <* c Q d
-c >7 '7 /?u
>4 '4 l
-c <+ (?l c r
-c <+ )?l l Tm
>3 '3
-c >4 '4 /?u
-c >3 '3 /?u l
-c u Q r
<* d M 'l f Q
-c <* l Q d M 'l f Q
# About 50% of single-mode-crackable passwords get cracked by now...
# >2 x12 ... >8 x18
>[2-8] x1\1
>9 \[
# >3 x22 ... >9 x28
>[3-9] x2\p[2-8]
# >4 x32 ... >9 x37
>[4-9] x3\p[2-7]
# >2 x12 /?u l ... >8 x18 /?u l
-c >[2-8] x1\1 /?u l
-c >9 \[ /?u l
# >3 x22 /?u l ... >9 x28 /?u l
-c >[3-9] x2\p[2-8] /?u l
# >4 x32 /?u l ... >9 x37 /?u l
-c >[4-9] x3\p[2-7] /?u l
# Now to the suffix stuff...
<* l $[1-9!0a-rt-z"-/:-@\[-`{-~]
-c <* (?a c $[1-9!0a-rt-z"-/:-@\[-`{-~]
-[:c] <* !?A (?\p1[za] \p1[lc] $s M 'l p Q X0z0 'l $s
-[:c] <* /?A (?\p1[za] \p1[lc] $s
<* l r $[1-9!]
-c <* /?a u $[1-9!]
-[:c] <- (?\p1[za] \p1[lc] Az"'s"
-[:c] <- (?\p1[za] \p1[lc] Az"!!"
-[:c] (?\p1[za] \p1[lc] $! <- Az"!!"
# Removing vowels...
-[:c] /?v @?v >2 (?\p1[za] \p1[lc]
/?v @?v >2 <* d
# crack -> cracked, crack -> cracking
<* l [PI]
-c <* l [PI] (?a c
# mary -> marie
-[:c] <* (?\p1[za] \p1[lc] )y omi $e
# marie -> mary
-[:c] <* (?\p1[za] \p1[lc] )e \] )i val1 oay
# The following are some 3l33t rules
-[:c] l /[aelos] s\0\p[4310$] (?\p1[za] \p1[:c]
-[:c] l /a /[elos] sa4 s\0\p[310$] (?\p1[za] \p1[:c]
-[:c] l /e /[los] se3 s\0\p[10$] (?\p1[za] \p1[:c]
-[:c] l /l /[os] sl1 s\0\p[0$] (?\p1[za] \p1[:c]
-[:c] l /o /s so0 ss$ (?\p1[za] \p1[:c]
-[:c] l /a /e /[los] sa4 se3 s\0\p[10$] (?\p1[za] \p1[:c]
-[:c] l /a /l /[os] sa4 sl1 s\0\p[0$] (?\p1[za] \p1[:c]
-[:c] l /a /o /s sa4 so0 ss$ (?\p1[za] \p1[:c]
-[:c] l /e /l /[os] se3 sl1 s\0\p[0$] (?\p1[za] \p1[:c]
-[:c] l /[el] /o /s s\0\p[31] so0 ss$ (?\p1[za] \p1[:c]
-[:c] l /a /e /l /[os] sa4 se3 sl1 s\0\p[0$] (?\p1[za] \p1[:c]
-[:c] l /a /[el] /o /s sa4 s\0\p[31] so0 ss$ (?\p1[za] \p1[:c]
-[:c] l /e /l /o /s se3 sl1 so0 ss$ (?\p1[za] \p1[:c]
-[:c] l /a /e /l /o /s sa4 se3 sl1 so0 ss$ (?\p1[za] \p1[:c]
# Now to the prefix stuff...
l ^[1a-z2-90]
-c l Q ^[A-Z]
^[A-Z]
l ^["-/:-@\[-`{-~]
-[:c] <9 (?a \p1[lc] A0"[tT]he"
-[:c] <9 (?a \p1[lc] A0"[aA]my"
-[:c] <9 (?a \p1[lc] A0"[mdMD]r"
-[:c] <9 (?a \p1[lc] A0"[mdMD]r."
-[:c] <9 (?a \p1[lc] A0"__"
<- !?A l p ^[240-9]
# Some word pair rules...
# johnsmith -> JohnSmith, johnSmith
-p-c (?a 2 (?a c 1 [cl]
# JohnSmith -> john smith, john_smith, john-smith
-p 1 <- $[ _\-] + l
# JohnSmith -> John smith, John_smith, John-smith
-p-c 1 <- (?a c $[ _\-] 2 l
# JohnSmith -> john Smith, john_Smith, john-Smith
-p-c 1 <- l $[ _\-] 2 (?a c
# johnsmith -> John Smith, John_Smith, John-Smith
-p-c 1 <- (?a c $[ _\-] 2 (?a c
# Applying different simple rules to each of the two words
-p-[c:] 1 \p1[ur] 2 l
-p-c 2 (?a c 1 [ur]
-p-[c:] 1 l 2 \p1[ur]
-p-c 1 (?a c 2 [ur]
# jsmith -> smithj, etc...
-[:c] (?a \p1[lc] [{}]
-[:c] (?a \p1[lc] [{}] \0
# Toggle case...
-c <+ )?u l Tm
-c T0 Q M c Q l Q u Q C Q X0z0 'l
-c T[1-9A-E] Q M l Tm Q C Q u Q l Q c Q X0z0 'l
-c l Q T[1-9A-E] Q M T\0 Q l Tm Q C Q u Q X0z0 'l
-c >2 <G %2?a [lu] T0 M T2 T4 T6 T8 TA TC TE Q M l Tm Q X0z0 'l
-c >2 /?l /?u t Q M c Q C Q l Tm Q X0z0 'l
# Deleting chars...
>[2-8] D\p[1-7]
>[8-9A-E] D\1
-c /?u >[2-8] D\p[1-7] l
-c /?u >[8-9A-E] D\1 l
=1?a \[ M c Q
-c (?a >[1-9A-E] D\1 c
# Inserting a dot...
-[:c] >3 (?a \p1[lc] i[12].
# More suffix stuff...
<- l Az"[190][0-9]"
-c <- (?a c Az"[190][0-9]"
<- l Az"[782][0-9]"
-c <- (?a c Az"[782][0-9]"
<* l $[A-Z]
-c <* (?a c $[A-Z]
# cracking -> CRACKiNG
-c u /I sIi
# Crack96 -> cRACK96
%2?a C Q
# Crack96 -> cRACK(^
/?A S Q
# Crack96 -> CRaCK96
-c /?v V Q
# Really weird charset conversions, like "england" -> "rmh;smf"
:[RL] Q
l Q [RL]
-c (?a c Q [RL]
:[RL] \0 Q
# Both prefixing and suffixing...
<- l ^[1!@#$%^&*\-=_+.?|:'"] $\1
<- l ^[({[<] $\p[)}\]>]
# The rest of two-digit suffix stuff, less common numbers...
<- l Az"[63-5][0-9]"
-c <- (?a c Az"[63-5][0-9]"
# Some multi-digit numbers...
-[:c] (?a \p1[lc] Az"007" <+
-[:c] (?a \p1[lc] Az"123" <+
-[:c] (?a \p1[lc] Az"[0-9]\0\0" <+
-[:c] (?a \p1[lc] Az"1234" <+
-[:c] (?a \p1[lc] Az"[0-9]\0\0\0" <+
-[:c] (?a \p1[lc] Az"12345" <+
-[:c] (?a \p1[lc] Az"[0-9]\0\0\0\0" <+
-[:c] (?a \p1[lc] Az"123456" <+
-[:c] (?a \p1[lc] Az"[0-9]\0\0\0\0\0" <+
# Some [birth] years...
l Az"19[7-96-0]" <+ >-
l Az"20[01]" <+ >-
l Az"19[7-9][0-9]" <+
l Az"20[01][0-9]" <+
l Az"19[6-0][9-0]" <+

[List.Rules:Extra]
# Insert/overstrike some characters...
!?A >[1-6] l i\0[a-z]
!?A l o0[a-z]
!?A >[1-7] l o\0[a-z]
# Toggle case everywhere (up to length 8), assuming that certain case
# combinations were already tried.
-c T1 Q M T0 Q
-c T2 Q M T[z0] T[z1] Q
-c T3 Q M T[z0] T[z1] T[z2] Q
-c T4 Q M T[z0] T[z1] T[z2] T[z3] Q
-c T5 Q M T[z0] T[z1] T[z2] T[z3] T[z4] Q
-c T6 Q M T[z0] T[z1] T[z2] T[z3] T[z4] T[z5] Q
-c T7 Q M T[z0] T[z1] T[z2] T[z3] T[z4] T[z5] T[z6] Q
# Very slow stuff...
l Az"[1-90][0-9][0-9]" <+
-c (?a c Az"[1-90][0-9][0-9]" <+
<[\-9] l A\p[z0]"[a-z][a-z]"
<- l ^[a-z] $[a-z]

# Wordlist mode rules
[List.Rules:Wordlist]
# Try words as they are
:
# Lowercase every pure alphanumeric word
-c >3 !?X l Q
# Capitalize every pure alphanumeric word
-c (?a >2 !?X c Q
# Lowercase and pluralize pure alphabetic words
<* >2 !?A l p
# Lowercase pure alphabetic words and append '1'
<* >2 !?A l $1
# Capitalize pure alphabetic words and append '1'
-c <* >2 !?A c $1
# Duplicate reasonably short pure alphabetic words (fred -> fredfred)
<7 >1 !?A l d
# Lowercase and reverse pure alphabetic words
>3 !?A l M r Q
# Prefix pure alphabetic words with '1'
>2 !?A l ^1
# Uppercase pure alphanumeric words
-c >2 !?X u Q M c Q u
# Lowercase pure alphabetic words and append a digit or simple punctuation
<* >2 !?A l $[2!37954860.?]
# Words containing punctuation, which is then squeezed out, lowercase
/?p @?p >3 l
# Words with vowels removed, lowercase
/?v @?v >3 l
# Words containing whitespace, which is then squeezed out, lowercase
/?w @?w >3 l
# Capitalize and duplicate short pure alphabetic words (fred -> FredFred)
-c <7 >1 !?A c d
# Capitalize and reverse pure alphabetic words (fred -> derF)
-c <+ >2 !?A c r
# Reverse and capitalize pure alphabetic words (fred -> Derf)
-c >2 !?A l M r Q c
# Lowercase and reflect pure alphabetic words (fred -> fredderf)
<7 >1 !?A l d M 'l f Q
# Uppercase the last letter of pure alphabetic words (fred -> freD)
-c <+ >2 !?A l M r Q c r
# Prefix pure alphabetic words with '2' or '4'
>2 !?A l ^[24]
# Capitalize pure alphabetic words and append a digit or simple punctuation
-c <* >2 !?A c $[2!3957468.?0]
# Prefix pure alphabetic words with digits
>2 !?A l ^[379568]
# Capitalize and pluralize pure alphabetic words of reasonable length
-c <* >2 !?A c p
# Lowercase/capitalize pure alphabetic words of reasonable length and convert:
# crack -> cracked, crack -> cracking
-[:c] <* >2 !?A \p1[lc] M [PI] Q
# Try the second half of split passwords
-s x**
-s-c x** M l Q

# Case toggler for cracking MD4-based NTLM hashes (with the contributed patch)
# given already cracked DES-based LM hashes.
# Rename this section to [List.Rules:Wordlist] to activate it.
[List.Rules:NT]
:
-c T0Q
-c T1QT[z0]
-c T2QT[z0]T[z1]
-c T3QT[z0]T[z1]T[z2]
-c T4QT[z0]T[z1]T[z2]T[z3]
-c T5QT[z0]T[z1]T[z2]T[z3]T[z4]
-c T6QT[z0]T[z1]T[z2]T[z3]T[z4]T[z5]
-c T7QT[z0]T[z1]T[z2]T[z3]T[z4]T[z5]T[z6]
-c T8QT[z0]T[z1]T[z2]T[z3]T[z4]T[z5]T[z6]T[z7]
-c T9QT[z0]T[z1]T[z2]T[z3]T[z4]T[z5]T[z6]T[z7]T[z8]
-c TAQT[z0]T[z1]T[z2]T[z3]T[z4]T[z5]T[z6]T[z7]T[z8]T[z9]
-c TBQT[z0]T[z1]T[z2]T[z3]T[z4]T[z5]T[z6]T[z7]T[z8]T[z9]T[zA]
-c TCQT[z0]T[z1]T[z2]T[z3]T[z4]T[z5]T[z6]T[z7]T[z8]T[z9]T[zA]T[zB]
-c TDQT[z0]T[z1]T[z2]T[z3]T[z4]T[z5]T[z6]T[z7]T[z8]T[z9]T[zA]T[zB]T[zC]

# For Single Mode against fast hashes
[List.Rules:Single-Extra]
.include [List.Rules:Single]
.include [List.Rules:Extra]

# For Wordlist mode and very fast hashes
[List.Rules:Jumbo]
.include [List.Rules:Wordlist]
.include [List.Rules:Single]
.include [List.Rules:Extra]
.include [List.Rules:NT]

# Incremental modes
[Incremental:All]
File = /usr/share/john/all.chr
MinLen = 0
MaxLen = 8
CharCount = 95

[Incremental:All15]
.include [Incremental:All]
MaxLen = 5

[Incremental:All6]
.include [Incremental:All]
MaxLen = 6
MinLen = 6

[Incremental:All7]
.include [Incremental:All]
MinLen = 7
MaxLen = 7

[Incremental:All8]
.include [Incremental:All]
MinLen = 8

[Incremental:Alpha]
File = /usr/share/john/alpha.chr
MinLen = 1
MaxLen = 8
CharCount = 26

[Incremental:Digits]
File = /usr/share/john/digits.chr
MinLen = 1
MaxLen = 8
CharCount = 10

[Incremental:Digits8]
File = /usr/share/john/digits.chr
MinLen = 8
MaxLen = 8
CharCount = 10

[Incremental:Alnum]
File = /usr/share/john/alnum.chr
MinLen = 1
MaxLen = 8
CharCount = 36

[Incremental:LanMan]
File = /usr/share/john/lanman.chr
MinLen = 0
MaxLen = 7
CharCount = 69

# Some pre-defined word filters
[List.External:Filter_Alpha]
void filter()
{
	int i, c;

	i = 0;
	while (c = word[i++])
	if (c < 'a' || c > 'z') {
		word = 0; return;
	}
}

[List.External:Filter_Digits]
void filter()
{
	int i, c;

	i = 0;
	while (c = word[i++])
	if (c < '0' || c > '9') {
		word = 0; return;
	}
}

[List.External:Filter_Alnum]
void filter()
{
	int i, c;

	i = 0;
	while (c = word[i++])
	if ((c < 'a' || c > 'z') && (c < '0' || c > '9')) {
		word = 0; return;
	}
}

[List.External:Filter_No_Cap_or_Symbols]
void filter()
{
	int i, c;

	i = 0;
	while (c = word[i++])
	if ((c < 'a' || c > 'z') && (c < '0' || c > '9')) {
		return;
	}
	word = 0; return;
}

[List.External:Filter_LanMan]
void filter()
{
	int i, c;

	word[7] = 0;			// Truncate at 7 characters

	i = 0;				// Convert to uppercase
	while (c = word[i]) {
		if (c >= 'a' && c <= 'z') word[i] &= 0xDF;
		i++;
	}
}

# A simple cracker for LM hashes
[List.External:LanMan]
int length;				// Current length

void init()
{
	word[0] = 'A' - 1;		// Start with "A"
	word[length = 1] = 0;
}

void generate()
{
	int i;

	i = length - 1;			// Start from the last character
	while (++word[i] > 'Z')		// Try to increase it
	if (i)				// Overflow here, any more positions?
		word[i--] = 'A';	// Yes, move to the left, and repeat
	else				// No
	if (length < 7) {
		word[i = ++length] = 0;	// Switch to the next length
		while (i--)
			word[i] = 'A';
		return;
	} else {
		word = 0; return;	// We're done
	}
}

void restore()
{
	length = 0;			// Calculate the length
	while (word[length]) length++;
}

# Simple and well-commented, yet useful external mode example
# NOTE, this has now been 'split' up into a base extern, 'base', and then
# multiple External:double functions.  It still has same code as original
# double, but now can be easily expanded.
[List.External_base:Double]
/*
 * This cracking mode tries all the possible duplicated lowercase alphabetic
 * "words" of up to 8 characters long.  Since word halves are the same, it
 * only has to try about 500,000 words.
 */

/* Global variables: current length and word */
/* make this 'long' enough for other externs that include this one */
/* (up to 14 bytes long) We currently have double and double10 defined, */
/* but could add more, up to double14 */

int length, current[15], max;

/* this new 'type' variable, is used to tell double what character set to
 * use. It can use the original (alpha).  If type is 0 (i.e. unset), then
 * a-z (alpha) character set is used.  If type is '0' (a zero ascii byte)
 * then alnum charset is used, a-z0-9.  If type is a space char, then all
 * charset is used  [space - tilde]  or [ -~].  This required setting the
 * type var in the init() of alnum or all doubles (it can be left unset
 * in the alpha versions).  It also requires some if logic in generate.
 * other than that, it works the same, with almost no performance hit */
int type;

/* Generates a new word */
void generate()
{
	int i;

/* Export last generated word, duplicating it at the same time; here "word"
 * is a pre-defined external variable. */
	word[(i = length) << 1] = 0;
	while (i--) word[length + i] = word[i] = current[i];

/* Generate a new word */
	i = length - 1;			// Start from the last character
	if (type == 0) {
		/* alpha */
		while (++current[i] > 'z')	// Try to increase it
		if (i)				// Overflow here, any more positions?
			current[i--] = 'a';	// Yes, move to the left, and repeat
		else {				// No
			current = 0;		// Request a length switch
			break;			// Break out of the loop
		}
	} else if (type == '0') {
		/* alnum */
		if (current[i] == 'z') current[i] = '0'-1;
		while (++current[i] == '9')	{ // Try to increase it
			if (i)				// Overflow here, any more positions?
				current[i--] = 'a';	// Yes, move to the left, and repeat
			else {				// No
				current = 0;		// Request a length switch
				break;			// Break out of the loop
			}
			if (current[i] == 'z') current[i] = '0'-1;
		}
	} else if (type == ' ') {
		/* all */
		while (++current[i] > '~')	{ // Try to increase it
			if (i)				// Overflow here, any more positions?
				current[i--] = ' ';	// Yes, move to the left, and repeat
			else {				// No
				current = 0;		// Request a length switch
				break;			// Break out of the loop
			}
		}
	}
	/* else ????? wtf?? */

/* Switch to the next length, unless we were generating 8 character long
 * words already. */
	if (!current && length < max) {
		i = ++length;
		if (type == 0 || type == '0')
			while (i--) current[i] = 'a';
		else if (type == ' ')
			while (i--) current[i] = ' ';
	}
}

/* Called when restoring an interrupted session */
void restore()
{
	int i;

/* Import the word back */
	i = 0;
	while (current[i] = word[i]) i++;

/* ...and calculate the half-word length */
	length = i >> 1;
}

[List.External:Double]
.include [List.External_base:Double]

/* Called at startup to initialize the global variables */
void init()
{
	int i;

	i = length = 2;			// Start with 4 character long words
	while (i--) current[i] = 'a';	// Set our half-word to "aa"
	max = 4;
}

[List.External:Double_alnum]
.include [List.External_base:Double]

/* Called at startup to initialize the global variables */
void init()
{
	int i;

	i = length = 2;			// Start with 4 character long words
	while (i--) current[i] = 'a';	// Set our half-word to "aa"
	max = 4;

	type = '0';
}

[List.External:Double_all]
.include [List.External_base:Double]
void init()
{
	int i;

	i = length = 2;			// Start with 4 character long words
	while (i--) current[i] = ' ';	// Set our half-word to "  "
	max = 4;

	type = ' ';
}

[List.External:Double10]
.include [List.External_base:Double]

/* Called at startup to initialize the global variables */
void init()
{
	int i;

	i = length = 5;			// Start with 10 character long words (we assume double has already been run)
	while (i--) current[i] = 'a';	// Set our half-word to "aaaaa"
	max = 5;
}

[List.External:Double10_alnum]
.include [List.External_base:Double]
void init()
{
	int i;

	i = length = 5;			// Start with 4 character long words
	while (i--) current[i] = 'a';	// Set our half-word to "aaaaa"
	max = 5;

	type = '0';
}

# Strip 0.5 ("Secure Tool for Recalling Important Passwords") cracker,
# based on analysis done by Thomas Roessler and Ian Goldberg.  This will
# crack passwords you may have generated with Strip; other uses of Strip
# are unaffected.
[List.External:Strip]
int minlength, maxlength, mintype, maxtype;
int crack_seed, length, type;
int count, charset[128];

void init()
{
	int c;

/* Password lengths to try; Strip can generate passwords of 4 to 16
 * characters, but traditional crypt(3) hashes are limited to 8. */
	minlength = 4;	// 4
	maxlength = 8;	// 16

/* Password types to try (Numeric, Alpha-Num, Alpha-Num w/ Meta). */
	mintype = 0;	// 0
	maxtype = 2;	// 2

	crack_seed = 0x10000;
	length = minlength - 1;
	type = mintype;

	count = 0;
	c = '0'; while (c <= '9') charset[count++] = c++;
}

void generate()
{
	int seed, random;
	int i, c;

	if (crack_seed > 0xffff) {
		crack_seed = 0;

		if (++length > maxlength) {
			length = minlength;

			if (++type > maxtype) {
				word[0] = 0;
				return;
			}
		}

		count = 10;
		if (type >= 1) {
			c = 'a'; while (c <= 'f') charset[count++] = c++;
			c = 'h'; while (c <= 'z') charset[count++] = c++;
			c = 'A'; while (c <= 'Z') charset[count++] = c++;
		}
		if (type == 2) {
			charset[count++] = '!';
			c = '#'; while (c <= '&') charset[count++] = c++;
			c = '('; while (c <= '/') charset[count++] = c++;
			c = '<'; while (c <= '>') charset[count++] = c++;
			charset[count++] = '?'; charset[count++] = '@';
			charset[count++] = '['; charset[count++] = ']';
			charset[count++] = '^'; charset[count++] = '_';
			c = '{'; while (c <= '~') charset[count++] = c++;
		}
	}

	seed = (crack_seed++ << 16 >> 16) * 22695477 + 1;

	i = 0;
	while (i < length) {
		random = ((seed = seed * 22695477 + 1) >> 16) & 0x7fff;
		word[i++] = charset[random % count];
	}

	word[i] = 0;
}

# Try sequences of adjacent keys on a keyboard as candidate passwords
[List.External:Keyboard]
int maxlength, length;	// Maximum password length to try, current length
int fuzz;		// The desired "fuzz factor", either 0 or 1
int id[15];		// Current character indices for each position
int m[0x800], mc[0x100];// The keys matrix, counts of adjacent keys
int f[0x40], fc;	// Characters for the first position, their count

void init()
{
	int minlength;
	int i, j, c, p;
	int k[0x40];

	minlength = 1;	// Initial password length to try
	maxlength = 15;	// Maximum password length to try, up to 15
	fuzz = 1;	// "Fuzz factor", set to 0 for much quicker runs

/*
 * This defines the keyboard layout, by default for a QWERTY keyboard.
 */
	i = 0; while (i < 0x40) k[i++] = 0;
	k[0] = '`';
	i = 0; while (++i <= 9) k[i] = '0' + i;
	k[10] = '0'; k[11] = '-'; k[12] = '=';
	k[0x11] = 'q'; k[0x12] = 'w'; k[0x13] = 'e'; k[0x14] = 'r';
	k[0x15] = 't'; k[0x16] = 'y'; k[0x17] = 'u'; k[0x18] = 'i';
	k[0x19] = 'o'; k[0x1a] = 'p'; k[0x1b] = '['; k[0x1c] = ']';
	k[0x1d] = '\\';
	k[0x21] = 'a'; k[0x22] = 's'; k[0x23] = 'd'; k[0x24] = 'f';
	k[0x25] = 'g'; k[0x26] = 'h'; k[0x27] = 'j'; k[0x28] = 'k';
	k[0x29] = 'l'; k[0x2a] = ';'; k[0x2b] = '\'';
	k[0x31] = 'z'; k[0x32] = 'x'; k[0x33] = 'c'; k[0x34] = 'v';
	k[0x35] = 'b'; k[0x36] = 'n'; k[0x37] = 'm'; k[0x38] = ',';
	k[0x39] = '.'; k[0x3a] = '/';

	i = 0; while (i < 0x100) mc[i++] = 0;
	fc = 0;

	/* rows */
	c = 0;
	i = 0;
	while (i < 0x40) {
		p = c;
		c = k[i++] & 0xff;
		if (!c) continue;
		f[fc++] = c;
		if (!p) continue;
		m[(c << 3) + mc[c]++] = p;
		m[(p << 3) + mc[p]++] = c;
	}
	f[fc] = 0;

	/* columns */
	i = 0;
	while (i < 0x30) {
		p = k[i++] & 0xff;
		if (!p) continue;
		j = 1 - fuzz;
		while (j <= 1 + fuzz) {
			c = k[i + 0x10 - j++] & 0xff;
			if (!c) continue;
			m[(c << 3) + mc[c]++] = p;
			m[(p << 3) + mc[p]++] = c;
		}
	}

	length = 0;
	while (length < minlength)
		id[length++] = 0;
}

void generate()
{
	int i, p, maxcount;

	word[i = 0] = p = f[id[0]];
	while (++i < length)
		word[i] = p = m[(p << 3) + id[i]];
	word[i--] = 0;

	if (i) maxcount = mc[word[i - 1]]; else maxcount = fc;
	while (++id[i] >= maxcount) {
		if (!i) {
			if (length < maxlength) {
				id[0] = 0;
				id[length++] = 0;
			}
			return;
		}
		id[i--] = 0;
		if (i) maxcount = mc[word[i - 1]]; else maxcount = fc;
	}
}

void restore()
{
	int i;

	/* Calculate the length */
	length = 0;
	while (word[length])
		id[length++] = 0;

	/* Infer the first character index */
	i = -1;
	while (++i < fc) {
		if (f[i] == word[0]) {
			id[0] = i;
			break;
		}
	}

	/* This sample can be enhanced to infer the rest of the indices here */
}

# Generic implementation of "dumb" exhaustive search, given a range of lengths
# and an arbitrary charset.  This is pre-configured to try 8-bit characters
# against LM hashes, which is only reasonable to do for very short password
# half lengths.
[List.External:DumbForce]
int maxlength;		// Maximum password length to try
int last;		// Last character position, zero-based
int lastid;		// Character index in the last position
int id[0x7f];		// Current character indices for other positions
int charset[0x100], c0;	// Character set

void init()
{
	int minlength;
	int i, c;

	minlength = 1;	// Initial password length to try, must be at least 1
	maxlength = 7;	// Must be at least same as minlength

/*
 * This defines the character set.
 *
 * Let's say, we want to try TAB, all non-control ASCII characters, and all
 * 8-bit characters, including the 8-bit terminal controls range (as these are
 * used as regular national characters with some 8-bit encodings), but except
 * for known terminal controls (risky for the terminal we may be running on).
 *
 * Also, let's say our hashes are case-insensitive, so skip lowercase letters
 * (this is right for LM hashes).
 */
	i = 0;
	charset[i++] = 9;		// Add horizontal TAB (ASCII 9), then
	c = ' ';			// start with space (ASCII 32) and
	while (c < 'a')			// proceed till lowercase 'a'
		charset[i++] = c++;
	c = 'z' + 1;			// Skip lowercase letters and
	while (c <= 0x7e)		// proceed for all printable ASCII
		charset[i++] = c++;
	c++;				// Skip DEL (ASCII 127) and
	while (c < 0x84)		// proceed over 8-bit codes till IND
		charset[i++] = c++;
	charset[i++] = 0x86;		// Skip IND (84 hex) and NEL (85 hex)
	charset[i++] = 0x87;
	c = 0x89;			// Skip HTS (88 hex)
	while (c < 0x8d)		// Proceed till RI (8D hex)
		charset[i++] = c++;
	c = 0x91;			// Skip RI, SS2, SS3, DCS
	while (c < 0x96)		// Proceed till SPA (96 hex)
		charset[i++] = c++;
	charset[i++] = 0x99;		// Skip SPA, EPA, SOS
	c = 0xa0;			// Skip DECID, CSI, ST, OSC, PM, APC
	while (c <= 0xff)		// Proceed with the rest of 8-bit codes
		charset[i++] = c++;

/* Zero-terminate it, and cache the first character */
	charset[i] = 0;
	c0 = charset[0];

	last = minlength - 1;
	i = 0;
	while (i <= last) {
		id[i] = 0;
		word[i++] = c0;
	}
	lastid = -1;
	word[i] = 0;
}

void generate()
{
	int i;

/* Handle the typical case specially */
	if (word[last] = charset[++lastid]) return;

	lastid = 0;
	word[i = last] = c0;
	while (i--) {			// Have a preceding position?
		if (word[i] = charset[++id[i]]) return;
		id[i] = 0;
		word[i] = c0;
	}

	if (++last < maxlength) {	// Next length?
		id[last] = lastid = 0;
		word[last] = c0;
		word[last + 1] = 0;
	} else				// We're done
		word = 0;
}

void restore()
{
	int i, c;

/* Calculate the current length and infer the character indices */
	last = 0;
	while (c = word[last]) {
		i = 0; while (charset[i] != c && charset[i]) i++;
		if (!charset[i]) i = 0;	// Not found
		id[last++] = i;
	}
	lastid = id[--last];
}

# Generic implementation of exhaustive search for a partially-known password.
# This is pre-configured for length 8, lowercase and uppercase letters in the
# first 4 positions (52 different characters), and digits in the remaining 4
# positions - however, the corresponding part of init() may be modified to use
# arbitrary character sets or even fixed characters for each position.
[List.External:KnownForce]
int last;		// Last character position, zero-based
int lastofs;		// Last character position offset into charset[]
int lastid;		// Current character index in the last position
int id[0x7f];		// Current character indices for other positions
int charset[0x7f00];	// Character sets, 0x100 elements for each position

void init()
{
	int length;
	int pos, ofs, i, c;

	length = 8;	// Password length to try

/* This defines the character sets for different character positions */
	pos = 0;
	while (pos < 4) {
		ofs = pos++ << 8;
		i = 0;
		c = 'a';
		while (c <= 'z')
			charset[ofs + i++] = c++;
		c = 'A';
		while (c <= 'Z')
			charset[ofs + i++] = c++;
		charset[ofs + i] = 0;
	}
	while (pos < length) {
		ofs = pos++ << 8;
		i = 0;
		c = '0';
		while (c <= '9')
			charset[ofs + i++] = c++;
		charset[ofs + i] = 0;
	}

	last = length - 1;
	pos = -1;
	while (++pos <= last)
		word[pos] = charset[id[pos] = pos << 8];
	lastid = (lastofs = last << 8) - 1;
	word[pos] = 0;
}

void generate()
{
	int pos;

/* Handle the typical case specially */
	if (word[last] = charset[++lastid]) return;

	word[pos = last] = charset[lastid = lastofs];
	while (pos--) {			// Have a preceding position?
		if (word[pos] = charset[++id[pos]]) return;
		word[pos] = charset[id[pos] = pos << 8];
	}

	word = 0;			// We're done
}

void restore()
{
	int i, c;

/* Calculate the current length and infer the character indices */
	last = 0;
	while (c = word[last]) {
		i = lastofs = last << 8;
		while (charset[i] != c && charset[i]) i++;
		if (!charset[i]) i = lastofs; // Not found
		id[last++] = i;
	}
	lastid = id[--last];
}

# A variation of KnownForce configured to try likely date and time strings.
[List.External:DateTime]
int last;		// Last character position, zero-based
int lastofs;		// Last character position offset into charset[]
int lastid;		// Current character index in the last position
int id[0x7f];		// Current character indices for other positions
int charset[0x7f00];	// Character sets, 0x100 elements for each position

void init()
{
	int length;
	int pos, ofs, i, c;

	length = 8;	// Must be one of: 4, 5, 7, 8

/* This defines the character sets for different character positions */
	pos = 0;
	while (pos < length - 6) {
		ofs = pos++ << 8;
		i = 0;
		c = '0';
		while (c <= '9')
			charset[ofs + i++] = c++;
		charset[ofs + i] = 0;
	}
	if (pos) {
		ofs = pos++ << 8;
		charset[ofs] = '/';
		charset[ofs + 1] = '.';
		charset[ofs + 2] = ':';
		charset[ofs + 3] = 0;
	}
	while (pos < length - 3) {
		ofs = pos++ << 8;
		i = 0;
		c = '0';
		while (c <= '9')
			charset[ofs + i++] = c++;
		charset[ofs + i] = 0;
	}
	ofs = pos++ << 8;
	charset[ofs] = '/';
	charset[ofs + 1] = '.';
	charset[ofs + 2] = ':';
	charset[ofs + 3] = 0;
	while (pos < length) {
		ofs = pos++ << 8;
		i = 0;
		c = '0';
		while (c <= '9')
			charset[ofs + i++] = c++;
		charset[ofs + i] = 0;
	}

	last = length - 1;
	pos = -1;
	while (++pos <= last)
		word[pos] = charset[id[pos] = pos << 8];
	lastid = (lastofs = last << 8) - 1;
	word[pos] = 0;
}

void generate()
{
	int pos;

/* Handle the typical case specially */
	if (word[last] = charset[++lastid]) return;

	word[pos = last] = charset[lastid = lastofs];
	while (pos--) {			// Have a preceding position?
		if (word[pos] = charset[++id[pos]]) return;
		word[pos] = charset[id[pos] = pos << 8];
	}

	word = 0;			// We're done
}

void restore()
{
	int i, c;

/* Calculate the current length and infer the character indices */
	last = 0;
	while (c = word[last]) {
		i = lastofs = last << 8;
		while (charset[i] != c && charset[i]) i++;
		if (!charset[i]) i = lastofs; // Not found
		id[last++] = i;
	}
	lastid = id[--last];
}

# Try strings of repeated characters.
[List.External:Repeats]
int minlength, maxlength, minc, maxc, length, c;

void init()
{
	minlength = 1;
	maxlength = 72;
	minc = 0x20;
	maxc = 0xff;

	length = minlength; c = minc;
}

void generate()
{
	int i;

	i = 0;
	while (i < length)
		word[i++] = c;
	word[i] = 0;

	if (c++ < maxc)
		return;

	c = minc;
	if (++length > maxlength)
		c = 0; // Will NUL out the next "word" and thus terminate
}

# Generate candidate passwords from many small subsets of characters from a
# much larger full character set.  This will test for passwords containing too
# few different characters.  As currently implemented, this code will produce
# some duplicates, although their number is relatively small when the maximum
# number of different characters (the maxdiff setting) is significantly lower
# than the maximum length (the maxlength setting).  Nevertheless, you may want
# to pass the resulting candidate passwords through "unique" if you intend to
# test them against hashes that are salted and/or of a slow to compute type.
[List.External:Subsets]
int minlength;		// Minimum password length to try
int maxlength;		// Maximum password length to try
int startdiff;		// Initial number of characters in a subset to try
int maxdiff;		// Maximum number of characters in a subset to try
int last;		// Last character position, zero-based
int lastid;		// Character index in the last position
int id[0x7f];		// Current character indices for other positions
int subset[0x100], c0;	// Current subset
int subcount;		// Number of characters in the current subset
int subid[0x100];	// Indices into charset[] of characters in subset[]
int charset[0x100];	// Full character set
int charcount;		// Number of characters in the full charset

void init()
{
	int i, c;

	minlength = 1;	// Minimum password length to try, must be at least 1
	maxlength = 8;	// Must be at least same as minlength

	startdiff = 1;	// Initial number of different characters to try
	maxdiff = 3;	// Maximum number of different characters to try

/* This defines the character set */
	i = 0;
	c = 0x20;
	while (c <= 0x7e)
		charset[i++] = c++;

	if (maxdiff > (charcount = i))
		maxdiff = i;
	if (maxdiff > maxlength)
		maxdiff = maxlength;

/*
 * Initialize the variables such that generate() gets to its "next subset"
 * code, which will initialize everything for real.
 */
	subcount = (i = startdiff) - 1;
	while (i--)
		subid[i] = charcount;
	subset[0] = c0 = 0;
	last = maxlength - 1;
	lastid = -1;
}

void generate()
{
	int i;

/* Handle the typical case specially */
	if (word[last] = subset[++lastid]) return;

	lastid = 0;
	word[i = last] = c0;
	while (i--) {			// Have a preceding position?
		if (word[i] = subset[++id[i]]) return;
		id[i] = 0;
		word[i] = c0;
	}

	if (++last < maxlength) {	// Next length?
		id[last] = lastid = 0;
		word[last] = c0;
		word[last + 1] = 0;
		return;
	}

/* Next subset */
	if (subcount) {
		int j;
		i = subcount - 1;
		j = charcount;
		while (++subid[i] >= j) {
			if (i--) {
				j--;
				continue;
			}
			subid[i = 0] = 0;
			subset[++subcount] = 0;
			break;
		}
	} else {
		subid[i = 0] = 0;
		subset[++subcount] = 0;
	}
	subset[i] = charset[subid[i]];
	while (++i < subcount)
		subset[i] = charset[subid[i] = subid[i - 1] + 1];

	if (subcount > maxdiff) {
		word = 0;		// Done
		return;
	}

/*
 * We won't be able to fully use the subset if the length is smaller than the
 * character count.  We assume that we've tried all smaller subsets before, so
 * we don't bother with such short lengths.
 */
	if (minlength < subcount)
		last = subcount - 1;
	else
		last = minlength - 1;
	c0 = subset[0];
	i = 0;
	while (i <= last) {
		id[i] = 0;
		word[i++] = c0;
	}
	lastid = 0;
	word[i] = 0;
}

# Simple password policy matching: require at least one digit.
[List.External:AtLeast1-Simple]
void filter()
{
	int i, c;

	i = 0;
	while (c = word[i++])
		if (c >= '0' && c <= '9')
			return; // Found at least one suitable character, good

	word = 0; // No suitable characters found, skip this "word"
}

# The same password policy implemented in a more efficient and more generic
# fashion (easy to expand to include other "sufficient" characters as well).
[List.External:AtLeast1-Generic]
int mask[0x100];

void init()
{
	int c;

	mask[0] = 0; // Terminate the loop in filter() on NUL
	c = 1;
	while (c < 0x100)
		mask[c++] = 1; // Continue looping in filter() on most chars

	c = '0';
	while (c <= '9')
		mask[c++] = 0; // Terminate the loop in filter() on digits
}

void filter()
{
	int i;

	i = -1;
	while (mask[word[++i]])
		continue;
	if (word[i])
		return; // Found at least one suitable character, good

	word = 0; // No suitable characters found, skip this "word"
}

# An efficient and fairly generic password policy matcher.  The policy to match
# is specified in the check at the end of filter() and in mask[].  For example,
# lowercase and uppercase letters may be treated the same by initializing the
# corresponding mask[] elements to the same value, then adjusting the value to
# check "seen" for accordingly.
[List.External:Policy]
int mask[0x100];

void init()
{
	int c;

	mask[0] = 0x100;
	c = 1;
	while (c < 0x100)
		mask[c++] = 0x200;

	c = 'a';
	while (c <= 'z')
		mask[c++] = 1;
	c = 'A';
	while (c <= 'Z')
		mask[c++] = 2;
	c = '0';
	while (c <= '9')
		mask[c++] = 4;
}

void filter()
{
	int i, seen;

/*
 * This loop ends when we see NUL (sets 0x100) or a disallowed character
 * (sets 0x200).
 */
	i = -1; seen = 0;
	while ((seen |= mask[word[++i]]) < 0x100)
		continue;

/*
 * We should have seen at least one character of each type (which "add up"
 * to 7) and then a NUL (adds 0x100), but not any other characters (would
 * add 0x200).  The length must be 8.
 */
	if (seen != 0x107 || i != 8)
		word = 0; // Does not conform to policy
}

# Append the Luhn algorithm digit to arbitrary all-digit strings.  Optimized
# for speed, not for size nor simplicity.  The primary optimization trick is to
# compute the length and four sums in parallel (in two SIMD'ish variables).
# Then whether the length is even or odd determines which two of the four sums
# are actually used.  Checks for non-digits and for NUL are packed into the
# SIMD'ish bitmasks as well.
[List.External:AppendLuhn]
int map1[0x100], map2[0x1fff];

void init()
{
	int i;

	map1[0] = ~0x7fffffff;
	i = 1;
	while (i < 0x100)
		map1[i++] = ~0x7effffff;
	i = -1;
	while (++i < 10)
		map1['0' + i] = i + ((i * 2 % 10 + i / 5) << 12);
	i = -1;
	while (++i < 0x1fff) {
		if (i % 10)
			map2[i] = '9' + 1 - i % 10;
		else
			map2[i] = '0';
	}
}

void filter()
{
	int i, o, e;

	i = o = e = 0;
	while ((o += map1[word[i++]]) >= 0) {
		if ((e += map1[word[i++]]) >= 0)
			continue;
		if (e & 0x01000000)
			return; // Not all-digit, leave unmodified
		word[i--] = 0;
		word[i] = map2[(e & 0xfff) + (o >> 12)];
		return;
	}
	if (o & 0x01000000)
		return; // Not all-digit, leave unmodified
	word[i--] = 0;
	word[i] = map2[(o & 0xfff) + (e >> 12)];
}

# Trivial Rot13 Example
# Words which don't contain any letters (and thus wouldn't be changed
# by Rot13) are skipped, because these unchanged words probably should
# have been tried before trying a mangled version.
[List.External:Filter_Rot13]
void filter()
{
	int i, j, c;

	j = 0;
	i = 0;				// Convert to uppercase

	while (c = word[i]) {
		if ((c >= 'a' && c <= 'm') || c >= 'A' && c <= 'M' ) {
			word[i] = c + 13;
			j++;
		} else if ((c >= 'n' && c <= 'z') || c >= 'N' && c <= 'Z' ) {
			word[i] = c - 13;
			j++;
		}
		i++;
	}
	if (j == 0)
		word = 0;
}

# Trivial parallel processing example
[List.External_base:Parallel]
/*
 * This word filter makes John process some of the words only, for running
 * multiple instances on different CPUs.  It can be used with any cracking
 * mode except for "single crack".  Note: this is not a good solution, but
 * is just an example of what can be done with word filters.
 */

int node, total;			// This node's number, and node count
int number;				// Current word number

void filter()
{
	if (number++ % total)		// Word for a different node?
		word = 0;		// Yes, skip it
}

[List.External:Parallel1_2]
.include [List.External_base:Parallel]
void init()
{
	node = 1; total = 2;	// Node 1 of 2
	number = node - 1;		// Speedup the filter a bit
}
[List.External:Parallel2_2]
.include [List.External_base:Parallel]
void init()
{
	node = 2; total = 2;	// Node 2 of 2
	number = node - 1;		// Speedup the filter a bit
}

# Interrupt the cracking session after "max" words tried
[List.External:AutoAbort]
int max;				// Maximum number of words to try
int number;				// Current word number

void init()
{
	max = 1000;
	number = 0;
}

void filter()
{
	if (++number > max)
		abort = 1;		// Interrupt the cracking session
}

# Print the status line after every "interval" words tried
[List.External:AutoStatus]
int interval;				// How often to print the status
int number;				// Current word number

void init()
{
	interval = 1000;
	number = 0;
}

void filter()
{
	if (number++ % interval)
		return;
	status = 1;			// Print the status line
}

# dumb-force UTF-16, in an external file
.include "/usr/share/john/dumb16.conf"

# dumb-force UTF-32, in an external file
.include "/usr/share/john/dumb32.conf"

# Dynamic ($dynamic_n$) scripting code, in an external file
# also shows/tests that .include <file> works the same as .include "/usr/share/john/file"
.include <dynamic.conf>

# include john.local.conf (defaults to being empty, but never overwritten)
.include "/etc/john/john.local.conf"
[Incremental:RockYou-LanMan]
File = $JOHN/rockyou-lanman.chr
MinLen = 0
MaxLen = 7
CharCount = 69

[Incremental:rockyou]
File = $JOHN/rockyou.chr
MinLen = 0
MaxLen = 8
CharCount = 95

[Incremental:kore]
File = $JOHN/kore.chr
MinLen = 0
MaxLen = 8
CharCount = 95



####################################################################
# KoreLogic Custom John the Ripper Rules:
####################################################################

# Use this rule with 2EVERYTHING.dic or 3EVERYTHING.dic
[List.Rules:KoreLogicRulesPrependSeason]
A0"[Ss$][uU][mM][mM][eE3][rR]"
A0"[Ww][iI|][nN][tT+][eE3][rR]"
A0"[Ff][aA][lL][lL]"
A0"[Ss][pP][rR][iI][nN][gG]"
A0"[Aa][uU][tT][uU][mM][nN]"

# Use this rule with 2EVERYTHING.dic or 3EVERYTHING.dic
[List.Rules:KoreLogicRulesAppendSeason]
AZ"[Ss$][uU][mM][mM][eE3][rR]"
AZ"[Ww][iI|][nN][tT+][eE3][rR]"
AZ"[Ff][aA][lL][lL]"
AZ"[Ss][pP][rR][iI][nN][gG]"
AZ"[Aa][uU][tT][uU][mM][nN]"

[List.Rules:KoreLogicRulesPrependHello]
A0"[hH][eE][lL][lL][oO0]"

[List.Rules:KoreLogicRulesPrependYears]
A0"20[0-1][0-9]"
A0"19[3-9][0-9]"

[List.Rules:KoreLogicRulesUpperAppendYears]
cAz"19[0-9][0-9]"
cAz"20[01][0-9]"

[List.Rules:KoreLogicRulesAppendYears]
A0"19[0-9][0-9]"
A0"20[01][0-9]"

[List.Rules:KoreLogicRulesPrependYears]
A0"19[0-9][0-9]"
A0"20[01][0-9]"
cA0"19[0-9][0-9]"
cA0"20[01][0-9]"

# 
[List.Rules:KoreLogicRulesLowerAppendMMHH]
Az"0[1-9]0[1-9]"
Az"0[1-9]1[0-9]"
Az"0[1-9]2[0-9]"
Az"0[1-9]3[0-1]"
Az"1[0-2]1[0-2]"
Az"1[0-2]1[0-9]"
Az"1[0-2]2[0-9]"
Az"1[0-2]3[0-1]"


[List.Rules:KoreLogicRulesUpperAppendMMHH]
cAz"0[1-9]0[1-9]"
cAz"0[1-9]1[0-9]"
cAz"0[1-9]2[0-9]"
cAz"0[1-9]3[0-1]"
cAz"1[0-2]1[0-2]"
cAz"1[0-2]1[0-9]"
cAz"1[0-2]2[0-9]"
cAz"1[0-2]3[0-1]"

[List.Rules:KoreLogicRulesUpperPrependMMHH]
cA0"0[1-9]0[1-9]"
cA0"0[1-9]1[0-9]"
cA0"0[1-9]2[0-9]"
cA0"0[1-9]3[0-1]"
cA0"1[0-2]1[0-2]"
cA0"1[0-2]1[0-9]"
cA0"1[0-2]2[0-9]"
cA0"1[0-2]3[0-1]"

[List.Rules:KoreLogicRulesLowerPrependMMHH]
A0"0[1-9]0[1-9]"
A0"0[1-9]1[0-9]"
A0"0[1-9]2[0-9]"
A0"0[1-9]3[0-1]"
A0"1[0-2]1[0-2]"
A0"1[0-2]1[0-9]"
A0"1[0-2]2[0-9]"
A0"1[0-2]3[0-1]"

[List.Rules:KoreLogicRulesPrependMMHHAppendSpecial]
A0"0[1-9]0[1-9]"Az"[!$@#%.]"
A0"0[1-9]0[1-9]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
A0"0[1-9]1[0-9]"Az"[!$@#%.]"
A0"0[1-9]1[0-9]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
A0"0[1-9]2[0-9]"Az"[!$@#%.]"
A0"0[1-9]2[0-9]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
A0"0[1-9]3[0-1]"Az"[!$@#%.]"
A0"0[1-9]3[0-1]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
A0"1[0-2]1[0-2]"Az"[!$@#%.]"
A0"1[0-2]1[0-2]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
A0"1[0-2]1[0-9]"Az"[!$@#%.]"
A0"1[0-2]1[0-9]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
A0"1[0-2]2[0-9]"Az"[!$@#%.]"
A0"1[0-2]2[0-9]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
A0"1[0-2]3[0-1]"Az"[!$@#%.]"
A0"1[0-2]3[0-1]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesAppendMMHHAppendSpecial]
Az"0[1-9]0[1-9]"Az"[!$@#%.]"
Az"0[1-9]0[1-9]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"0[1-9]1[0-9]"Az"[!$@#%.]"
Az"0[1-9]1[0-9]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"0[1-9]2[0-9]"Az"[!$@#%.]"
Az"0[1-9]2[0-9]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"0[1-9]3[0-1]"Az"[!$@#%.]"
Az"0[1-9]3[0-1]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"1[0-2]1[0-2]"Az"[!$@#%.]"
Az"1[0-2]1[0-2]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"1[0-2]1[0-9]"Az"[!$@#%.]"
Az"1[0-2]1[0-9]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"1[0-2]2[0-9]"Az"[!$@#%.]"
Az"1[0-2]2[0-9]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"1[0-2]3[0-1]"Az"[!$@#%.]"
Az"1[0-2]3[0-1]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesLowerPrependNumNumNumNumAppendNum]
A0"[0-9][0-9][0-9][0-9]"Az"[0-9]"

[List.Rules:KoreLogicRulesPrependNumAppendNum]
A0"[0-9]"Az"[0-9]"
cA0"[0-9]"cAz"[0-9]"

[List.Rules:KoreLogicRulesLowerPrependMMHHAppendNum]
A0"0[1-9]0[1-9]"Az"[0-9]"
A0"0[1-9]1[0-9]"Az"[0-9]"
A0"0[1-9]2[0-9]"Az"[0-9]"
A0"0[1-9]3[0-1]"Az"[0-9]"
A0"1[0-2]1[0-2]"Az"[0-9]"
A0"1[0-2]1[0-9]"Az"[0-9]"
A0"1[0-2]2[0-9]"Az"[0-9]"
A0"1[0-2]3[0-1]"Az"[0-9]"

# Notice how we  1) do caps first b/c they are more common in 'complex' environments
# 2) Do !$@#%. first b/c they are the most common special chars
[List.Rules:KoreLogicRulesAppendCurrentYearSpecial]
cAz"2010[!$@#%.]"
Az"2010[!$@#%.]"
cAz"2010[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"2010[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesAppend4Num]
cAz"[0-9][0-9][0-9][0-9]"
Az"[0-9][0-9][0-9][0-9]"

[List.Rules:KoreLogicRulesAppendNumNumSpecial]
Az"[0-9][0-9][!$@#%.]"
Az"[0-9][0-9][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesAppendNumSpecial]
Az"[0-9][!$@#%.]"
Az"[0-9][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesPrependNumSpecial]
A0"[0-9][!$@#%.]"
A0"[0-9][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesAppend5Num]
cAz"[0-9][0-9][0-9][0-9][0-9]"
Az"[0-9][0-9][0-9][0-9][0-9]"

[List.Rules:KoreLogicRulesAppend6Num]
cAz"[0-9][0-9][0-9][0-9][0-9][0-9]"
Az"[0-9][0-9][0-9][0-9][0-9][0-9]"

[List.Rules:KoreLogicRulesAppendSpecial2num]
cAz"[!$@#%.][0-9][0-9]"
cAz"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*][0-9][0-9]"
Az"[!$@#%.][0-9][0-9]"
Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*][0-9][0-9]"

[List.Rules:KoreLogicRulesAppendSpecial3num]
cAz"[!$@#%.][0-9][0-9][0-9]"
cAz"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*][0-9][0-9][0-9]"
Az"[!$@#%.][0-9][0-9][0-9]"
Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*][0-9][0-9][0-9]"

[List.Rules:KoreLogicRulesAppendSpecial4num]
cAz"[!$@#%.][0-9][0-9][0-9][0-9]"
cAz"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*][0-9][0-9][0-9][0-9]"
Az"[!$@#%.][0-9][0-9][0-9][0-9]"
Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*][0-9][0-9][0-9][0-9]"

[List.Rules:KoreLogicRulesPrependCAPCAPAppendSpecial]
A0"[A-Z][A-Z]"Az"[!$@#%.]"
A0"[A-Z][A-Z]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesPrependNumNumAppendSpecial]
cA0"[0-9][0-9]"Az"[!$@#%.]"
A0"[0-9][0-9]"Az"[!$@#%.]"
cA0"[0-9][0-9]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
A0"[0-9][0-9]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesPrependNumNum]
cA0"[0-9][0-9]"
A0"[0-9][0-9]"

[List.Rules:KoreLogicRulesPrependNumNumNum]
cA0"[0-9][0-9][0-9]"
A0"[0-9][0-9][0-9]"

[List.Rules:KoreLogicRulesPrependNumNumNumNum]
cA0"[0-9][0-9][0-9][0-9]"
A0"[0-9][0-9][0-9][0-9]"

[List.Rules:KoreLogicRulesAppendNumbers]
Az"[0-9][0-9]"
Az"[0-9][0-9][0-9]"
Az"[0-9][0-9][0-9][0-9]"

[List.Rules:KoreLogicRulesPrependNumbers]
A0"[0-9][0-9]"
A0"[0-9][0-9][0-9]"
A0"[0-9][0-9][0-9][0-9]"

[List.Rules:KoreLogicRulesAppendNumORNumNum]
Az"[0-9][0-9]"
Az"[0-9][0-9][0-9]"

[List.Rules:KoreLogicRulesAppend1Numto4Num]
Az"[0-9]"
Az"[0-9][0-9]"
Az"[0-9][0-9][0-9]"
Az"[0-9][0-9][0-9][0-9]"

[List.Rules:KoreLogicRulesPrependNumNumSpecial]
cA0"[0-9][0-9][!$@#%.]"
A0"[0-9][0-9][!$@#%.]"
cA0"[0-9][0-9][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
A0"[0-9][0-9][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesPrepend2NumbersAppend2Numbers]
cA0"[0-9][0-9]"Az"[0-9][0-9]"
A0"[0-9][0-9]"Az"[0-9][0-9]"

[List.Rules:KoreLogicRulesPrependSpecialSpecial]
cA0"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
A0"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesAppendSpecialNumberNumber]
cAz"[!$@#%.][0-9][0-9]"
Az"[!$@#%.][0-9][0-9]"
cAz"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*][0-9][0-9]"
Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*][0-9][0-9]"

[List.Rules:KoreLogicRulesAppendSpecialNumberNumberNumber]
cAz"[!$@#%.][0-9][0-9][0-9]"
Az"[!$@#%.][0-9][0-9][0-9]"
cAz"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*][0-9][0-9][0-9]"
Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*][0-9][0-9][0-9]"

[List.Rules:KoreLogicRulesPrependSpecialSpecialAppendNumber]
cA0"[!$@#%.][!$@#%.]"Az"[0-9]"
A0"[!$@#%.][!$@#%.]"Az"[0-9]"
cA0"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9]"
A0"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9]"

[List.Rules:KoreLogicRulesPrependSpecialSpecialAppendNumbersNumber]
cA0"[!$@#%.][!$@#%.]"Az"[0-9][0-9]"
A0"[!$@#%.][!$@#%.]"Az"[0-9][0-9]"
cA0"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9]"
A0"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9]"

[List.Rules:KoreLogicRulesPrependSpecialSpecialAppendNumbersNumberNumber]
cA0"[!$@#%.][!$@#%.]"Az"[0-9][0-9][0-9]"
A0"[!$@#%.][!$@#%.]"Az"[0-9][0-9][0-9]"
cA0"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9][0-9]"
A0"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9][0-9]"

[List.Rules:KoreLogicRulesAppend2Letters]
Az"[A-Za-z][A-Za-z]"

[List.Rules:KoreLogicRulesAppendNumAlpha]
Az"[0-9][A-Za-z]"

[List.Rules:KoreLogicRulesPrepend4NumAppendSpecial]
cA0"[0-9][0-9][0-9][0-9]"Az"[!$@#%.]"
cA0"[0-9][0-9][0-9][0-9]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
A0"[0-9][0-9][0-9][0-9]"Az"[!$@#%.]"
A0"[0-9][0-9][0-9][0-9]"Az"[^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesAppend4NumSpecial]
cAz"[0-9][0-9][0-9][0-9][!$@#%.]"
cAz"[0-9][0-9][0-9][0-9][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"[0-9][0-9][0-9][0-9][!$@#%.]"
Az"[0-9][0-9][0-9][0-9][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesAppend3NumSpecial]
cAz"[0-9][0-9][0-9][!$@#%.]"
cAz"[0-9][0-9][0-9][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"[0-9][0-9][0-9][!$@#%.]"
Az"[0-9][0-9][0-9][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesAppend2NumSpecial]
cAz"[0-9][0-9][!$@#%.]"
cAz"[0-9][0-9][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"[0-9][0-9][!$@#%.]"
Az"[0-9][0-9][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesLowerAppend2NumSpecial]
Az"[0-9][0-9][!$@#%.]"
Az"[0-9][0-9][^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

# Append numbers - but limit the total length to 8 chars. For DES, etc.
[List.Rules:KoreLogicRulesAddJustNumbersLimit8]
<8>1cAz"[0-9]"
<8>1Az"[0-9]"
<8>1A0"[0-9]"
<8>1cA0"[0-9]"
<7>1Az"[0-9][0-9]"
<7>1cAz"[0-9][0-9]"
<7>1A0"[0-9][0-9]"
<7>1cA0"[0-9][0-9]"
<6>1Az"[0-9][0-9][0-9]"
<6>1cAz"[0-9][0-9][0-9]"
<5>1Az"[0-9][0-9][0-9][0-9]"
<5>1cAz"[0-9][0-9][0-9][0-9]"

[List.Rules:KeyBoard]
Az"1234"
>0A[0]"1234"
>1A[1]"1234"
>2A[2]"1234"
>3A[3]"1234"
>4A[4]"1234"
>5A[5]"1234"
>6A[6]"1234"
>7A[7]"1234"
>8A[8]"1234"
>9A[9]"1234"
Az"2345"
>0A[0]"2345"
>1A[1]"2345"
>2A[2]"2345"
>3A[3]"2345"
>4A[4]"2345"
>5A[5]"2345"
>6A[6]"2345"
>7A[7]"2345"
>8A[8]"2345"
>9A[9]"2345"
Az"3456"
>0A[0]"3456"
>1A[1]"3456"
>2A[2]"3456"
>3A[3]"3456"
>4A[4]"3456"
>5A[5]"3456"
>6A[6]"3456"
>7A[7]"3456"
>8A[8]"3456"
>9A[9]"3456"
Az"4567"
>0A[0]"4567"
>1A[1]"4567"
>2A[2]"4567"
>3A[3]"4567"
>4A[4]"4567"
>5A[5]"4567"
>6A[6]"4567"
>7A[7]"4567"
>8A[8]"4567"
>9A[9]"4567"
Az"5678"
>0A[0]"5678"
>1A[1]"5678"
>2A[2]"5678"
>3A[3]"5678"
>4A[4]"5678"
>5A[5]"5678"
>6A[6]"5678"
>7A[7]"5678"
>8A[8]"5678"
>9A[9]"5678"
Az"6789"
>0A[0]"6789"
>1A[1]"6789"
>2A[2]"6789"
>3A[3]"6789"
>4A[4]"6789"
>5A[5]"6789"
>6A[6]"6789"
>7A[7]"6789"
>8A[8]"6789"
>9A[9]"6789"
Az"7890"
>0A[0]"7890"
>1A[1]"7890"
>2A[2]"7890"
>3A[3]"7890"
>4A[4]"7890"
>5A[5]"7890"
>6A[6]"7890"
>7A[7]"7890"
>8A[8]"7890"
>9A[9]"7890"
Az"890-"
>0A[0]"890-"
>1A[1]"890-"
>2A[2]"890-"
>3A[3]"890-"
>4A[4]"890-"
>5A[5]"890-"
>6A[6]"890-"
>7A[7]"890-"
>8A[8]"890-"
>9A[9]"890-"
Az"90-^"
>0A[0]"90-^"
>1A[1]"90-^"
>2A[2]"90-^"
>3A[3]"90-^"
>4A[4]"90-^"
>5A[5]"90-^"
>6A[6]"90-^"
>7A[7]"90-^"
>8A[8]"90-^"
>9A[9]"90-^"
Az"qwer"
>0A[0]"qwer"
>1A[1]"qwer"
>2A[2]"qwer"
>3A[3]"qwer"
>4A[4]"qwer"
>5A[5]"qwer"
>6A[6]"qwer"
>7A[7]"qwer"
>8A[8]"qwer"
>9A[9]"qwer"
Az"wert"
>0A[0]"wert"
>1A[1]"wert"
>2A[2]"wert"
>3A[3]"wert"
>4A[4]"wert"
>5A[5]"wert"
>6A[6]"wert"
>7A[7]"wert"
>8A[8]"wert"
>9A[9]"wert"
Az"erty"
>0A[0]"erty"
>1A[1]"erty"
>2A[2]"erty"
>3A[3]"erty"
>4A[4]"erty"
>5A[5]"erty"
>6A[6]"erty"
>7A[7]"erty"
>8A[8]"erty"
>9A[9]"erty"
Az"rtyu"
>0A[0]"rtyu"
>1A[1]"rtyu"
>2A[2]"rtyu"
>3A[3]"rtyu"
>4A[4]"rtyu"
>5A[5]"rtyu"
>6A[6]"rtyu"
>7A[7]"rtyu"
>8A[8]"rtyu"
>9A[9]"rtyu"
Az"tyui"
>0A[0]"tyui"
>1A[1]"tyui"
>2A[2]"tyui"
>3A[3]"tyui"
>4A[4]"tyui"
>5A[5]"tyui"
>6A[6]"tyui"
>7A[7]"tyui"
>8A[8]"tyui"
>9A[9]"tyui"
Az"yuio"
>0A[0]"yuio"
>1A[1]"yuio"
>2A[2]"yuio"
>3A[3]"yuio"
>4A[4]"yuio"
>5A[5]"yuio"
>6A[6]"yuio"
>7A[7]"yuio"
>8A[8]"yuio"
>9A[9]"yuio"
Az"uiop"
>0A[0]"uiop"
>1A[1]"uiop"
>2A[2]"uiop"
>3A[3]"uiop"
>4A[4]"uiop"
>5A[5]"uiop"
>6A[6]"uiop"
>7A[7]"uiop"
>8A[8]"uiop"
>9A[9]"uiop"
Az"iop@"
>0A[0]"iop@"
>1A[1]"iop@"
>2A[2]"iop@"
>3A[3]"iop@"
>4A[4]"iop@"
>5A[5]"iop@"
>6A[6]"iop@"
>7A[7]"iop@"
>8A[8]"iop@"
>9A[9]"iop@"
Az"op@["
>0A[0]"op@["
>1A[1]"op@["
>2A[2]"op@["
>3A[3]"op@["
>4A[4]"op@["
>5A[5]"op@["
>6A[6]"op@["
>7A[7]"op@["
>8A[8]"op@["
>9A[9]"op@["
Az"asdf"
>0A[0]"asdf"
>1A[1]"asdf"
>2A[2]"asdf"
>3A[3]"asdf"
>4A[4]"asdf"
>5A[5]"asdf"
>6A[6]"asdf"
>7A[7]"asdf"
>8A[8]"asdf"
>9A[9]"asdf"
Az"sdfg"
>0A[0]"sdfg"
>1A[1]"sdfg"
>2A[2]"sdfg"
>3A[3]"sdfg"
>4A[4]"sdfg"
>5A[5]"sdfg"
>6A[6]"sdfg"
>7A[7]"sdfg"
>8A[8]"sdfg"
>9A[9]"sdfg"
Az"dfgh"
>0A[0]"dfgh"
>1A[1]"dfgh"
>2A[2]"dfgh"
>3A[3]"dfgh"
>4A[4]"dfgh"
>5A[5]"dfgh"
>6A[6]"dfgh"
>7A[7]"dfgh"
>8A[8]"dfgh"
>9A[9]"dfgh"
Az"fghj"
>0A[0]"fghj"
>1A[1]"fghj"
>2A[2]"fghj"
>3A[3]"fghj"
>4A[4]"fghj"
>5A[5]"fghj"
>6A[6]"fghj"
>7A[7]"fghj"
>8A[8]"fghj"
>9A[9]"fghj"
Az"ghjk"
>0A[0]"ghjk"
>1A[1]"ghjk"
>2A[2]"ghjk"
>3A[3]"ghjk"
>4A[4]"ghjk"
>5A[5]"ghjk"
>6A[6]"ghjk"
>7A[7]"ghjk"
>8A[8]"ghjk"
>9A[9]"ghjk"
Az"hjkl"
>0A[0]"hjkl"
>1A[1]"hjkl"
>2A[2]"hjkl"
>3A[3]"hjkl"
>4A[4]"hjkl"
>5A[5]"hjkl"
>6A[6]"hjkl"
>7A[7]"hjkl"
>8A[8]"hjkl"
>9A[9]"hjkl"
Az"jkl;"
>0A[0]"jkl;"
>1A[1]"jkl;"
>2A[2]"jkl;"
>3A[3]"jkl;"
>4A[4]"jkl;"
>5A[5]"jkl;"
>6A[6]"jkl;"
>7A[7]"jkl;"
>8A[8]"jkl;"
>9A[9]"jkl;"
Az"kl;:"
>0A[0]"kl;:"
>1A[1]"kl;:"
>2A[2]"kl;:"
>3A[3]"kl;:"
>4A[4]"kl;:"
>5A[5]"kl;:"
>6A[6]"kl;:"
>7A[7]"kl;:"
>8A[8]"kl;:"
>9A[9]"kl;:"
Az"l;:]"
>0A[0]"l;:]"
>1A[1]"l;:]"
>2A[2]"l;:]"
>3A[3]"l;:]"
>4A[4]"l;:]"
>5A[5]"l;:]"
>6A[6]"l;:]"
>7A[7]"l;:]"
>8A[8]"l;:]"
>9A[9]"l;:]"
Az"zxcv"
>0A[0]"zxcv"
>1A[1]"zxcv"
>2A[2]"zxcv"
>3A[3]"zxcv"
>4A[4]"zxcv"
>5A[5]"zxcv"
>6A[6]"zxcv"
>7A[7]"zxcv"
>8A[8]"zxcv"
>9A[9]"zxcv"
Az"xcvb"
>0A[0]"xcvb"
>1A[1]"xcvb"
>2A[2]"xcvb"
>3A[3]"xcvb"
>4A[4]"xcvb"
>5A[5]"xcvb"
>6A[6]"xcvb"
>7A[7]"xcvb"
>8A[8]"xcvb"
>9A[9]"xcvb"
Az"cvbn"
>0A[0]"cvbn"
>1A[1]"cvbn"
>2A[2]"cvbn"
>3A[3]"cvbn"
>4A[4]"cvbn"
>5A[5]"cvbn"
>6A[6]"cvbn"
>7A[7]"cvbn"
>8A[8]"cvbn"
>9A[9]"cvbn"
Az"vbnm"
>0A[0]"vbnm"
>1A[1]"vbnm"
>2A[2]"vbnm"
>3A[3]"vbnm"
>4A[4]"vbnm"
>5A[5]"vbnm"
>6A[6]"vbnm"
>7A[7]"vbnm"
>8A[8]"vbnm"
>9A[9]"vbnm"
Az"bnm,"
>0A[0]"bnm,"
>1A[1]"bnm,"
>2A[2]"bnm,"
>3A[3]"bnm,"
>4A[4]"bnm,"
>5A[5]"bnm,"
>6A[6]"bnm,"
>7A[7]"bnm,"
>8A[8]"bnm,"
>9A[9]"bnm,"
Az"nm,."
>0A[0]"nm,."
>1A[1]"nm,."
>2A[2]"nm,."
>3A[3]"nm,."
>4A[4]"nm,."
>5A[5]"nm,."
>6A[6]"nm,."
>7A[7]"nm,."
>8A[8]"nm,."
>9A[9]"nm,."
Az"m,./"
>0A[0]"m,./"
>1A[1]"m,./"
>2A[2]"m,./"
>3A[3]"m,./"
>4A[4]"m,./"
>5A[5]"m,./"
>6A[6]"m,./"
>7A[7]"m,./"
>8A[8]"m,./"
>9A[9]"m,./"
Az",./\"
>0A[0]",./\"
>1A[1]",./\"
>2A[2]",./\"
>3A[3]",./\"
>4A[4]",./\"
>5A[5]",./\"
>6A[6]",./\"
>7A[7]",./\"
>8A[8]",./\"
>9A[9]",./\"
Az"123"
>0A[0]"123"
>1A[1]"123"
>2A[2]"123"
>3A[3]"123"
>4A[4]"123"
>5A[5]"123"
>6A[6]"123"
>7A[7]"123"
>8A[8]"123"
>9A[9]"123"
Az"234"
>0A[0]"234"
>1A[1]"234"
>2A[2]"234"
>3A[3]"234"
>4A[4]"234"
>5A[5]"234"
>6A[6]"234"
>7A[7]"234"
>8A[8]"234"
>9A[9]"234"
Az"345"
>0A[0]"345"
>1A[1]"345"
>2A[2]"345"
>3A[3]"345"
>4A[4]"345"
>5A[5]"345"
>6A[6]"345"
>7A[7]"345"
>8A[8]"345"
>9A[9]"345"
Az"456"
>0A[0]"456"
>1A[1]"456"
>2A[2]"456"
>3A[3]"456"
>4A[4]"456"
>5A[5]"456"
>6A[6]"456"
>7A[7]"456"
>8A[8]"456"
>9A[9]"456"
Az"567"
>0A[0]"567"
>1A[1]"567"
>2A[2]"567"
>3A[3]"567"
>4A[4]"567"
>5A[5]"567"
>6A[6]"567"
>7A[7]"567"
>8A[8]"567"
>9A[9]"567"
Az"678"
>0A[0]"678"
>1A[1]"678"
>2A[2]"678"
>3A[3]"678"
>4A[4]"678"
>5A[5]"678"
>6A[6]"678"
>7A[7]"678"
>8A[8]"678"
>9A[9]"678"
Az"789"
>0A[0]"789"
>1A[1]"789"
>2A[2]"789"
>3A[3]"789"
>4A[4]"789"
>5A[5]"789"
>6A[6]"789"
>7A[7]"789"
>8A[8]"789"
>9A[9]"789"
Az"890"
>0A[0]"890"
>1A[1]"890"
>2A[2]"890"
>3A[3]"890"
>4A[4]"890"
>5A[5]"890"
>6A[6]"890"
>7A[7]"890"
>8A[8]"890"
>9A[9]"890"
Az"90-"
>0A[0]"90-"
>1A[1]"90-"
>2A[2]"90-"
>3A[3]"90-"
>4A[4]"90-"
>5A[5]"90-"
>6A[6]"90-"
>7A[7]"90-"
>8A[8]"90-"
>9A[9]"90-"
Az"0-^"
>0A[0]"0-^"
>1A[1]"0-^"
>2A[2]"0-^"
>3A[3]"0-^"
>4A[4]"0-^"
>5A[5]"0-^"
>6A[6]"0-^"
>7A[7]"0-^"
>8A[8]"0-^"
>9A[9]"0-^"
Az"qwe"
>0A[0]"qwe"
>1A[1]"qwe"
>2A[2]"qwe"
>3A[3]"qwe"
>4A[4]"qwe"
>5A[5]"qwe"
>6A[6]"qwe"
>7A[7]"qwe"
>8A[8]"qwe"
>9A[9]"qwe"
Az"wer"
>0A[0]"wer"
>1A[1]"wer"
>2A[2]"wer"
>3A[3]"wer"
>4A[4]"wer"
>5A[5]"wer"
>6A[6]"wer"
>7A[7]"wer"
>8A[8]"wer"
>9A[9]"wer"
Az"ert"
>0A[0]"ert"
>1A[1]"ert"
>2A[2]"ert"
>3A[3]"ert"
>4A[4]"ert"
>5A[5]"ert"
>6A[6]"ert"
>7A[7]"ert"
>8A[8]"ert"
>9A[9]"ert"
Az"rty"
>0A[0]"rty"
>1A[1]"rty"
>2A[2]"rty"
>3A[3]"rty"
>4A[4]"rty"
>5A[5]"rty"
>6A[6]"rty"
>7A[7]"rty"
>8A[8]"rty"
>9A[9]"rty"
Az"tyu"
>0A[0]"tyu"
>1A[1]"tyu"
>2A[2]"tyu"
>3A[3]"tyu"
>4A[4]"tyu"
>5A[5]"tyu"
>6A[6]"tyu"
>7A[7]"tyu"
>8A[8]"tyu"
>9A[9]"tyu"
Az"yui"
>0A[0]"yui"
>1A[1]"yui"
>2A[2]"yui"
>3A[3]"yui"
>4A[4]"yui"
>5A[5]"yui"
>6A[6]"yui"
>7A[7]"yui"
>8A[8]"yui"
>9A[9]"yui"
Az"uio"
>0A[0]"uio"
>1A[1]"uio"
>2A[2]"uio"
>3A[3]"uio"
>4A[4]"uio"
>5A[5]"uio"
>6A[6]"uio"
>7A[7]"uio"
>8A[8]"uio"
>9A[9]"uio"
Az"iop"
>0A[0]"iop"
>1A[1]"iop"
>2A[2]"iop"
>3A[3]"iop"
>4A[4]"iop"
>5A[5]"iop"
>6A[6]"iop"
>7A[7]"iop"
>8A[8]"iop"
>9A[9]"iop"
Az"op@"
>0A[0]"op@"
>1A[1]"op@"
>2A[2]"op@"
>3A[3]"op@"
>4A[4]"op@"
>5A[5]"op@"
>6A[6]"op@"
>7A[7]"op@"
>8A[8]"op@"
>9A[9]"op@"
Az"p@["
>0A[0]"p@["
>1A[1]"p@["
>2A[2]"p@["
>3A[3]"p@["
>4A[4]"p@["
>5A[5]"p@["
>6A[6]"p@["
>7A[7]"p@["
>8A[8]"p@["
>9A[9]"p@["
Az"asd"
>0A[0]"asd"
>1A[1]"asd"
>2A[2]"asd"
>3A[3]"asd"
>4A[4]"asd"
>5A[5]"asd"
>6A[6]"asd"
>7A[7]"asd"
>8A[8]"asd"
>9A[9]"asd"
Az"sdf"
>0A[0]"sdf"
>1A[1]"sdf"
>2A[2]"sdf"
>3A[3]"sdf"
>4A[4]"sdf"
>5A[5]"sdf"
>6A[6]"sdf"
>7A[7]"sdf"
>8A[8]"sdf"
>9A[9]"sdf"
Az"dfg"
>0A[0]"dfg"
>1A[1]"dfg"
>2A[2]"dfg"
>3A[3]"dfg"
>4A[4]"dfg"
>5A[5]"dfg"
>6A[6]"dfg"
>7A[7]"dfg"
>8A[8]"dfg"
>9A[9]"dfg"
Az"fgh"
>0A[0]"fgh"
>1A[1]"fgh"
>2A[2]"fgh"
>3A[3]"fgh"
>4A[4]"fgh"
>5A[5]"fgh"
>6A[6]"fgh"
>7A[7]"fgh"
>8A[8]"fgh"
>9A[9]"fgh"
Az"ghj"
>0A[0]"ghj"
>1A[1]"ghj"
>2A[2]"ghj"
>3A[3]"ghj"
>4A[4]"ghj"
>5A[5]"ghj"
>6A[6]"ghj"
>7A[7]"ghj"
>8A[8]"ghj"
>9A[9]"ghj"
Az"hjk"
>0A[0]"hjk"
>1A[1]"hjk"
>2A[2]"hjk"
>3A[3]"hjk"
>4A[4]"hjk"
>5A[5]"hjk"
>6A[6]"hjk"
>7A[7]"hjk"
>8A[8]"hjk"
>9A[9]"hjk"
Az"jkl"
>0A[0]"jkl"
>1A[1]"jkl"
>2A[2]"jkl"
>3A[3]"jkl"
>4A[4]"jkl"
>5A[5]"jkl"
>6A[6]"jkl"
>7A[7]"jkl"
>8A[8]"jkl"
>9A[9]"jkl"
Az"kl;"
>0A[0]"kl;"
>1A[1]"kl;"
>2A[2]"kl;"
>3A[3]"kl;"
>4A[4]"kl;"
>5A[5]"kl;"
>6A[6]"kl;"
>7A[7]"kl;"
>8A[8]"kl;"
>9A[9]"kl;"
Az"l;:"
>0A[0]"l;:"
>1A[1]"l;:"
>2A[2]"l;:"
>3A[3]"l;:"
>4A[4]"l;:"
>5A[5]"l;:"
>6A[6]"l;:"
>7A[7]"l;:"
>8A[8]"l;:"
>9A[9]"l;:"
Az";:]"
>0A[0]";:]"
>1A[1]";:]"
>2A[2]";:]"
>3A[3]";:]"
>4A[4]";:]"
>5A[5]";:]"
>6A[6]";:]"
>7A[7]";:]"
>8A[8]";:]"
>9A[9]";:]"
Az"zxc"
>0A[0]"zxc"
>1A[1]"zxc"
>2A[2]"zxc"
>3A[3]"zxc"
>4A[4]"zxc"
>5A[5]"zxc"
>6A[6]"zxc"
>7A[7]"zxc"
>8A[8]"zxc"
>9A[9]"zxc"
Az"xcv"
>0A[0]"xcv"
>1A[1]"xcv"
>2A[2]"xcv"
>3A[3]"xcv"
>4A[4]"xcv"
>5A[5]"xcv"
>6A[6]"xcv"
>7A[7]"xcv"
>8A[8]"xcv"
>9A[9]"xcv"
Az"cvb"
>0A[0]"cvb"
>1A[1]"cvb"
>2A[2]"cvb"
>3A[3]"cvb"
>4A[4]"cvb"
>5A[5]"cvb"
>6A[6]"cvb"
>7A[7]"cvb"
>8A[8]"cvb"
>9A[9]"cvb"
Az"vbn"
>0A[0]"vbn"
>1A[1]"vbn"
>2A[2]"vbn"
>3A[3]"vbn"
>4A[4]"vbn"
>5A[5]"vbn"
>6A[6]"vbn"
>7A[7]"vbn"
>8A[8]"vbn"
>9A[9]"vbn"
Az"bnm"
>0A[0]"bnm"
>1A[1]"bnm"
>2A[2]"bnm"
>3A[3]"bnm"
>4A[4]"bnm"
>5A[5]"bnm"
>6A[6]"bnm"
>7A[7]"bnm"
>8A[8]"bnm"
>9A[9]"bnm"
Az"nm,"
>0A[0]"nm,"
>1A[1]"nm,"
>2A[2]"nm,"
>3A[3]"nm,"
>4A[4]"nm,"
>5A[5]"nm,"
>6A[6]"nm,"
>7A[7]"nm,"
>8A[8]"nm,"
>9A[9]"nm,"
Az"m,."
>0A[0]"m,."
>1A[1]"m,."
>2A[2]"m,."
>3A[3]"m,."
>4A[4]"m,."
>5A[5]"m,."
>6A[6]"m,."
>7A[7]"m,."
>8A[8]"m,."
>9A[9]"m,."
Az",./"
>0A[0]",./"
>1A[1]",./"
>2A[2]",./"
>3A[3]",./"
>4A[4]",./"
>5A[5]",./"
>6A[6]",./"
>7A[7]",./"
>8A[8]",./"
>9A[9]",./"
Az"./\"
>0A[0]"./\"
>1A[1]"./\"
>2A[2]"./\"
>3A[3]"./\"
>4A[4]"./\"
>5A[5]"./\"
>6A[6]"./\"
>7A[7]"./\"
>8A[8]"./\"
>9A[9]"./\"
Az"4321"
>0A[0]"4321"
>1A[1]"4321"
>2A[2]"4321"
>3A[3]"4321"
>4A[4]"4321"
>5A[5]"4321"
>6A[6]"4321"
>7A[7]"4321"
>8A[8]"4321"
>9A[9]"4321"
Az"5432"
>0A[0]"5432"
>1A[1]"5432"
>2A[2]"5432"
>3A[3]"5432"
>4A[4]"5432"
>5A[5]"5432"
>6A[6]"5432"
>7A[7]"5432"
>8A[8]"5432"
>9A[9]"5432"
Az"6543"
>0A[0]"6543"
>1A[1]"6543"
>2A[2]"6543"
>3A[3]"6543"
>4A[4]"6543"
>5A[5]"6543"
>6A[6]"6543"
>7A[7]"6543"
>8A[8]"6543"
>9A[9]"6543"
Az"7654"
>0A[0]"7654"
>1A[1]"7654"
>2A[2]"7654"
>3A[3]"7654"
>4A[4]"7654"
>5A[5]"7654"
>6A[6]"7654"
>7A[7]"7654"
>8A[8]"7654"
>9A[9]"7654"
Az"8765"
>0A[0]"8765"
>1A[1]"8765"
>2A[2]"8765"
>3A[3]"8765"
>4A[4]"8765"
>5A[5]"8765"
>6A[6]"8765"
>7A[7]"8765"
>8A[8]"8765"
>9A[9]"8765"
Az"9876"
>0A[0]"9876"
>1A[1]"9876"
>2A[2]"9876"
>3A[3]"9876"
>4A[4]"9876"
>5A[5]"9876"
>6A[6]"9876"
>7A[7]"9876"
>8A[8]"9876"
>9A[9]"9876"
Az"0987"
>0A[0]"0987"
>1A[1]"0987"
>2A[2]"0987"
>3A[3]"0987"
>4A[4]"0987"
>5A[5]"0987"
>6A[6]"0987"
>7A[7]"0987"
>8A[8]"0987"
>9A[9]"0987"
Az"-098"
>0A[0]"-098"
>1A[1]"-098"
>2A[2]"-098"
>3A[3]"-098"
>4A[4]"-098"
>5A[5]"-098"
>6A[6]"-098"
>7A[7]"-098"
>8A[8]"-098"
>9A[9]"-098"
Az"^-09"
>0A[0]"^-09"
>1A[1]"^-09"
>2A[2]"^-09"
>3A[3]"^-09"
>4A[4]"^-09"
>5A[5]"^-09"
>6A[6]"^-09"
>7A[7]"^-09"
>8A[8]"^-09"
>9A[9]"^-09"
Az"rewq"
>0A[0]"rewq"
>1A[1]"rewq"
>2A[2]"rewq"
>3A[3]"rewq"
>4A[4]"rewq"
>5A[5]"rewq"
>6A[6]"rewq"
>7A[7]"rewq"
>8A[8]"rewq"
>9A[9]"rewq"
Az"trew"
>0A[0]"trew"
>1A[1]"trew"
>2A[2]"trew"
>3A[3]"trew"
>4A[4]"trew"
>5A[5]"trew"
>6A[6]"trew"
>7A[7]"trew"
>8A[8]"trew"
>9A[9]"trew"
Az"ytre"
>0A[0]"ytre"
>1A[1]"ytre"
>2A[2]"ytre"
>3A[3]"ytre"
>4A[4]"ytre"
>5A[5]"ytre"
>6A[6]"ytre"
>7A[7]"ytre"
>8A[8]"ytre"
>9A[9]"ytre"
Az"uytr"
>0A[0]"uytr"
>1A[1]"uytr"
>2A[2]"uytr"
>3A[3]"uytr"
>4A[4]"uytr"
>5A[5]"uytr"
>6A[6]"uytr"
>7A[7]"uytr"
>8A[8]"uytr"
>9A[9]"uytr"
Az"iuyt"
>0A[0]"iuyt"
>1A[1]"iuyt"
>2A[2]"iuyt"
>3A[3]"iuyt"
>4A[4]"iuyt"
>5A[5]"iuyt"
>6A[6]"iuyt"
>7A[7]"iuyt"
>8A[8]"iuyt"
>9A[9]"iuyt"
Az"oiuy"
>0A[0]"oiuy"
>1A[1]"oiuy"
>2A[2]"oiuy"
>3A[3]"oiuy"
>4A[4]"oiuy"
>5A[5]"oiuy"
>6A[6]"oiuy"
>7A[7]"oiuy"
>8A[8]"oiuy"
>9A[9]"oiuy"
Az"poiu"
>0A[0]"poiu"
>1A[1]"poiu"
>2A[2]"poiu"
>3A[3]"poiu"
>4A[4]"poiu"
>5A[5]"poiu"
>6A[6]"poiu"
>7A[7]"poiu"
>8A[8]"poiu"
>9A[9]"poiu"
Az"@poi"
>0A[0]"@poi"
>1A[1]"@poi"
>2A[2]"@poi"
>3A[3]"@poi"
>4A[4]"@poi"
>5A[5]"@poi"
>6A[6]"@poi"
>7A[7]"@poi"
>8A[8]"@poi"
>9A[9]"@poi"
Az"\[@po"
>0A[0]"\[@po"
>1A[1]"\[@po"
>2A[2]"\[@po"
>3A[3]"\[@po"
>4A[4]"\[@po"
>5A[5]"\[@po"
>6A[6]"\[@po"
>7A[7]"\[@po"
>8A[8]"\[@po"
>9A[9]"\[@po"
Az"fdsa"
>0A[0]"fdsa"
>1A[1]"fdsa"
>2A[2]"fdsa"
>3A[3]"fdsa"
>4A[4]"fdsa"
>5A[5]"fdsa"
>6A[6]"fdsa"
>7A[7]"fdsa"
>8A[8]"fdsa"
>9A[9]"fdsa"
Az"gfds"
>0A[0]"gfds"
>1A[1]"gfds"
>2A[2]"gfds"
>3A[3]"gfds"
>4A[4]"gfds"
>5A[5]"gfds"
>6A[6]"gfds"
>7A[7]"gfds"
>8A[8]"gfds"
>9A[9]"gfds"
Az"hgfd"
>0A[0]"hgfd"
>1A[1]"hgfd"
>2A[2]"hgfd"
>3A[3]"hgfd"
>4A[4]"hgfd"
>5A[5]"hgfd"
>6A[6]"hgfd"
>7A[7]"hgfd"
>8A[8]"hgfd"
>9A[9]"hgfd"
Az"jhgf"
>0A[0]"jhgf"
>1A[1]"jhgf"
>2A[2]"jhgf"
>3A[3]"jhgf"
>4A[4]"jhgf"
>5A[5]"jhgf"
>6A[6]"jhgf"
>7A[7]"jhgf"
>8A[8]"jhgf"
>9A[9]"jhgf"
Az"kjhg"
>0A[0]"kjhg"
>1A[1]"kjhg"
>2A[2]"kjhg"
>3A[3]"kjhg"
>4A[4]"kjhg"
>5A[5]"kjhg"
>6A[6]"kjhg"
>7A[7]"kjhg"
>8A[8]"kjhg"
>9A[9]"kjhg"
Az"lkjh"
>0A[0]"lkjh"
>1A[1]"lkjh"
>2A[2]"lkjh"
>3A[3]"lkjh"
>4A[4]"lkjh"
>5A[5]"lkjh"
>6A[6]"lkjh"
>7A[7]"lkjh"
>8A[8]"lkjh"
>9A[9]"lkjh"
Az";lkj"
>0A[0]";lkj"
>1A[1]";lkj"
>2A[2]";lkj"
>3A[3]";lkj"
>4A[4]";lkj"
>5A[5]";lkj"
>6A[6]";lkj"
>7A[7]";lkj"
>8A[8]";lkj"
>9A[9]";lkj"
Az":;lk"
>0A[0]":;lk"
>1A[1]":;lk"
>2A[2]":;lk"
>3A[3]":;lk"
>4A[4]":;lk"
>5A[5]":;lk"
>6A[6]":;lk"
>7A[7]":;lk"
>8A[8]":;lk"
>9A[9]":;lk"
Az"]:;l"
>0A[0]"]:;l"
>1A[1]"]:;l"
>2A[2]"]:;l"
>3A[3]"]:;l"
>4A[4]"]:;l"
>5A[5]"]:;l"
>6A[6]"]:;l"
>7A[7]"]:;l"
>8A[8]"]:;l"
>9A[9]"]:;l"
Az"vcxz"
>0A[0]"vcxz"
>1A[1]"vcxz"
>2A[2]"vcxz"
>3A[3]"vcxz"
>4A[4]"vcxz"
>5A[5]"vcxz"
>6A[6]"vcxz"
>7A[7]"vcxz"
>8A[8]"vcxz"
>9A[9]"vcxz"
Az"bvcx"
>0A[0]"bvcx"
>1A[1]"bvcx"
>2A[2]"bvcx"
>3A[3]"bvcx"
>4A[4]"bvcx"
>5A[5]"bvcx"
>6A[6]"bvcx"
>7A[7]"bvcx"
>8A[8]"bvcx"
>9A[9]"bvcx"
Az"nbvc"
>0A[0]"nbvc"
>1A[1]"nbvc"
>2A[2]"nbvc"
>3A[3]"nbvc"
>4A[4]"nbvc"
>5A[5]"nbvc"
>6A[6]"nbvc"
>7A[7]"nbvc"
>8A[8]"nbvc"
>9A[9]"nbvc"
Az"mnbv"
>0A[0]"mnbv"
>1A[1]"mnbv"
>2A[2]"mnbv"
>3A[3]"mnbv"
>4A[4]"mnbv"
>5A[5]"mnbv"
>6A[6]"mnbv"
>7A[7]"mnbv"
>8A[8]"mnbv"
>9A[9]"mnbv"
Az",mnb"
>0A[0]",mnb"
>1A[1]",mnb"
>2A[2]",mnb"
>3A[3]",mnb"
>4A[4]",mnb"
>5A[5]",mnb"
>6A[6]",mnb"
>7A[7]",mnb"
>8A[8]",mnb"
>9A[9]",mnb"
Az".,mn"
>0A[0]".,mn"
>1A[1]".,mn"
>2A[2]".,mn"
>3A[3]".,mn"
>4A[4]".,mn"
>5A[5]".,mn"
>6A[6]".,mn"
>7A[7]".,mn"
>8A[8]".,mn"
>9A[9]".,mn"
Az"/.,m"
>0A[0]"/.,m"
>1A[1]"/.,m"
>2A[2]"/.,m"
>3A[3]"/.,m"
>4A[4]"/.,m"
>5A[5]"/.,m"
>6A[6]"/.,m"
>7A[7]"/.,m"
>8A[8]"/.,m"
>9A[9]"/.,m"
Az"\/.,"
>0A[0]"\/.,"
>1A[1]"\/.,"
>2A[2]"\/.,"
>3A[3]"\/.,"
>4A[4]"\/.,"
>5A[5]"\/.,"
>6A[6]"\/.,"
>7A[7]"\/.,"
>8A[8]"\/.,"
>9A[9]"\/.,"
Az"321"
>0A[0]"321"
>1A[1]"321"
>2A[2]"321"
>3A[3]"321"
>4A[4]"321"
>5A[5]"321"
>6A[6]"321"
>7A[7]"321"
>8A[8]"321"
>9A[9]"321"
Az"432"
>0A[0]"432"
>1A[1]"432"
>2A[2]"432"
>3A[3]"432"
>4A[4]"432"
>5A[5]"432"
>6A[6]"432"
>7A[7]"432"
>8A[8]"432"
>9A[9]"432"
Az"543"
>0A[0]"543"
>1A[1]"543"
>2A[2]"543"
>3A[3]"543"
>4A[4]"543"
>5A[5]"543"
>6A[6]"543"
>7A[7]"543"
>8A[8]"543"
>9A[9]"543"
Az"654"
>0A[0]"654"
>1A[1]"654"
>2A[2]"654"
>3A[3]"654"
>4A[4]"654"
>5A[5]"654"
>6A[6]"654"
>7A[7]"654"
>8A[8]"654"
>9A[9]"654"
Az"765"
>0A[0]"765"
>1A[1]"765"
>2A[2]"765"
>3A[3]"765"
>4A[4]"765"
>5A[5]"765"
>6A[6]"765"
>7A[7]"765"
>8A[8]"765"
>9A[9]"765"
Az"876"
>0A[0]"876"
>1A[1]"876"
>2A[2]"876"
>3A[3]"876"
>4A[4]"876"
>5A[5]"876"
>6A[6]"876"
>7A[7]"876"
>8A[8]"876"
>9A[9]"876"
Az"987"
>0A[0]"987"
>1A[1]"987"
>2A[2]"987"
>3A[3]"987"
>4A[4]"987"
>5A[5]"987"
>6A[6]"987"
>7A[7]"987"
>8A[8]"987"
>9A[9]"987"
Az"098"
>0A[0]"098"
>1A[1]"098"
>2A[2]"098"
>3A[3]"098"
>4A[4]"098"
>5A[5]"098"
>6A[6]"098"
>7A[7]"098"
>8A[8]"098"
>9A[9]"098"
Az"-09"
>0A[0]"-09"
>1A[1]"-09"
>2A[2]"-09"
>3A[3]"-09"
>4A[4]"-09"
>5A[5]"-09"
>6A[6]"-09"
>7A[7]"-09"
>8A[8]"-09"
>9A[9]"-09"
Az"^-0"
>0A[0]"^-0"
>1A[1]"^-0"
>2A[2]"^-0"
>3A[3]"^-0"
>4A[4]"^-0"
>5A[5]"^-0"
>6A[6]"^-0"
>7A[7]"^-0"
>8A[8]"^-0"
>9A[9]"^-0"
Az"ewq"
>0A[0]"ewq"
>1A[1]"ewq"
>2A[2]"ewq"
>3A[3]"ewq"
>4A[4]"ewq"
>5A[5]"ewq"
>6A[6]"ewq"
>7A[7]"ewq"
>8A[8]"ewq"
>9A[9]"ewq"
Az"rew"
>0A[0]"rew"
>1A[1]"rew"
>2A[2]"rew"
>3A[3]"rew"
>4A[4]"rew"
>5A[5]"rew"
>6A[6]"rew"
>7A[7]"rew"
>8A[8]"rew"
>9A[9]"rew"
Az"tre"
>0A[0]"tre"
>1A[1]"tre"
>2A[2]"tre"
>3A[3]"tre"
>4A[4]"tre"
>5A[5]"tre"
>6A[6]"tre"
>7A[7]"tre"
>8A[8]"tre"
>9A[9]"tre"
Az"ytr"
>0A[0]"ytr"
>1A[1]"ytr"
>2A[2]"ytr"
>3A[3]"ytr"
>4A[4]"ytr"
>5A[5]"ytr"
>6A[6]"ytr"
>7A[7]"ytr"
>8A[8]"ytr"
>9A[9]"ytr"
Az"uyt"
>0A[0]"uyt"
>1A[1]"uyt"
>2A[2]"uyt"
>3A[3]"uyt"
>4A[4]"uyt"
>5A[5]"uyt"
>6A[6]"uyt"
>7A[7]"uyt"
>8A[8]"uyt"
>9A[9]"uyt"
Az"iuy"
>0A[0]"iuy"
>1A[1]"iuy"
>2A[2]"iuy"
>3A[3]"iuy"
>4A[4]"iuy"
>5A[5]"iuy"
>6A[6]"iuy"
>7A[7]"iuy"
>8A[8]"iuy"
>9A[9]"iuy"
Az"oiu"
>0A[0]"oiu"
>1A[1]"oiu"
>2A[2]"oiu"
>3A[3]"oiu"
>4A[4]"oiu"
>5A[5]"oiu"
>6A[6]"oiu"
>7A[7]"oiu"
>8A[8]"oiu"
>9A[9]"oiu"
Az"poi"
>0A[0]"poi"
>1A[1]"poi"
>2A[2]"poi"
>3A[3]"poi"
>4A[4]"poi"
>5A[5]"poi"
>6A[6]"poi"
>7A[7]"poi"
>8A[8]"poi"
>9A[9]"poi"
Az"@po"
>0A[0]"@po"
>1A[1]"@po"
>2A[2]"@po"
>3A[3]"@po"
>4A[4]"@po"
>5A[5]"@po"
>6A[6]"@po"
>7A[7]"@po"
>8A[8]"@po"
>9A[9]"@po"
Az"\[@p"
>0A[0]"\[@p"
>1A[1]"\[@p"
>2A[2]"\[@p"
>3A[3]"\[@p"
>4A[4]"\[@p"
>5A[5]"\[@p"
>6A[6]"\[@p"
>7A[7]"\[@p"
>8A[8]"\[@p"
>9A[9]"\[@p"
Az"dsa"
>0A[0]"dsa"
>1A[1]"dsa"
>2A[2]"dsa"
>3A[3]"dsa"
>4A[4]"dsa"
>5A[5]"dsa"
>6A[6]"dsa"
>7A[7]"dsa"
>8A[8]"dsa"
>9A[9]"dsa"
Az"fds"
>0A[0]"fds"
>1A[1]"fds"
>2A[2]"fds"
>3A[3]"fds"
>4A[4]"fds"
>5A[5]"fds"
>6A[6]"fds"
>7A[7]"fds"
>8A[8]"fds"
>9A[9]"fds"
Az"gfd"
>0A[0]"gfd"
>1A[1]"gfd"
>2A[2]"gfd"
>3A[3]"gfd"
>4A[4]"gfd"
>5A[5]"gfd"
>6A[6]"gfd"
>7A[7]"gfd"
>8A[8]"gfd"
>9A[9]"gfd"
Az"hgf"
>0A[0]"hgf"
>1A[1]"hgf"
>2A[2]"hgf"
>3A[3]"hgf"
>4A[4]"hgf"
>5A[5]"hgf"
>6A[6]"hgf"
>7A[7]"hgf"
>8A[8]"hgf"
>9A[9]"hgf"
Az"jhg"
>0A[0]"jhg"
>1A[1]"jhg"
>2A[2]"jhg"
>3A[3]"jhg"
>4A[4]"jhg"
>5A[5]"jhg"
>6A[6]"jhg"
>7A[7]"jhg"
>8A[8]"jhg"
>9A[9]"jhg"
Az"kjh"
>0A[0]"kjh"
>1A[1]"kjh"
>2A[2]"kjh"
>3A[3]"kjh"
>4A[4]"kjh"
>5A[5]"kjh"
>6A[6]"kjh"
>7A[7]"kjh"
>8A[8]"kjh"
>9A[9]"kjh"
Az"lkj"
>0A[0]"lkj"
>1A[1]"lkj"
>2A[2]"lkj"
>3A[3]"lkj"
>4A[4]"lkj"
>5A[5]"lkj"
>6A[6]"lkj"
>7A[7]"lkj"
>8A[8]"lkj"
>9A[9]"lkj"
Az";lk"
>0A[0]";lk"
>1A[1]";lk"
>2A[2]";lk"
>3A[3]";lk"
>4A[4]";lk"
>5A[5]";lk"
>6A[6]";lk"
>7A[7]";lk"
>8A[8]";lk"
>9A[9]";lk"
Az":;l"
>0A[0]":;l"
>1A[1]":;l"
>2A[2]":;l"
>3A[3]":;l"
>4A[4]":;l"
>5A[5]":;l"
>6A[6]":;l"
>7A[7]":;l"
>8A[8]":;l"
>9A[9]":;l"
Az"]:;"
>0A[0]"]:;"
>1A[1]"]:;"
>2A[2]"]:;"
>3A[3]"]:;"
>4A[4]"]:;"
>5A[5]"]:;"
>6A[6]"]:;"
>7A[7]"]:;"
>8A[8]"]:;"
>9A[9]"]:;"
Az"cxz"
>0A[0]"cxz"
>1A[1]"cxz"
>2A[2]"cxz"
>3A[3]"cxz"
>4A[4]"cxz"
>5A[5]"cxz"
>6A[6]"cxz"
>7A[7]"cxz"
>8A[8]"cxz"
>9A[9]"cxz"
Az"vcx"
>0A[0]"vcx"
>1A[1]"vcx"
>2A[2]"vcx"
>3A[3]"vcx"
>4A[4]"vcx"
>5A[5]"vcx"
>6A[6]"vcx"
>7A[7]"vcx"
>8A[8]"vcx"
>9A[9]"vcx"
Az"bvc"
>0A[0]"bvc"
>1A[1]"bvc"
>2A[2]"bvc"
>3A[3]"bvc"
>4A[4]"bvc"
>5A[5]"bvc"
>6A[6]"bvc"
>7A[7]"bvc"
>8A[8]"bvc"
>9A[9]"bvc"
Az"nbv"
>0A[0]"nbv"
>1A[1]"nbv"
>2A[2]"nbv"
>3A[3]"nbv"
>4A[4]"nbv"
>5A[5]"nbv"
>6A[6]"nbv"
>7A[7]"nbv"
>8A[8]"nbv"
>9A[9]"nbv"
Az"mnb"
>0A[0]"mnb"
>1A[1]"mnb"
>2A[2]"mnb"
>3A[3]"mnb"
>4A[4]"mnb"
>5A[5]"mnb"
>6A[6]"mnb"
>7A[7]"mnb"
>8A[8]"mnb"
>9A[9]"mnb"
Az",mn"
>0A[0]",mn"
>1A[1]",mn"
>2A[2]",mn"
>3A[3]",mn"
>4A[4]",mn"
>5A[5]",mn"
>6A[6]",mn"
>7A[7]",mn"
>8A[8]",mn"
>9A[9]",mn"
Az".,m"
>0A[0]".,m"
>1A[1]".,m"
>2A[2]".,m"
>3A[3]".,m"
>4A[4]".,m"
>5A[5]".,m"
>6A[6]".,m"
>7A[7]".,m"
>8A[8]".,m"
>9A[9]".,m"
Az"/.,"
>0A[0]"/.,"
>1A[1]"/.,"
>2A[2]"/.,"
>3A[3]"/.,"
>4A[4]"/.,"
>5A[5]"/.,"
>6A[6]"/.,"
>7A[7]"/.,"
>8A[8]"/.,"
>9A[9]"/.,"
Az"\/."
>0A[0]"\/."
>1A[1]"\/."
>2A[2]"\/."
>3A[3]"\/."
>4A[4]"\/."
>5A[5]"\/."
>6A[6]"\/."
>7A[7]"\/."
>8A[8]"\/."
>9A[9]"\/."
Az"1qaz"
>0A[0]"1qaz"
>1A[1]"1qaz"
>2A[2]"1qaz"
>3A[3]"1qaz"
>4A[4]"1qaz"
>5A[5]"1qaz"
>6A[6]"1qaz"
>7A[7]"1qaz"
>8A[8]"1qaz"
>9A[9]"1qaz"
Az"2wsx"
>0A[0]"2wsx"
>1A[1]"2wsx"
>2A[2]"2wsx"
>3A[3]"2wsx"
>4A[4]"2wsx"
>5A[5]"2wsx"
>6A[6]"2wsx"
>7A[7]"2wsx"
>8A[8]"2wsx"
>9A[9]"2wsx"
Az"3edc"
>0A[0]"3edc"
>1A[1]"3edc"
>2A[2]"3edc"
>3A[3]"3edc"
>4A[4]"3edc"
>5A[5]"3edc"
>6A[6]"3edc"
>7A[7]"3edc"
>8A[8]"3edc"
>9A[9]"3edc"
Az"4rfv"
>0A[0]"4rfv"
>1A[1]"4rfv"
>2A[2]"4rfv"
>3A[3]"4rfv"
>4A[4]"4rfv"
>5A[5]"4rfv"
>6A[6]"4rfv"
>7A[7]"4rfv"
>8A[8]"4rfv"
>9A[9]"4rfv"
Az"5tgb"
>0A[0]"5tgb"
>1A[1]"5tgb"
>2A[2]"5tgb"
>3A[3]"5tgb"
>4A[4]"5tgb"
>5A[5]"5tgb"
>6A[6]"5tgb"
>7A[7]"5tgb"
>8A[8]"5tgb"
>9A[9]"5tgb"
Az"6yhn"
>0A[0]"6yhn"
>1A[1]"6yhn"
>2A[2]"6yhn"
>3A[3]"6yhn"
>4A[4]"6yhn"
>5A[5]"6yhn"
>6A[6]"6yhn"
>7A[7]"6yhn"
>8A[8]"6yhn"
>9A[9]"6yhn"
Az"7ujm"
>0A[0]"7ujm"
>1A[1]"7ujm"
>2A[2]"7ujm"
>3A[3]"7ujm"
>4A[4]"7ujm"
>5A[5]"7ujm"
>6A[6]"7ujm"
>7A[7]"7ujm"
>8A[8]"7ujm"
>9A[9]"7ujm"
Az"8ik,"
>0A[0]"8ik,"
>1A[1]"8ik,"
>2A[2]"8ik,"
>3A[3]"8ik,"
>4A[4]"8ik,"
>5A[5]"8ik,"
>6A[6]"8ik,"
>7A[7]"8ik,"
>8A[8]"8ik,"
>9A[9]"8ik,"
Az"9ol."
>0A[0]"9ol."
>1A[1]"9ol."
>2A[2]"9ol."
>3A[3]"9ol."
>4A[4]"9ol."
>5A[5]"9ol."
>6A[6]"9ol."
>7A[7]"9ol."
>8A[8]"9ol."
>9A[9]"9ol."
Az"0p;/"
>0A[0]"0p;/"
>1A[1]"0p;/"
>2A[2]"0p;/"
>3A[3]"0p;/"
>4A[4]"0p;/"
>5A[5]"0p;/"
>6A[6]"0p;/"
>7A[7]"0p;/"
>8A[8]"0p;/"
>9A[9]"0p;/"
Az"-@:\"
>0A[0]"-@:\"
>1A[1]"-@:\"
>2A[2]"-@:\"
>3A[3]"-@:\"
>4A[4]"-@:\"
>5A[5]"-@:\"
>6A[6]"-@:\"
>7A[7]"-@:\"
>8A[8]"-@:\"
>9A[9]"-@:\"
Az"1qa"
>0A[0]"1qa"
>1A[1]"1qa"
>2A[2]"1qa"
>3A[3]"1qa"
>4A[4]"1qa"
>5A[5]"1qa"
>6A[6]"1qa"
>7A[7]"1qa"
>8A[8]"1qa"
>9A[9]"1qa"
Az"2ws"
>0A[0]"2ws"
>1A[1]"2ws"
>2A[2]"2ws"
>3A[3]"2ws"
>4A[4]"2ws"
>5A[5]"2ws"
>6A[6]"2ws"
>7A[7]"2ws"
>8A[8]"2ws"
>9A[9]"2ws"
Az"3ed"
>0A[0]"3ed"
>1A[1]"3ed"
>2A[2]"3ed"
>3A[3]"3ed"
>4A[4]"3ed"
>5A[5]"3ed"
>6A[6]"3ed"
>7A[7]"3ed"
>8A[8]"3ed"
>9A[9]"3ed"
Az"4rf"
>0A[0]"4rf"
>1A[1]"4rf"
>2A[2]"4rf"
>3A[3]"4rf"
>4A[4]"4rf"
>5A[5]"4rf"
>6A[6]"4rf"
>7A[7]"4rf"
>8A[8]"4rf"
>9A[9]"4rf"
Az"5tg"
>0A[0]"5tg"
>1A[1]"5tg"
>2A[2]"5tg"
>3A[3]"5tg"
>4A[4]"5tg"
>5A[5]"5tg"
>6A[6]"5tg"
>7A[7]"5tg"
>8A[8]"5tg"
>9A[9]"5tg"
Az"6yh"
>0A[0]"6yh"
>1A[1]"6yh"
>2A[2]"6yh"
>3A[3]"6yh"
>4A[4]"6yh"
>5A[5]"6yh"
>6A[6]"6yh"
>7A[7]"6yh"
>8A[8]"6yh"
>9A[9]"6yh"
Az"7uj"
>0A[0]"7uj"
>1A[1]"7uj"
>2A[2]"7uj"
>3A[3]"7uj"
>4A[4]"7uj"
>5A[5]"7uj"
>6A[6]"7uj"
>7A[7]"7uj"
>8A[8]"7uj"
>9A[9]"7uj"
Az"8ik"
>0A[0]"8ik"
>1A[1]"8ik"
>2A[2]"8ik"
>3A[3]"8ik"
>4A[4]"8ik"
>5A[5]"8ik"
>6A[6]"8ik"
>7A[7]"8ik"
>8A[8]"8ik"
>9A[9]"8ik"
Az"9ol"
>0A[0]"9ol"
>1A[1]"9ol"
>2A[2]"9ol"
>3A[3]"9ol"
>4A[4]"9ol"
>5A[5]"9ol"
>6A[6]"9ol"
>7A[7]"9ol"
>8A[8]"9ol"
>9A[9]"9ol"
Az"0p;"
>0A[0]"0p;"
>1A[1]"0p;"
>2A[2]"0p;"
>3A[3]"0p;"
>4A[4]"0p;"
>5A[5]"0p;"
>6A[6]"0p;"
>7A[7]"0p;"
>8A[8]"0p;"
>9A[9]"0p;"
Az"-@:"
>0A[0]"-@:"
>1A[1]"-@:"
>2A[2]"-@:"
>3A[3]"-@:"
>4A[4]"-@:"
>5A[5]"-@:"
>6A[6]"-@:"
>7A[7]"-@:"
>8A[8]"-@:"
>9A[9]"-@:"
Az"zaq1"
>0A[0]"zaq1"
>1A[1]"zaq1"
>2A[2]"zaq1"
>3A[3]"zaq1"
>4A[4]"zaq1"
>5A[5]"zaq1"
>6A[6]"zaq1"
>7A[7]"zaq1"
>8A[8]"zaq1"
>9A[9]"zaq1"
Az"xsw2"
>0A[0]"xsw2"
>1A[1]"xsw2"
>2A[2]"xsw2"
>3A[3]"xsw2"
>4A[4]"xsw2"
>5A[5]"xsw2"
>6A[6]"xsw2"
>7A[7]"xsw2"
>8A[8]"xsw2"
>9A[9]"xsw2"
Az"cde3"
>0A[0]"cde3"
>1A[1]"cde3"
>2A[2]"cde3"
>3A[3]"cde3"
>4A[4]"cde3"
>5A[5]"cde3"
>6A[6]"cde3"
>7A[7]"cde3"
>8A[8]"cde3"
>9A[9]"cde3"
Az"vfr4"
>0A[0]"vfr4"
>1A[1]"vfr4"
>2A[2]"vfr4"
>3A[3]"vfr4"
>4A[4]"vfr4"
>5A[5]"vfr4"
>6A[6]"vfr4"
>7A[7]"vfr4"
>8A[8]"vfr4"
>9A[9]"vfr4"
Az"bgt5"
>0A[0]"bgt5"
>1A[1]"bgt5"
>2A[2]"bgt5"
>3A[3]"bgt5"
>4A[4]"bgt5"
>5A[5]"bgt5"
>6A[6]"bgt5"
>7A[7]"bgt5"
>8A[8]"bgt5"
>9A[9]"bgt5"
Az"nhy6"
>0A[0]"nhy6"
>1A[1]"nhy6"
>2A[2]"nhy6"
>3A[3]"nhy6"
>4A[4]"nhy6"
>5A[5]"nhy6"
>6A[6]"nhy6"
>7A[7]"nhy6"
>8A[8]"nhy6"
>9A[9]"nhy6"
Az"mju7"
>0A[0]"mju7"
>1A[1]"mju7"
>2A[2]"mju7"
>3A[3]"mju7"
>4A[4]"mju7"
>5A[5]"mju7"
>6A[6]"mju7"
>7A[7]"mju7"
>8A[8]"mju7"
>9A[9]"mju7"
Az",ki8"
>0A[0]",ki8"
>1A[1]",ki8"
>2A[2]",ki8"
>3A[3]",ki8"
>4A[4]",ki8"
>5A[5]",ki8"
>6A[6]",ki8"
>7A[7]",ki8"
>8A[8]",ki8"
>9A[9]",ki8"
Az".lo9"
>0A[0]".lo9"
>1A[1]".lo9"
>2A[2]".lo9"
>3A[3]".lo9"
>4A[4]".lo9"
>5A[5]".lo9"
>6A[6]".lo9"
>7A[7]".lo9"
>8A[8]".lo9"
>9A[9]".lo9"
Az"/;p0"
>0A[0]"/;p0"
>1A[1]"/;p0"
>2A[2]"/;p0"
>3A[3]"/;p0"
>4A[4]"/;p0"
>5A[5]"/;p0"
>6A[6]"/;p0"
>7A[7]"/;p0"
>8A[8]"/;p0"
>9A[9]"/;p0"
Az"\:@-"
>0A[0]"\:@-"
>1A[1]"\:@-"
>2A[2]"\:@-"
>3A[3]"\:@-"
>4A[4]"\:@-"
>5A[5]"\:@-"
>6A[6]"\:@-"
>7A[7]"\:@-"
>8A[8]"\:@-"
>9A[9]"\:@-"
Az"zaq"
>0A[0]"zaq"
>1A[1]"zaq"
>2A[2]"zaq"
>3A[3]"zaq"
>4A[4]"zaq"
>5A[5]"zaq"
>6A[6]"zaq"
>7A[7]"zaq"
>8A[8]"zaq"
>9A[9]"zaq"
Az"xsw"
>0A[0]"xsw"
>1A[1]"xsw"
>2A[2]"xsw"
>3A[3]"xsw"
>4A[4]"xsw"
>5A[5]"xsw"
>6A[6]"xsw"
>7A[7]"xsw"
>8A[8]"xsw"
>9A[9]"xsw"
Az"cde"
>0A[0]"cde"
>1A[1]"cde"
>2A[2]"cde"
>3A[3]"cde"
>4A[4]"cde"
>5A[5]"cde"
>6A[6]"cde"
>7A[7]"cde"
>8A[8]"cde"
>9A[9]"cde"
Az"vfr"
>0A[0]"vfr"
>1A[1]"vfr"
>2A[2]"vfr"
>3A[3]"vfr"
>4A[4]"vfr"
>5A[5]"vfr"
>6A[6]"vfr"
>7A[7]"vfr"
>8A[8]"vfr"
>9A[9]"vfr"
Az"bgt"
>0A[0]"bgt"
>1A[1]"bgt"
>2A[2]"bgt"
>3A[3]"bgt"
>4A[4]"bgt"
>5A[5]"bgt"
>6A[6]"bgt"
>7A[7]"bgt"
>8A[8]"bgt"
>9A[9]"bgt"
Az"nhy"
>0A[0]"nhy"
>1A[1]"nhy"
>2A[2]"nhy"
>3A[3]"nhy"
>4A[4]"nhy"
>5A[5]"nhy"
>6A[6]"nhy"
>7A[7]"nhy"
>8A[8]"nhy"
>9A[9]"nhy"
Az"mju"
>0A[0]"mju"
>1A[1]"mju"
>2A[2]"mju"
>3A[3]"mju"
>4A[4]"mju"
>5A[5]"mju"
>6A[6]"mju"
>7A[7]"mju"
>8A[8]"mju"
>9A[9]"mju"
Az",ki"
>0A[0]",ki"
>1A[1]",ki"
>2A[2]",ki"
>3A[3]",ki"
>4A[4]",ki"
>5A[5]",ki"
>6A[6]",ki"
>7A[7]",ki"
>8A[8]",ki"
>9A[9]",ki"
Az".lo"
>0A[0]".lo"
>1A[1]".lo"
>2A[2]".lo"
>3A[3]".lo"
>4A[4]".lo"
>5A[5]".lo"
>6A[6]".lo"
>7A[7]".lo"
>8A[8]".lo"
>9A[9]".lo"
Az"/;p"
>0A[0]"/;p"
>1A[1]"/;p"
>2A[2]"/;p"
>3A[3]"/;p"
>4A[4]"/;p"
>5A[5]"/;p"
>6A[6]"/;p"
>7A[7]"/;p"
>8A[8]"/;p"
>9A[9]"/;p"
Az"\:@"
>0A[0]"\:@"
>1A[1]"\:@"
>2A[2]"\:@"
>3A[3]"\:@"
>4A[4]"\:@"
>5A[5]"\:@"
>6A[6]"\:@"
>7A[7]"\:@"
>8A[8]"\:@"
>9A[9]"\:@"
Az"12wq"
>0A[0]"12wq"
>1A[1]"12wq"
>2A[2]"12wq"
>3A[3]"12wq"
>4A[4]"12wq"
>5A[5]"12wq"
>6A[6]"12wq"
>7A[7]"12wq"
>8A[8]"12wq"
>9A[9]"12wq"
Az"23ew"
>0A[0]"23ew"
>1A[1]"23ew"
>2A[2]"23ew"
>3A[3]"23ew"
>4A[4]"23ew"
>5A[5]"23ew"
>6A[6]"23ew"
>7A[7]"23ew"
>8A[8]"23ew"
>9A[9]"23ew"
Az"34re"
>0A[0]"34re"
>1A[1]"34re"
>2A[2]"34re"
>3A[3]"34re"
>4A[4]"34re"
>5A[5]"34re"
>6A[6]"34re"
>7A[7]"34re"
>8A[8]"34re"
>9A[9]"34re"
Az"45tr"
>0A[0]"45tr"
>1A[1]"45tr"
>2A[2]"45tr"
>3A[3]"45tr"
>4A[4]"45tr"
>5A[5]"45tr"
>6A[6]"45tr"
>7A[7]"45tr"
>8A[8]"45tr"
>9A[9]"45tr"
Az"56yt"
>0A[0]"56yt"
>1A[1]"56yt"
>2A[2]"56yt"
>3A[3]"56yt"
>4A[4]"56yt"
>5A[5]"56yt"
>6A[6]"56yt"
>7A[7]"56yt"
>8A[8]"56yt"
>9A[9]"56yt"
Az"67uy"
>0A[0]"67uy"
>1A[1]"67uy"
>2A[2]"67uy"
>3A[3]"67uy"
>4A[4]"67uy"
>5A[5]"67uy"
>6A[6]"67uy"
>7A[7]"67uy"
>8A[8]"67uy"
>9A[9]"67uy"
Az"78iu"
>0A[0]"78iu"
>1A[1]"78iu"
>2A[2]"78iu"
>3A[3]"78iu"
>4A[4]"78iu"
>5A[5]"78iu"
>6A[6]"78iu"
>7A[7]"78iu"
>8A[8]"78iu"
>9A[9]"78iu"
Az"89oi"
>0A[0]"89oi"
>1A[1]"89oi"
>2A[2]"89oi"
>3A[3]"89oi"
>4A[4]"89oi"
>5A[5]"89oi"
>6A[6]"89oi"
>7A[7]"89oi"
>8A[8]"89oi"
>9A[9]"89oi"
Az"90po"
>0A[0]"90po"
>1A[1]"90po"
>2A[2]"90po"
>3A[3]"90po"
>4A[4]"90po"
>5A[5]"90po"
>6A[6]"90po"
>7A[7]"90po"
>8A[8]"90po"
>9A[9]"90po"
Az"0-@p"
>0A[0]"0-@p"
>1A[1]"0-@p"
>2A[2]"0-@p"
>3A[3]"0-@p"
>4A[4]"0-@p"
>5A[5]"0-@p"
>6A[6]"0-@p"
>7A[7]"0-@p"
>8A[8]"0-@p"
>9A[9]"0-@p"
Az"-^@p"
>0A[0]"-^@p"
>1A[1]"-^@p"
>2A[2]"-^@p"
>3A[3]"-^@p"
>4A[4]"-^@p"
>5A[5]"-^@p"
>6A[6]"-^@p"
>7A[7]"-^@p"
>8A[8]"-^@p"
>9A[9]"-^@p"
Az"^\[@"
>0A[0]"^\[@"
>1A[1]"^\[@"
>2A[2]"^\[@"
>3A[3]"^\[@"
>4A[4]"^\[@"
>5A[5]"^\[@"
>6A[6]"^\[@"
>7A[7]"^\[@"
>8A[8]"^\[@"
>9A[9]"^\[@"
Az"qwsa"
>0A[0]"qwsa"
>1A[1]"qwsa"
>2A[2]"qwsa"
>3A[3]"qwsa"
>4A[4]"qwsa"
>5A[5]"qwsa"
>6A[6]"qwsa"
>7A[7]"qwsa"
>8A[8]"qwsa"
>9A[9]"qwsa"
Az"weds"
>0A[0]"weds"
>1A[1]"weds"
>2A[2]"weds"
>3A[3]"weds"
>4A[4]"weds"
>5A[5]"weds"
>6A[6]"weds"
>7A[7]"weds"
>8A[8]"weds"
>9A[9]"weds"
Az"erfd"
>0A[0]"erfd"
>1A[1]"erfd"
>2A[2]"erfd"
>3A[3]"erfd"
>4A[4]"erfd"
>5A[5]"erfd"
>6A[6]"erfd"
>7A[7]"erfd"
>8A[8]"erfd"
>9A[9]"erfd"
Az"rtgf"
>0A[0]"rtgf"
>1A[1]"rtgf"
>2A[2]"rtgf"
>3A[3]"rtgf"
>4A[4]"rtgf"
>5A[5]"rtgf"
>6A[6]"rtgf"
>7A[7]"rtgf"
>8A[8]"rtgf"
>9A[9]"rtgf"
Az"tyhg"
>0A[0]"tyhg"
>1A[1]"tyhg"
>2A[2]"tyhg"
>3A[3]"tyhg"
>4A[4]"tyhg"
>5A[5]"tyhg"
>6A[6]"tyhg"
>7A[7]"tyhg"
>8A[8]"tyhg"
>9A[9]"tyhg"
Az"yujh"
>0A[0]"yujh"
>1A[1]"yujh"
>2A[2]"yujh"
>3A[3]"yujh"
>4A[4]"yujh"
>5A[5]"yujh"
>6A[6]"yujh"
>7A[7]"yujh"
>8A[8]"yujh"
>9A[9]"yujh"
Az"uikj"
>0A[0]"uikj"
>1A[1]"uikj"
>2A[2]"uikj"
>3A[3]"uikj"
>4A[4]"uikj"
>5A[5]"uikj"
>6A[6]"uikj"
>7A[7]"uikj"
>8A[8]"uikj"
>9A[9]"uikj"
Az"iolk"
>0A[0]"iolk"
>1A[1]"iolk"
>2A[2]"iolk"
>3A[3]"iolk"
>4A[4]"iolk"
>5A[5]"iolk"
>6A[6]"iolk"
>7A[7]"iolk"
>8A[8]"iolk"
>9A[9]"iolk"
Az"op;l"
>0A[0]"op;l"
>1A[1]"op;l"
>2A[2]"op;l"
>3A[3]"op;l"
>4A[4]"op;l"
>5A[5]"op;l"
>6A[6]"op;l"
>7A[7]"op;l"
>8A[8]"op;l"
>9A[9]"op;l"
Az"p@:;"
>0A[0]"p@:;"
>1A[1]"p@:;"
>2A[2]"p@:;"
>3A[3]"p@:;"
>4A[4]"p@:;"
>5A[5]"p@:;"
>6A[6]"p@:;"
>7A[7]"p@:;"
>8A[8]"p@:;"
>9A[9]"p@:;"
Az"@\[]:"
>0A[0]"@\[]:"
>1A[1]"@\[]:"
>2A[2]"@\[]:"
>3A[3]"@\[]:"
>4A[4]"@\[]:"
>5A[5]"@\[]:"
>6A[6]"@\[]:"
>7A[7]"@\[]:"
>8A[8]"@\[]:"
>9A[9]"@\[]:"
Az"asxz"
>0A[0]"asxz"
>1A[1]"asxz"
>2A[2]"asxz"
>3A[3]"asxz"
>4A[4]"asxz"
>5A[5]"asxz"
>6A[6]"asxz"
>7A[7]"asxz"
>8A[8]"asxz"
>9A[9]"asxz"
Az"sdcx"
>0A[0]"sdcx"
>1A[1]"sdcx"
>2A[2]"sdcx"
>3A[3]"sdcx"
>4A[4]"sdcx"
>5A[5]"sdcx"
>6A[6]"sdcx"
>7A[7]"sdcx"
>8A[8]"sdcx"
>9A[9]"sdcx"
Az"dfvc"
>0A[0]"dfvc"
>1A[1]"dfvc"
>2A[2]"dfvc"
>3A[3]"dfvc"
>4A[4]"dfvc"
>5A[5]"dfvc"
>6A[6]"dfvc"
>7A[7]"dfvc"
>8A[8]"dfvc"
>9A[9]"dfvc"
Az"fgbv"
>0A[0]"fgbv"
>1A[1]"fgbv"
>2A[2]"fgbv"
>3A[3]"fgbv"
>4A[4]"fgbv"
>5A[5]"fgbv"
>6A[6]"fgbv"
>7A[7]"fgbv"
>8A[8]"fgbv"
>9A[9]"fgbv"
Az"ghnb"
>0A[0]"ghnb"
>1A[1]"ghnb"
>2A[2]"ghnb"
>3A[3]"ghnb"
>4A[4]"ghnb"
>5A[5]"ghnb"
>6A[6]"ghnb"
>7A[7]"ghnb"
>8A[8]"ghnb"
>9A[9]"ghnb"
Az"hjmn"
>0A[0]"hjmn"
>1A[1]"hjmn"
>2A[2]"hjmn"
>3A[3]"hjmn"
>4A[4]"hjmn"
>5A[5]"hjmn"
>6A[6]"hjmn"
>7A[7]"hjmn"
>8A[8]"hjmn"
>9A[9]"hjmn"
Az"jk,m"
>0A[0]"jk,m"
>1A[1]"jk,m"
>2A[2]"jk,m"
>3A[3]"jk,m"
>4A[4]"jk,m"
>5A[5]"jk,m"
>6A[6]"jk,m"
>7A[7]"jk,m"
>8A[8]"jk,m"
>9A[9]"jk,m"
Az"kl.,"
>0A[0]"kl.,"
>1A[1]"kl.,"
>2A[2]"kl.,"
>3A[3]"kl.,"
>4A[4]"kl.,"
>5A[5]"kl.,"
>6A[6]"kl.,"
>7A[7]"kl.,"
>8A[8]"kl.,"
>9A[9]"kl.,"
Az"l;/."
>0A[0]"l;/."
>1A[1]"l;/."
>2A[2]"l;/."
>3A[3]"l;/."
>4A[4]"l;/."
>5A[5]"l;/."
>6A[6]"l;/."
>7A[7]"l;/."
>8A[8]"l;/."
>9A[9]"l;/."
Az";:\/"
>0A[0]";:\/"
>1A[1]";:\/"
>2A[2]";:\/"
>3A[3]";:\/"
>4A[4]";:\/"
>5A[5]";:\/"
>6A[6]";:\/"
>7A[7]";:\/"
>8A[8]";:\/"
>9A[9]";:\/"
Az":]\/"
>0A[0]":]\/"
>1A[1]":]\/"
>2A[2]":]\/"
>3A[3]":]\/"
>4A[4]":]\/"
>5A[5]":]\/"
>6A[6]":]\/"
>7A[7]":]\/"
>8A[8]":]\/"
>9A[9]":]\/"
Az"2wq1"
>0A[0]"2wq1"
>1A[1]"2wq1"
>2A[2]"2wq1"
>3A[3]"2wq1"
>4A[4]"2wq1"
>5A[5]"2wq1"
>6A[6]"2wq1"
>7A[7]"2wq1"
>8A[8]"2wq1"
>9A[9]"2wq1"
Az"3ew2"
>0A[0]"3ew2"
>1A[1]"3ew2"
>2A[2]"3ew2"
>3A[3]"3ew2"
>4A[4]"3ew2"
>5A[5]"3ew2"
>6A[6]"3ew2"
>7A[7]"3ew2"
>8A[8]"3ew2"
>9A[9]"3ew2"
Az"4re3"
>0A[0]"4re3"
>1A[1]"4re3"
>2A[2]"4re3"
>3A[3]"4re3"
>4A[4]"4re3"
>5A[5]"4re3"
>6A[6]"4re3"
>7A[7]"4re3"
>8A[8]"4re3"
>9A[9]"4re3"
Az"5tr4"
>0A[0]"5tr4"
>1A[1]"5tr4"
>2A[2]"5tr4"
>3A[3]"5tr4"
>4A[4]"5tr4"
>5A[5]"5tr4"
>6A[6]"5tr4"
>7A[7]"5tr4"
>8A[8]"5tr4"
>9A[9]"5tr4"
Az"6yt5"
>0A[0]"6yt5"
>1A[1]"6yt5"
>2A[2]"6yt5"
>3A[3]"6yt5"
>4A[4]"6yt5"
>5A[5]"6yt5"
>6A[6]"6yt5"
>7A[7]"6yt5"
>8A[8]"6yt5"
>9A[9]"6yt5"
Az"7uy6"
>0A[0]"7uy6"
>1A[1]"7uy6"
>2A[2]"7uy6"
>3A[3]"7uy6"
>4A[4]"7uy6"
>5A[5]"7uy6"
>6A[6]"7uy6"
>7A[7]"7uy6"
>8A[8]"7uy6"
>9A[9]"7uy6"
Az"8iu7"
>0A[0]"8iu7"
>1A[1]"8iu7"
>2A[2]"8iu7"
>3A[3]"8iu7"
>4A[4]"8iu7"
>5A[5]"8iu7"
>6A[6]"8iu7"
>7A[7]"8iu7"
>8A[8]"8iu7"
>9A[9]"8iu7"
Az"9oi8"
>0A[0]"9oi8"
>1A[1]"9oi8"
>2A[2]"9oi8"
>3A[3]"9oi8"
>4A[4]"9oi8"
>5A[5]"9oi8"
>6A[6]"9oi8"
>7A[7]"9oi8"
>8A[8]"9oi8"
>9A[9]"9oi8"
Az"0po9"
>0A[0]"0po9"
>1A[1]"0po9"
>2A[2]"0po9"
>3A[3]"0po9"
>4A[4]"0po9"
>5A[5]"0po9"
>6A[6]"0po9"
>7A[7]"0po9"
>8A[8]"0po9"
>9A[9]"0po9"
Az"-@p0"
>0A[0]"-@p0"
>1A[1]"-@p0"
>2A[2]"-@p0"
>3A[3]"-@p0"
>4A[4]"-@p0"
>5A[5]"-@p0"
>6A[6]"-@p0"
>7A[7]"-@p0"
>8A[8]"-@p0"
>9A[9]"-@p0"
Az"^@p-"
>0A[0]"^@p-"
>1A[1]"^@p-"
>2A[2]"^@p-"
>3A[3]"^@p-"
>4A[4]"^@p-"
>5A[5]"^@p-"
>6A[6]"^@p-"
>7A[7]"^@p-"
>8A[8]"^@p-"
>9A[9]"^@p-"
Az"\[@^"
>0A[0]"\[@^"
>1A[1]"\[@^"
>2A[2]"\[@^"
>3A[3]"\[@^"
>4A[4]"\[@^"
>5A[5]"\[@^"
>6A[6]"\[@^"
>7A[7]"\[@^"
>8A[8]"\[@^"
>9A[9]"\[@^"
Az"wsaq"
>0A[0]"wsaq"
>1A[1]"wsaq"
>2A[2]"wsaq"
>3A[3]"wsaq"
>4A[4]"wsaq"
>5A[5]"wsaq"
>6A[6]"wsaq"
>7A[7]"wsaq"
>8A[8]"wsaq"
>9A[9]"wsaq"
Az"edsw"
>0A[0]"edsw"
>1A[1]"edsw"
>2A[2]"edsw"
>3A[3]"edsw"
>4A[4]"edsw"
>5A[5]"edsw"
>6A[6]"edsw"
>7A[7]"edsw"
>8A[8]"edsw"
>9A[9]"edsw"
Az"rfde"
>0A[0]"rfde"
>1A[1]"rfde"
>2A[2]"rfde"
>3A[3]"rfde"
>4A[4]"rfde"
>5A[5]"rfde"
>6A[6]"rfde"
>7A[7]"rfde"
>8A[8]"rfde"
>9A[9]"rfde"
Az"tgfr"
>0A[0]"tgfr"
>1A[1]"tgfr"
>2A[2]"tgfr"
>3A[3]"tgfr"
>4A[4]"tgfr"
>5A[5]"tgfr"
>6A[6]"tgfr"
>7A[7]"tgfr"
>8A[8]"tgfr"
>9A[9]"tgfr"
Az"yhgt"
>0A[0]"yhgt"
>1A[1]"yhgt"
>2A[2]"yhgt"
>3A[3]"yhgt"
>4A[4]"yhgt"
>5A[5]"yhgt"
>6A[6]"yhgt"
>7A[7]"yhgt"
>8A[8]"yhgt"
>9A[9]"yhgt"
Az"ujhy"
>0A[0]"ujhy"
>1A[1]"ujhy"
>2A[2]"ujhy"
>3A[3]"ujhy"
>4A[4]"ujhy"
>5A[5]"ujhy"
>6A[6]"ujhy"
>7A[7]"ujhy"
>8A[8]"ujhy"
>9A[9]"ujhy"
Az"ikju"
>0A[0]"ikju"
>1A[1]"ikju"
>2A[2]"ikju"
>3A[3]"ikju"
>4A[4]"ikju"
>5A[5]"ikju"
>6A[6]"ikju"
>7A[7]"ikju"
>8A[8]"ikju"
>9A[9]"ikju"
Az"olki"
>0A[0]"olki"
>1A[1]"olki"
>2A[2]"olki"
>3A[3]"olki"
>4A[4]"olki"
>5A[5]"olki"
>6A[6]"olki"
>7A[7]"olki"
>8A[8]"olki"
>9A[9]"olki"
Az"p;lo"
>0A[0]"p;lo"
>1A[1]"p;lo"
>2A[2]"p;lo"
>3A[3]"p;lo"
>4A[4]"p;lo"
>5A[5]"p;lo"
>6A[6]"p;lo"
>7A[7]"p;lo"
>8A[8]"p;lo"
>9A[9]"p;lo"
Az"@:;p"
>0A[0]"@:;p"
>1A[1]"@:;p"
>2A[2]"@:;p"
>3A[3]"@:;p"
>4A[4]"@:;p"
>5A[5]"@:;p"
>6A[6]"@:;p"
>7A[7]"@:;p"
>8A[8]"@:;p"
>9A[9]"@:;p"
Az"\[]:@"
>0A[0]"\[]:@"
>1A[1]"\[]:@"
>2A[2]"\[]:@"
>3A[3]"\[]:@"
>4A[4]"\[]:@"
>5A[5]"\[]:@"
>6A[6]"\[]:@"
>7A[7]"\[]:@"
>8A[8]"\[]:@"
>9A[9]"\[]:@"
Az"sxza"
>0A[0]"sxza"
>1A[1]"sxza"
>2A[2]"sxza"
>3A[3]"sxza"
>4A[4]"sxza"
>5A[5]"sxza"
>6A[6]"sxza"
>7A[7]"sxza"
>8A[8]"sxza"
>9A[9]"sxza"
Az"dcxs"
>0A[0]"dcxs"
>1A[1]"dcxs"
>2A[2]"dcxs"
>3A[3]"dcxs"
>4A[4]"dcxs"
>5A[5]"dcxs"
>6A[6]"dcxs"
>7A[7]"dcxs"
>8A[8]"dcxs"
>9A[9]"dcxs"
Az"fvcd"
>0A[0]"fvcd"
>1A[1]"fvcd"
>2A[2]"fvcd"
>3A[3]"fvcd"
>4A[4]"fvcd"
>5A[5]"fvcd"
>6A[6]"fvcd"
>7A[7]"fvcd"
>8A[8]"fvcd"
>9A[9]"fvcd"
Az"gbvf"
>0A[0]"gbvf"
>1A[1]"gbvf"
>2A[2]"gbvf"
>3A[3]"gbvf"
>4A[4]"gbvf"
>5A[5]"gbvf"
>6A[6]"gbvf"
>7A[7]"gbvf"
>8A[8]"gbvf"
>9A[9]"gbvf"
Az"hnbg"
>0A[0]"hnbg"
>1A[1]"hnbg"
>2A[2]"hnbg"
>3A[3]"hnbg"
>4A[4]"hnbg"
>5A[5]"hnbg"
>6A[6]"hnbg"
>7A[7]"hnbg"
>8A[8]"hnbg"
>9A[9]"hnbg"
Az"jmnh"
>0A[0]"jmnh"
>1A[1]"jmnh"
>2A[2]"jmnh"
>3A[3]"jmnh"
>4A[4]"jmnh"
>5A[5]"jmnh"
>6A[6]"jmnh"
>7A[7]"jmnh"
>8A[8]"jmnh"
>9A[9]"jmnh"
Az"k,mj"
>0A[0]"k,mj"
>1A[1]"k,mj"
>2A[2]"k,mj"
>3A[3]"k,mj"
>4A[4]"k,mj"
>5A[5]"k,mj"
>6A[6]"k,mj"
>7A[7]"k,mj"
>8A[8]"k,mj"
>9A[9]"k,mj"
Az"l.,k"
>0A[0]"l.,k"
>1A[1]"l.,k"
>2A[2]"l.,k"
>3A[3]"l.,k"
>4A[4]"l.,k"
>5A[5]"l.,k"
>6A[6]"l.,k"
>7A[7]"l.,k"
>8A[8]"l.,k"
>9A[9]"l.,k"
Az";/.l"
>0A[0]";/.l"
>1A[1]";/.l"
>2A[2]";/.l"
>3A[3]";/.l"
>4A[4]";/.l"
>5A[5]";/.l"
>6A[6]";/.l"
>7A[7]";/.l"
>8A[8]";/.l"
>9A[9]";/.l"
Az":\/;"
>0A[0]":\/;"
>1A[1]":\/;"
>2A[2]":\/;"
>3A[3]":\/;"
>4A[4]":\/;"
>5A[5]":\/;"
>6A[6]":\/;"
>7A[7]":\/;"
>8A[8]":\/;"
>9A[9]":\/;"
Az"]\/:"
>0A[0]"]\/:"
>1A[1]"]\/:"
>2A[2]"]\/:"
>3A[3]"]\/:"
>4A[4]"]\/:"
>5A[5]"]\/:"
>6A[6]"]\/:"
>7A[7]"]\/:"
>8A[8]"]\/:"
>9A[9]"]\/:"
Az"wq12"
>0A[0]"wq12"
>1A[1]"wq12"
>2A[2]"wq12"
>3A[3]"wq12"
>4A[4]"wq12"
>5A[5]"wq12"
>6A[6]"wq12"
>7A[7]"wq12"
>8A[8]"wq12"
>9A[9]"wq12"
Az"ew23"
>0A[0]"ew23"
>1A[1]"ew23"
>2A[2]"ew23"
>3A[3]"ew23"
>4A[4]"ew23"
>5A[5]"ew23"
>6A[6]"ew23"
>7A[7]"ew23"
>8A[8]"ew23"
>9A[9]"ew23"
Az"re34"
>0A[0]"re34"
>1A[1]"re34"
>2A[2]"re34"
>3A[3]"re34"
>4A[4]"re34"
>5A[5]"re34"
>6A[6]"re34"
>7A[7]"re34"
>8A[8]"re34"
>9A[9]"re34"
Az"tr45"
>0A[0]"tr45"
>1A[1]"tr45"
>2A[2]"tr45"
>3A[3]"tr45"
>4A[4]"tr45"
>5A[5]"tr45"
>6A[6]"tr45"
>7A[7]"tr45"
>8A[8]"tr45"
>9A[9]"tr45"
Az"yt56"
>0A[0]"yt56"
>1A[1]"yt56"
>2A[2]"yt56"
>3A[3]"yt56"
>4A[4]"yt56"
>5A[5]"yt56"
>6A[6]"yt56"
>7A[7]"yt56"
>8A[8]"yt56"
>9A[9]"yt56"
Az"uy67"
>0A[0]"uy67"
>1A[1]"uy67"
>2A[2]"uy67"
>3A[3]"uy67"
>4A[4]"uy67"
>5A[5]"uy67"
>6A[6]"uy67"
>7A[7]"uy67"
>8A[8]"uy67"
>9A[9]"uy67"
Az"iu78"
>0A[0]"iu78"
>1A[1]"iu78"
>2A[2]"iu78"
>3A[3]"iu78"
>4A[4]"iu78"
>5A[5]"iu78"
>6A[6]"iu78"
>7A[7]"iu78"
>8A[8]"iu78"
>9A[9]"iu78"
Az"oi89"
>0A[0]"oi89"
>1A[1]"oi89"
>2A[2]"oi89"
>3A[3]"oi89"
>4A[4]"oi89"
>5A[5]"oi89"
>6A[6]"oi89"
>7A[7]"oi89"
>8A[8]"oi89"
>9A[9]"oi89"
Az"po90"
>0A[0]"po90"
>1A[1]"po90"
>2A[2]"po90"
>3A[3]"po90"
>4A[4]"po90"
>5A[5]"po90"
>6A[6]"po90"
>7A[7]"po90"
>8A[8]"po90"
>9A[9]"po90"
Az"@p0-"
>0A[0]"@p0-"
>1A[1]"@p0-"
>2A[2]"@p0-"
>3A[3]"@p0-"
>4A[4]"@p0-"
>5A[5]"@p0-"
>6A[6]"@p0-"
>7A[7]"@p0-"
>8A[8]"@p0-"
>9A[9]"@p0-"
Az"@p-^"
>0A[0]"@p-^"
>1A[1]"@p-^"
>2A[2]"@p-^"
>3A[3]"@p-^"
>4A[4]"@p-^"
>5A[5]"@p-^"
>6A[6]"@p-^"
>7A[7]"@p-^"
>8A[8]"@p-^"
>9A[9]"@p-^"
Az"\[@^\\"
>0A[0]"\[@^\\"
>1A[1]"\[@^\\"
>2A[2]"\[@^\\"
>3A[3]"\[@^\\"
>4A[4]"\[@^\\"
>5A[5]"\[@^\\"
>6A[6]"\[@^\\"
>7A[7]"\[@^\\"
>8A[8]"\[@^\\"
>9A[9]"\[@^\\"
Az"saqw"
>0A[0]"saqw"
>1A[1]"saqw"
>2A[2]"saqw"
>3A[3]"saqw"
>4A[4]"saqw"
>5A[5]"saqw"
>6A[6]"saqw"
>7A[7]"saqw"
>8A[8]"saqw"
>9A[9]"saqw"
Az"dswe"
>0A[0]"dswe"
>1A[1]"dswe"
>2A[2]"dswe"
>3A[3]"dswe"
>4A[4]"dswe"
>5A[5]"dswe"
>6A[6]"dswe"
>7A[7]"dswe"
>8A[8]"dswe"
>9A[9]"dswe"
Az"fder"
>0A[0]"fder"
>1A[1]"fder"
>2A[2]"fder"
>3A[3]"fder"
>4A[4]"fder"
>5A[5]"fder"
>6A[6]"fder"
>7A[7]"fder"
>8A[8]"fder"
>9A[9]"fder"
Az"gfrt"
>0A[0]"gfrt"
>1A[1]"gfrt"
>2A[2]"gfrt"
>3A[3]"gfrt"
>4A[4]"gfrt"
>5A[5]"gfrt"
>6A[6]"gfrt"
>7A[7]"gfrt"
>8A[8]"gfrt"
>9A[9]"gfrt"
Az"hgty"
>0A[0]"hgty"
>1A[1]"hgty"
>2A[2]"hgty"
>3A[3]"hgty"
>4A[4]"hgty"
>5A[5]"hgty"
>6A[6]"hgty"
>7A[7]"hgty"
>8A[8]"hgty"
>9A[9]"hgty"
Az"jhyu"
>0A[0]"jhyu"
>1A[1]"jhyu"
>2A[2]"jhyu"
>3A[3]"jhyu"
>4A[4]"jhyu"
>5A[5]"jhyu"
>6A[6]"jhyu"
>7A[7]"jhyu"
>8A[8]"jhyu"
>9A[9]"jhyu"
Az"kjui"
>0A[0]"kjui"
>1A[1]"kjui"
>2A[2]"kjui"
>3A[3]"kjui"
>4A[4]"kjui"
>5A[5]"kjui"
>6A[6]"kjui"
>7A[7]"kjui"
>8A[8]"kjui"
>9A[9]"kjui"
Az"lkio"
>0A[0]"lkio"
>1A[1]"lkio"
>2A[2]"lkio"
>3A[3]"lkio"
>4A[4]"lkio"
>5A[5]"lkio"
>6A[6]"lkio"
>7A[7]"lkio"
>8A[8]"lkio"
>9A[9]"lkio"
Az";lop"
>0A[0]";lop"
>1A[1]";lop"
>2A[2]";lop"
>3A[3]";lop"
>4A[4]";lop"
>5A[5]";lop"
>6A[6]";lop"
>7A[7]";lop"
>8A[8]";lop"
>9A[9]";lop"
Az":;p@"
>0A[0]":;p@"
>1A[1]":;p@"
>2A[2]":;p@"
>3A[3]":;p@"
>4A[4]":;p@"
>5A[5]":;p@"
>6A[6]":;p@"
>7A[7]":;p@"
>8A[8]":;p@"
>9A[9]":;p@"
Az"]:@["
>0A[0]"]:@["
>1A[1]"]:@["
>2A[2]"]:@["
>3A[3]"]:@["
>4A[4]"]:@["
>5A[5]"]:@["
>6A[6]"]:@["
>7A[7]"]:@["
>8A[8]"]:@["
>9A[9]"]:@["
Az"xzas"
>0A[0]"xzas"
>1A[1]"xzas"
>2A[2]"xzas"
>3A[3]"xzas"
>4A[4]"xzas"
>5A[5]"xzas"
>6A[6]"xzas"
>7A[7]"xzas"
>8A[8]"xzas"
>9A[9]"xzas"
Az"cxsd"
>0A[0]"cxsd"
>1A[1]"cxsd"
>2A[2]"cxsd"
>3A[3]"cxsd"
>4A[4]"cxsd"
>5A[5]"cxsd"
>6A[6]"cxsd"
>7A[7]"cxsd"
>8A[8]"cxsd"
>9A[9]"cxsd"
Az"vcdf"
>0A[0]"vcdf"
>1A[1]"vcdf"
>2A[2]"vcdf"
>3A[3]"vcdf"
>4A[4]"vcdf"
>5A[5]"vcdf"
>6A[6]"vcdf"
>7A[7]"vcdf"
>8A[8]"vcdf"
>9A[9]"vcdf"
Az"bvfg"
>0A[0]"bvfg"
>1A[1]"bvfg"
>2A[2]"bvfg"
>3A[3]"bvfg"
>4A[4]"bvfg"
>5A[5]"bvfg"
>6A[6]"bvfg"
>7A[7]"bvfg"
>8A[8]"bvfg"
>9A[9]"bvfg"
Az"nbgh"
>0A[0]"nbgh"
>1A[1]"nbgh"
>2A[2]"nbgh"
>3A[3]"nbgh"
>4A[4]"nbgh"
>5A[5]"nbgh"
>6A[6]"nbgh"
>7A[7]"nbgh"
>8A[8]"nbgh"
>9A[9]"nbgh"
Az"mnhj"
>0A[0]"mnhj"
>1A[1]"mnhj"
>2A[2]"mnhj"
>3A[3]"mnhj"
>4A[4]"mnhj"
>5A[5]"mnhj"
>6A[6]"mnhj"
>7A[7]"mnhj"
>8A[8]"mnhj"
>9A[9]"mnhj"
Az",mjk"
>0A[0]",mjk"
>1A[1]",mjk"
>2A[2]",mjk"
>3A[3]",mjk"
>4A[4]",mjk"
>5A[5]",mjk"
>6A[6]",mjk"
>7A[7]",mjk"
>8A[8]",mjk"
>9A[9]",mjk"
Az".,kl"
>0A[0]".,kl"
>1A[1]".,kl"
>2A[2]".,kl"
>3A[3]".,kl"
>4A[4]".,kl"
>5A[5]".,kl"
>6A[6]".,kl"
>7A[7]".,kl"
>8A[8]".,kl"
>9A[9]".,kl"
Az"/.l;"
>0A[0]"/.l;"
>1A[1]"/.l;"
>2A[2]"/.l;"
>3A[3]"/.l;"
>4A[4]"/.l;"
>5A[5]"/.l;"
>6A[6]"/.l;"
>7A[7]"/.l;"
>8A[8]"/.l;"
>9A[9]"/.l;"
Az"\/;:"
>0A[0]"\/;:"
>1A[1]"\/;:"
>2A[2]"\/;:"
>3A[3]"\/;:"
>4A[4]"\/;:"
>5A[5]"\/;:"
>6A[6]"\/;:"
>7A[7]"\/;:"
>8A[8]"\/;:"
>9A[9]"\/;:"
Az"\/:]"
>0A[0]"\/:]"
>1A[1]"\/:]"
>2A[2]"\/:]"
>3A[3]"\/:]"
>4A[4]"\/:]"
>5A[5]"\/:]"
>6A[6]"\/:]"
>7A[7]"\/:]"
>8A[8]"\/:]"
>9A[9]"\/:]"
Az"q12w"
>0A[0]"q12w"
>1A[1]"q12w"
>2A[2]"q12w"
>3A[3]"q12w"
>4A[4]"q12w"
>5A[5]"q12w"
>6A[6]"q12w"
>7A[7]"q12w"
>8A[8]"q12w"
>9A[9]"q12w"
Az"w23e"
>0A[0]"w23e"
>1A[1]"w23e"
>2A[2]"w23e"
>3A[3]"w23e"
>4A[4]"w23e"
>5A[5]"w23e"
>6A[6]"w23e"
>7A[7]"w23e"
>8A[8]"w23e"
>9A[9]"w23e"
Az"e34r"
>0A[0]"e34r"
>1A[1]"e34r"
>2A[2]"e34r"
>3A[3]"e34r"
>4A[4]"e34r"
>5A[5]"e34r"
>6A[6]"e34r"
>7A[7]"e34r"
>8A[8]"e34r"
>9A[9]"e34r"
Az"r45t"
>0A[0]"r45t"
>1A[1]"r45t"
>2A[2]"r45t"
>3A[3]"r45t"
>4A[4]"r45t"
>5A[5]"r45t"
>6A[6]"r45t"
>7A[7]"r45t"
>8A[8]"r45t"
>9A[9]"r45t"
Az"t56y"
>0A[0]"t56y"
>1A[1]"t56y"
>2A[2]"t56y"
>3A[3]"t56y"
>4A[4]"t56y"
>5A[5]"t56y"
>6A[6]"t56y"
>7A[7]"t56y"
>8A[8]"t56y"
>9A[9]"t56y"
Az"y67u"
>0A[0]"y67u"
>1A[1]"y67u"
>2A[2]"y67u"
>3A[3]"y67u"
>4A[4]"y67u"
>5A[5]"y67u"
>6A[6]"y67u"
>7A[7]"y67u"
>8A[8]"y67u"
>9A[9]"y67u"
Az"u78i"
>0A[0]"u78i"
>1A[1]"u78i"
>2A[2]"u78i"
>3A[3]"u78i"
>4A[4]"u78i"
>5A[5]"u78i"
>6A[6]"u78i"
>7A[7]"u78i"
>8A[8]"u78i"
>9A[9]"u78i"
Az"i89o"
>0A[0]"i89o"
>1A[1]"i89o"
>2A[2]"i89o"
>3A[3]"i89o"
>4A[4]"i89o"
>5A[5]"i89o"
>6A[6]"i89o"
>7A[7]"i89o"
>8A[8]"i89o"
>9A[9]"i89o"
Az"o90p"
>0A[0]"o90p"
>1A[1]"o90p"
>2A[2]"o90p"
>3A[3]"o90p"
>4A[4]"o90p"
>5A[5]"o90p"
>6A[6]"o90p"
>7A[7]"o90p"
>8A[8]"o90p"
>9A[9]"o90p"
Az"p0-@"
>0A[0]"p0-@"
>1A[1]"p0-@"
>2A[2]"p0-@"
>3A[3]"p0-@"
>4A[4]"p0-@"
>5A[5]"p0-@"
>6A[6]"p0-@"
>7A[7]"p0-@"
>8A[8]"p0-@"
>9A[9]"p0-@"
Az"p-^@"
>0A[0]"p-^@"
>1A[1]"p-^@"
>2A[2]"p-^@"
>3A[3]"p-^@"
>4A[4]"p-^@"
>5A[5]"p-^@"
>6A[6]"p-^@"
>7A[7]"p-^@"
>8A[8]"p-^@"
>9A[9]"p-^@"
Az"@^\["
>0A[0]"@^\["
>1A[1]"@^\["
>2A[2]"@^\["
>3A[3]"@^\["
>4A[4]"@^\["
>5A[5]"@^\["
>6A[6]"@^\["
>7A[7]"@^\["
>8A[8]"@^\["
>9A[9]"@^\["
Az"aqws"
>0A[0]"aqws"
>1A[1]"aqws"
>2A[2]"aqws"
>3A[3]"aqws"
>4A[4]"aqws"
>5A[5]"aqws"
>6A[6]"aqws"
>7A[7]"aqws"
>8A[8]"aqws"
>9A[9]"aqws"
Az"swed"
>0A[0]"swed"
>1A[1]"swed"
>2A[2]"swed"
>3A[3]"swed"
>4A[4]"swed"
>5A[5]"swed"
>6A[6]"swed"
>7A[7]"swed"
>8A[8]"swed"
>9A[9]"swed"
Az"derf"
>0A[0]"derf"
>1A[1]"derf"
>2A[2]"derf"
>3A[3]"derf"
>4A[4]"derf"
>5A[5]"derf"
>6A[6]"derf"
>7A[7]"derf"
>8A[8]"derf"
>9A[9]"derf"
Az"frtg"
>0A[0]"frtg"
>1A[1]"frtg"
>2A[2]"frtg"
>3A[3]"frtg"
>4A[4]"frtg"
>5A[5]"frtg"
>6A[6]"frtg"
>7A[7]"frtg"
>8A[8]"frtg"
>9A[9]"frtg"
Az"gtyh"
>0A[0]"gtyh"
>1A[1]"gtyh"
>2A[2]"gtyh"
>3A[3]"gtyh"
>4A[4]"gtyh"
>5A[5]"gtyh"
>6A[6]"gtyh"
>7A[7]"gtyh"
>8A[8]"gtyh"
>9A[9]"gtyh"
Az"hyuj"
>0A[0]"hyuj"
>1A[1]"hyuj"
>2A[2]"hyuj"
>3A[3]"hyuj"
>4A[4]"hyuj"
>5A[5]"hyuj"
>6A[6]"hyuj"
>7A[7]"hyuj"
>8A[8]"hyuj"
>9A[9]"hyuj"
Az"juik"
>0A[0]"juik"
>1A[1]"juik"
>2A[2]"juik"
>3A[3]"juik"
>4A[4]"juik"
>5A[5]"juik"
>6A[6]"juik"
>7A[7]"juik"
>8A[8]"juik"
>9A[9]"juik"
Az"kiol"
>0A[0]"kiol"
>1A[1]"kiol"
>2A[2]"kiol"
>3A[3]"kiol"
>4A[4]"kiol"
>5A[5]"kiol"
>6A[6]"kiol"
>7A[7]"kiol"
>8A[8]"kiol"
>9A[9]"kiol"
Az"lop;"
>0A[0]"lop;"
>1A[1]"lop;"
>2A[2]"lop;"
>3A[3]"lop;"
>4A[4]"lop;"
>5A[5]"lop;"
>6A[6]"lop;"
>7A[7]"lop;"
>8A[8]"lop;"
>9A[9]"lop;"
Az";p@:"
>0A[0]";p@:"
>1A[1]";p@:"
>2A[2]";p@:"
>3A[3]";p@:"
>4A[4]";p@:"
>5A[5]";p@:"
>6A[6]";p@:"
>7A[7]";p@:"
>8A[8]";p@:"
>9A[9]";p@:"
Az":@\[]"
>0A[0]":@\[]"
>1A[1]":@\[]"
>2A[2]":@\[]"
>3A[3]":@\[]"
>4A[4]":@\[]"
>5A[5]":@\[]"
>6A[6]":@\[]"
>7A[7]":@\[]"
>8A[8]":@\[]"
>9A[9]":@\[]"
Az"zasx"
>0A[0]"zasx"
>1A[1]"zasx"
>2A[2]"zasx"
>3A[3]"zasx"
>4A[4]"zasx"
>5A[5]"zasx"
>6A[6]"zasx"
>7A[7]"zasx"
>8A[8]"zasx"
>9A[9]"zasx"
Az"xsdc"
>0A[0]"xsdc"
>1A[1]"xsdc"
>2A[2]"xsdc"
>3A[3]"xsdc"
>4A[4]"xsdc"
>5A[5]"xsdc"
>6A[6]"xsdc"
>7A[7]"xsdc"
>8A[8]"xsdc"
>9A[9]"xsdc"
Az"cdfv"
>0A[0]"cdfv"
>1A[1]"cdfv"
>2A[2]"cdfv"
>3A[3]"cdfv"
>4A[4]"cdfv"
>5A[5]"cdfv"
>6A[6]"cdfv"
>7A[7]"cdfv"
>8A[8]"cdfv"
>9A[9]"cdfv"
Az"vfgb"
>0A[0]"vfgb"
>1A[1]"vfgb"
>2A[2]"vfgb"
>3A[3]"vfgb"
>4A[4]"vfgb"
>5A[5]"vfgb"
>6A[6]"vfgb"
>7A[7]"vfgb"
>8A[8]"vfgb"
>9A[9]"vfgb"
Az"bghn"
>0A[0]"bghn"
>1A[1]"bghn"
>2A[2]"bghn"
>3A[3]"bghn"
>4A[4]"bghn"
>5A[5]"bghn"
>6A[6]"bghn"
>7A[7]"bghn"
>8A[8]"bghn"
>9A[9]"bghn"
Az"nhjm"
>0A[0]"nhjm"
>1A[1]"nhjm"
>2A[2]"nhjm"
>3A[3]"nhjm"
>4A[4]"nhjm"
>5A[5]"nhjm"
>6A[6]"nhjm"
>7A[7]"nhjm"
>8A[8]"nhjm"
>9A[9]"nhjm"
Az"mjk,"
>0A[0]"mjk,"
>1A[1]"mjk,"
>2A[2]"mjk,"
>3A[3]"mjk,"
>4A[4]"mjk,"
>5A[5]"mjk,"
>6A[6]"mjk,"
>7A[7]"mjk,"
>8A[8]"mjk,"
>9A[9]"mjk,"
Az",kl."
>0A[0]",kl."
>1A[1]",kl."
>2A[2]",kl."
>3A[3]",kl."
>4A[4]",kl."
>5A[5]",kl."
>6A[6]",kl."
>7A[7]",kl."
>8A[8]",kl."
>9A[9]",kl."
Az".l;/"
>0A[0]".l;/"
>1A[1]".l;/"
>2A[2]".l;/"
>3A[3]".l;/"
>4A[4]".l;/"
>5A[5]".l;/"
>6A[6]".l;/"
>7A[7]".l;/"
>8A[8]".l;/"
>9A[9]".l;/"
Az"/;:\"
>0A[0]"/;:\"
>1A[1]"/;:\"
>2A[2]"/;:\"
>3A[3]"/;:\"
>4A[4]"/;:\"
>5A[5]"/;:\"
>6A[6]"/;:\"
>7A[7]"/;:\"
>8A[8]"/;:\"
>9A[9]"/;:\"
Az"/:]\"
>0A[0]"/:]\"
>1A[1]"/:]\"
>2A[2]"/:]\"
>3A[3]"/:]\"
>4A[4]"/:]\"
>5A[5]"/:]\"
>6A[6]"/:]\"
>7A[7]"/:]\"
>8A[8]"/:]\"
>9A[9]"/:]\"
Az"qw21"
>0A[0]"qw21"
>1A[1]"qw21"
>2A[2]"qw21"
>3A[3]"qw21"
>4A[4]"qw21"
>5A[5]"qw21"
>6A[6]"qw21"
>7A[7]"qw21"
>8A[8]"qw21"
>9A[9]"qw21"
Az"we32"
>0A[0]"we32"
>1A[1]"we32"
>2A[2]"we32"
>3A[3]"we32"
>4A[4]"we32"
>5A[5]"we32"
>6A[6]"we32"
>7A[7]"we32"
>8A[8]"we32"
>9A[9]"we32"
Az"er43"
>0A[0]"er43"
>1A[1]"er43"
>2A[2]"er43"
>3A[3]"er43"
>4A[4]"er43"
>5A[5]"er43"
>6A[6]"er43"
>7A[7]"er43"
>8A[8]"er43"
>9A[9]"er43"
Az"rt54"
>0A[0]"rt54"
>1A[1]"rt54"
>2A[2]"rt54"
>3A[3]"rt54"
>4A[4]"rt54"
>5A[5]"rt54"
>6A[6]"rt54"
>7A[7]"rt54"
>8A[8]"rt54"
>9A[9]"rt54"
Az"ty65"
>0A[0]"ty65"
>1A[1]"ty65"
>2A[2]"ty65"
>3A[3]"ty65"
>4A[4]"ty65"
>5A[5]"ty65"
>6A[6]"ty65"
>7A[7]"ty65"
>8A[8]"ty65"
>9A[9]"ty65"
Az"yu76"
>0A[0]"yu76"
>1A[1]"yu76"
>2A[2]"yu76"
>3A[3]"yu76"
>4A[4]"yu76"
>5A[5]"yu76"
>6A[6]"yu76"
>7A[7]"yu76"
>8A[8]"yu76"
>9A[9]"yu76"
Az"ui87"
>0A[0]"ui87"
>1A[1]"ui87"
>2A[2]"ui87"
>3A[3]"ui87"
>4A[4]"ui87"
>5A[5]"ui87"
>6A[6]"ui87"
>7A[7]"ui87"
>8A[8]"ui87"
>9A[9]"ui87"
Az"io98"
>0A[0]"io98"
>1A[1]"io98"
>2A[2]"io98"
>3A[3]"io98"
>4A[4]"io98"
>5A[5]"io98"
>6A[6]"io98"
>7A[7]"io98"
>8A[8]"io98"
>9A[9]"io98"
Az"op09"
>0A[0]"op09"
>1A[1]"op09"
>2A[2]"op09"
>3A[3]"op09"
>4A[4]"op09"
>5A[5]"op09"
>6A[6]"op09"
>7A[7]"op09"
>8A[8]"op09"
>9A[9]"op09"
Az"p@-0"
>0A[0]"p@-0"
>1A[1]"p@-0"
>2A[2]"p@-0"
>3A[3]"p@-0"
>4A[4]"p@-0"
>5A[5]"p@-0"
>6A[6]"p@-0"
>7A[7]"p@-0"
>8A[8]"p@-0"
>9A[9]"p@-0"
Az"p@^-"
>0A[0]"p@^-"
>1A[1]"p@^-"
>2A[2]"p@^-"
>3A[3]"p@^-"
>4A[4]"p@^-"
>5A[5]"p@^-"
>6A[6]"p@^-"
>7A[7]"p@^-"
>8A[8]"p@^-"
>9A[9]"p@^-"
Az"@\[\\^"
>0A[0]"@\[\\^"
>1A[1]"@\[\\^"
>2A[2]"@\[\\^"
>3A[3]"@\[\\^"
>4A[4]"@\[\\^"
>5A[5]"@\[\\^"
>6A[6]"@\[\\^"
>7A[7]"@\[\\^"
>8A[8]"@\[\\^"
>9A[9]"@\[\\^"
Az"aswq"
>0A[0]"aswq"
>1A[1]"aswq"
>2A[2]"aswq"
>3A[3]"aswq"
>4A[4]"aswq"
>5A[5]"aswq"
>6A[6]"aswq"
>7A[7]"aswq"
>8A[8]"aswq"
>9A[9]"aswq"
Az"sdew"
>0A[0]"sdew"
>1A[1]"sdew"
>2A[2]"sdew"
>3A[3]"sdew"
>4A[4]"sdew"
>5A[5]"sdew"
>6A[6]"sdew"
>7A[7]"sdew"
>8A[8]"sdew"
>9A[9]"sdew"
Az"dfre"
>0A[0]"dfre"
>1A[1]"dfre"
>2A[2]"dfre"
>3A[3]"dfre"
>4A[4]"dfre"
>5A[5]"dfre"
>6A[6]"dfre"
>7A[7]"dfre"
>8A[8]"dfre"
>9A[9]"dfre"
Az"fgtr"
>0A[0]"fgtr"
>1A[1]"fgtr"
>2A[2]"fgtr"
>3A[3]"fgtr"
>4A[4]"fgtr"
>5A[5]"fgtr"
>6A[6]"fgtr"
>7A[7]"fgtr"
>8A[8]"fgtr"
>9A[9]"fgtr"
Az"ghyt"
>0A[0]"ghyt"
>1A[1]"ghyt"
>2A[2]"ghyt"
>3A[3]"ghyt"
>4A[4]"ghyt"
>5A[5]"ghyt"
>6A[6]"ghyt"
>7A[7]"ghyt"
>8A[8]"ghyt"
>9A[9]"ghyt"
Az"hjuy"
>0A[0]"hjuy"
>1A[1]"hjuy"
>2A[2]"hjuy"
>3A[3]"hjuy"
>4A[4]"hjuy"
>5A[5]"hjuy"
>6A[6]"hjuy"
>7A[7]"hjuy"
>8A[8]"hjuy"
>9A[9]"hjuy"
Az"jkiu"
>0A[0]"jkiu"
>1A[1]"jkiu"
>2A[2]"jkiu"
>3A[3]"jkiu"
>4A[4]"jkiu"
>5A[5]"jkiu"
>6A[6]"jkiu"
>7A[7]"jkiu"
>8A[8]"jkiu"
>9A[9]"jkiu"
Az"kloi"
>0A[0]"kloi"
>1A[1]"kloi"
>2A[2]"kloi"
>3A[3]"kloi"
>4A[4]"kloi"
>5A[5]"kloi"
>6A[6]"kloi"
>7A[7]"kloi"
>8A[8]"kloi"
>9A[9]"kloi"
Az"l;po"
>0A[0]"l;po"
>1A[1]"l;po"
>2A[2]"l;po"
>3A[3]"l;po"
>4A[4]"l;po"
>5A[5]"l;po"
>6A[6]"l;po"
>7A[7]"l;po"
>8A[8]"l;po"
>9A[9]"l;po"
Az";:@p"
>0A[0]";:@p"
>1A[1]";:@p"
>2A[2]";:@p"
>3A[3]";:@p"
>4A[4]";:@p"
>5A[5]";:@p"
>6A[6]";:@p"
>7A[7]";:@p"
>8A[8]";:@p"
>9A[9]";:@p"
Az":]\[@"
>0A[0]":]\[@"
>1A[1]":]\[@"
>2A[2]":]\[@"
>3A[3]":]\[@"
>4A[4]":]\[@"
>5A[5]":]\[@"
>6A[6]":]\[@"
>7A[7]":]\[@"
>8A[8]":]\[@"
>9A[9]":]\[@"
Az"zxsa"
>0A[0]"zxsa"
>1A[1]"zxsa"
>2A[2]"zxsa"
>3A[3]"zxsa"
>4A[4]"zxsa"
>5A[5]"zxsa"
>6A[6]"zxsa"
>7A[7]"zxsa"
>8A[8]"zxsa"
>9A[9]"zxsa"
Az"xcds"
>0A[0]"xcds"
>1A[1]"xcds"
>2A[2]"xcds"
>3A[3]"xcds"
>4A[4]"xcds"
>5A[5]"xcds"
>6A[6]"xcds"
>7A[7]"xcds"
>8A[8]"xcds"
>9A[9]"xcds"
Az"cvfd"
>0A[0]"cvfd"
>1A[1]"cvfd"
>2A[2]"cvfd"
>3A[3]"cvfd"
>4A[4]"cvfd"
>5A[5]"cvfd"
>6A[6]"cvfd"
>7A[7]"cvfd"
>8A[8]"cvfd"
>9A[9]"cvfd"
Az"vbgf"
>0A[0]"vbgf"
>1A[1]"vbgf"
>2A[2]"vbgf"
>3A[3]"vbgf"
>4A[4]"vbgf"
>5A[5]"vbgf"
>6A[6]"vbgf"
>7A[7]"vbgf"
>8A[8]"vbgf"
>9A[9]"vbgf"
Az"bnhg"
>0A[0]"bnhg"
>1A[1]"bnhg"
>2A[2]"bnhg"
>3A[3]"bnhg"
>4A[4]"bnhg"
>5A[5]"bnhg"
>6A[6]"bnhg"
>7A[7]"bnhg"
>8A[8]"bnhg"
>9A[9]"bnhg"
Az"nmjh"
>0A[0]"nmjh"
>1A[1]"nmjh"
>2A[2]"nmjh"
>3A[3]"nmjh"
>4A[4]"nmjh"
>5A[5]"nmjh"
>6A[6]"nmjh"
>7A[7]"nmjh"
>8A[8]"nmjh"
>9A[9]"nmjh"
Az"m,kj"
>0A[0]"m,kj"
>1A[1]"m,kj"
>2A[2]"m,kj"
>3A[3]"m,kj"
>4A[4]"m,kj"
>5A[5]"m,kj"
>6A[6]"m,kj"
>7A[7]"m,kj"
>8A[8]"m,kj"
>9A[9]"m,kj"
Az",.lk"
>0A[0]",.lk"
>1A[1]",.lk"
>2A[2]",.lk"
>3A[3]",.lk"
>4A[4]",.lk"
>5A[5]",.lk"
>6A[6]",.lk"
>7A[7]",.lk"
>8A[8]",.lk"
>9A[9]",.lk"
Az"./;l"
>0A[0]"./;l"
>1A[1]"./;l"
>2A[2]"./;l"
>3A[3]"./;l"
>4A[4]"./;l"
>5A[5]"./;l"
>6A[6]"./;l"
>7A[7]"./;l"
>8A[8]"./;l"
>9A[9]"./;l"
Az"/\:;"
>0A[0]"/\:;"
>1A[1]"/\:;"
>2A[2]"/\:;"
>3A[3]"/\:;"
>4A[4]"/\:;"
>5A[5]"/\:;"
>6A[6]"/\:;"
>7A[7]"/\:;"
>8A[8]"/\:;"
>9A[9]"/\:;"
Az"/\]:"
>0A[0]"/\]:"
>1A[1]"/\]:"
>2A[2]"/\]:"
>3A[3]"/\]:"
>4A[4]"/\]:"
>5A[5]"/\]:"
>6A[6]"/\]:"
>7A[7]"/\]:"
>8A[8]"/\]:"
>9A[9]"/\]:"
Az"w21q"
>0A[0]"w21q"
>1A[1]"w21q"
>2A[2]"w21q"
>3A[3]"w21q"
>4A[4]"w21q"
>5A[5]"w21q"
>6A[6]"w21q"
>7A[7]"w21q"
>8A[8]"w21q"
>9A[9]"w21q"
Az"e32w"
>0A[0]"e32w"
>1A[1]"e32w"
>2A[2]"e32w"
>3A[3]"e32w"
>4A[4]"e32w"
>5A[5]"e32w"
>6A[6]"e32w"
>7A[7]"e32w"
>8A[8]"e32w"
>9A[9]"e32w"
Az"r43e"
>0A[0]"r43e"
>1A[1]"r43e"
>2A[2]"r43e"
>3A[3]"r43e"
>4A[4]"r43e"
>5A[5]"r43e"
>6A[6]"r43e"
>7A[7]"r43e"
>8A[8]"r43e"
>9A[9]"r43e"
Az"t54r"
>0A[0]"t54r"
>1A[1]"t54r"
>2A[2]"t54r"
>3A[3]"t54r"
>4A[4]"t54r"
>5A[5]"t54r"
>6A[6]"t54r"
>7A[7]"t54r"
>8A[8]"t54r"
>9A[9]"t54r"
Az"y65t"
>0A[0]"y65t"
>1A[1]"y65t"
>2A[2]"y65t"
>3A[3]"y65t"
>4A[4]"y65t"
>5A[5]"y65t"
>6A[6]"y65t"
>7A[7]"y65t"
>8A[8]"y65t"
>9A[9]"y65t"
Az"u76y"
>0A[0]"u76y"
>1A[1]"u76y"
>2A[2]"u76y"
>3A[3]"u76y"
>4A[4]"u76y"
>5A[5]"u76y"
>6A[6]"u76y"
>7A[7]"u76y"
>8A[8]"u76y"
>9A[9]"u76y"
Az"i87u"
>0A[0]"i87u"
>1A[1]"i87u"
>2A[2]"i87u"
>3A[3]"i87u"
>4A[4]"i87u"
>5A[5]"i87u"
>6A[6]"i87u"
>7A[7]"i87u"
>8A[8]"i87u"
>9A[9]"i87u"
Az"o98i"
>0A[0]"o98i"
>1A[1]"o98i"
>2A[2]"o98i"
>3A[3]"o98i"
>4A[4]"o98i"
>5A[5]"o98i"
>6A[6]"o98i"
>7A[7]"o98i"
>8A[8]"o98i"
>9A[9]"o98i"
Az"p09o"
>0A[0]"p09o"
>1A[1]"p09o"
>2A[2]"p09o"
>3A[3]"p09o"
>4A[4]"p09o"
>5A[5]"p09o"
>6A[6]"p09o"
>7A[7]"p09o"
>8A[8]"p09o"
>9A[9]"p09o"
Az"@-0p"
>0A[0]"@-0p"
>1A[1]"@-0p"
>2A[2]"@-0p"
>3A[3]"@-0p"
>4A[4]"@-0p"
>5A[5]"@-0p"
>6A[6]"@-0p"
>7A[7]"@-0p"
>8A[8]"@-0p"
>9A[9]"@-0p"
Az"@^-p"
>0A[0]"@^-p"
>1A[1]"@^-p"
>2A[2]"@^-p"
>3A[3]"@^-p"
>4A[4]"@^-p"
>5A[5]"@^-p"
>6A[6]"@^-p"
>7A[7]"@^-p"
>8A[8]"@^-p"
>9A[9]"@^-p"
Az"\[\^@"
>0A[0]"\[\^@"
>1A[1]"\[\^@"
>2A[2]"\[\^@"
>3A[3]"\[\^@"
>4A[4]"\[\^@"
>5A[5]"\[\^@"
>6A[6]"\[\^@"
>7A[7]"\[\^@"
>8A[8]"\[\^@"
>9A[9]"\[\^@"
Az"swqa"
>0A[0]"swqa"
>1A[1]"swqa"
>2A[2]"swqa"
>3A[3]"swqa"
>4A[4]"swqa"
>5A[5]"swqa"
>6A[6]"swqa"
>7A[7]"swqa"
>8A[8]"swqa"
>9A[9]"swqa"
Az"dews"
>0A[0]"dews"
>1A[1]"dews"
>2A[2]"dews"
>3A[3]"dews"
>4A[4]"dews"
>5A[5]"dews"
>6A[6]"dews"
>7A[7]"dews"
>8A[8]"dews"
>9A[9]"dews"
Az"fred"
>0A[0]"fred"
>1A[1]"fred"
>2A[2]"fred"
>3A[3]"fred"
>4A[4]"fred"
>5A[5]"fred"
>6A[6]"fred"
>7A[7]"fred"
>8A[8]"fred"
>9A[9]"fred"
Az"gtrf"
>0A[0]"gtrf"
>1A[1]"gtrf"
>2A[2]"gtrf"
>3A[3]"gtrf"
>4A[4]"gtrf"
>5A[5]"gtrf"
>6A[6]"gtrf"
>7A[7]"gtrf"
>8A[8]"gtrf"
>9A[9]"gtrf"
Az"hytg"
>0A[0]"hytg"
>1A[1]"hytg"
>2A[2]"hytg"
>3A[3]"hytg"
>4A[4]"hytg"
>5A[5]"hytg"
>6A[6]"hytg"
>7A[7]"hytg"
>8A[8]"hytg"
>9A[9]"hytg"
Az"juyh"
>0A[0]"juyh"
>1A[1]"juyh"
>2A[2]"juyh"
>3A[3]"juyh"
>4A[4]"juyh"
>5A[5]"juyh"
>6A[6]"juyh"
>7A[7]"juyh"
>8A[8]"juyh"
>9A[9]"juyh"
Az"kiuj"
>0A[0]"kiuj"
>1A[1]"kiuj"
>2A[2]"kiuj"
>3A[3]"kiuj"
>4A[4]"kiuj"
>5A[5]"kiuj"
>6A[6]"kiuj"
>7A[7]"kiuj"
>8A[8]"kiuj"
>9A[9]"kiuj"
Az"loik"
>0A[0]"loik"
>1A[1]"loik"
>2A[2]"loik"
>3A[3]"loik"
>4A[4]"loik"
>5A[5]"loik"
>6A[6]"loik"
>7A[7]"loik"
>8A[8]"loik"
>9A[9]"loik"
Az";pol"
>0A[0]";pol"
>1A[1]";pol"
>2A[2]";pol"
>3A[3]";pol"
>4A[4]";pol"
>5A[5]";pol"
>6A[6]";pol"
>7A[7]";pol"
>8A[8]";pol"
>9A[9]";pol"
Az":@p;"
>0A[0]":@p;"
>1A[1]":@p;"
>2A[2]":@p;"
>3A[3]":@p;"
>4A[4]":@p;"
>5A[5]":@p;"
>6A[6]":@p;"
>7A[7]":@p;"
>8A[8]":@p;"
>9A[9]":@p;"
Az"]\[@:"
>0A[0]"]\[@:"
>1A[1]"]\[@:"
>2A[2]"]\[@:"
>3A[3]"]\[@:"
>4A[4]"]\[@:"
>5A[5]"]\[@:"
>6A[6]"]\[@:"
>7A[7]"]\[@:"
>8A[8]"]\[@:"
>9A[9]"]\[@:"
Az"xsaz"
>0A[0]"xsaz"
>1A[1]"xsaz"
>2A[2]"xsaz"
>3A[3]"xsaz"
>4A[4]"xsaz"
>5A[5]"xsaz"
>6A[6]"xsaz"
>7A[7]"xsaz"
>8A[8]"xsaz"
>9A[9]"xsaz"
Az"cdsx"
>0A[0]"cdsx"
>1A[1]"cdsx"
>2A[2]"cdsx"
>3A[3]"cdsx"
>4A[4]"cdsx"
>5A[5]"cdsx"
>6A[6]"cdsx"
>7A[7]"cdsx"
>8A[8]"cdsx"
>9A[9]"cdsx"
Az"vfdc"
>0A[0]"vfdc"
>1A[1]"vfdc"
>2A[2]"vfdc"
>3A[3]"vfdc"
>4A[4]"vfdc"
>5A[5]"vfdc"
>6A[6]"vfdc"
>7A[7]"vfdc"
>8A[8]"vfdc"
>9A[9]"vfdc"
Az"bgfv"
>0A[0]"bgfv"
>1A[1]"bgfv"
>2A[2]"bgfv"
>3A[3]"bgfv"
>4A[4]"bgfv"
>5A[5]"bgfv"
>6A[6]"bgfv"
>7A[7]"bgfv"
>8A[8]"bgfv"
>9A[9]"bgfv"
Az"nhgb"
>0A[0]"nhgb"
>1A[1]"nhgb"
>2A[2]"nhgb"
>3A[3]"nhgb"
>4A[4]"nhgb"
>5A[5]"nhgb"
>6A[6]"nhgb"
>7A[7]"nhgb"
>8A[8]"nhgb"
>9A[9]"nhgb"
Az"mjhn"
>0A[0]"mjhn"
>1A[1]"mjhn"
>2A[2]"mjhn"
>3A[3]"mjhn"
>4A[4]"mjhn"
>5A[5]"mjhn"
>6A[6]"mjhn"
>7A[7]"mjhn"
>8A[8]"mjhn"
>9A[9]"mjhn"
Az",kjm"
>0A[0]",kjm"
>1A[1]",kjm"
>2A[2]",kjm"
>3A[3]",kjm"
>4A[4]",kjm"
>5A[5]",kjm"
>6A[6]",kjm"
>7A[7]",kjm"
>8A[8]",kjm"
>9A[9]",kjm"
Az".lk,"
>0A[0]".lk,"
>1A[1]".lk,"
>2A[2]".lk,"
>3A[3]".lk,"
>4A[4]".lk,"
>5A[5]".lk,"
>6A[6]".lk,"
>7A[7]".lk,"
>8A[8]".lk,"
>9A[9]".lk,"
Az"/;l."
>0A[0]"/;l."
>1A[1]"/;l."
>2A[2]"/;l."
>3A[3]"/;l."
>4A[4]"/;l."
>5A[5]"/;l."
>6A[6]"/;l."
>7A[7]"/;l."
>8A[8]"/;l."
>9A[9]"/;l."
Az"\:;/"
>0A[0]"\:;/"
>1A[1]"\:;/"
>2A[2]"\:;/"
>3A[3]"\:;/"
>4A[4]"\:;/"
>5A[5]"\:;/"
>6A[6]"\:;/"
>7A[7]"\:;/"
>8A[8]"\:;/"
>9A[9]"\:;/"
Az"\]:/"
>0A[0]"\]:/"
>1A[1]"\]:/"
>2A[2]"\]:/"
>3A[3]"\]:/"
>4A[4]"\]:/"
>5A[5]"\]:/"
>6A[6]"\]:/"
>7A[7]"\]:/"
>8A[8]"\]:/"
>9A[9]"\]:/"
Az"21qw"
>0A[0]"21qw"
>1A[1]"21qw"
>2A[2]"21qw"
>3A[3]"21qw"
>4A[4]"21qw"
>5A[5]"21qw"
>6A[6]"21qw"
>7A[7]"21qw"
>8A[8]"21qw"
>9A[9]"21qw"
Az"32we"
>0A[0]"32we"
>1A[1]"32we"
>2A[2]"32we"
>3A[3]"32we"
>4A[4]"32we"
>5A[5]"32we"
>6A[6]"32we"
>7A[7]"32we"
>8A[8]"32we"
>9A[9]"32we"
Az"43er"
>0A[0]"43er"
>1A[1]"43er"
>2A[2]"43er"
>3A[3]"43er"
>4A[4]"43er"
>5A[5]"43er"
>6A[6]"43er"
>7A[7]"43er"
>8A[8]"43er"
>9A[9]"43er"
Az"54rt"
>0A[0]"54rt"
>1A[1]"54rt"
>2A[2]"54rt"
>3A[3]"54rt"
>4A[4]"54rt"
>5A[5]"54rt"
>6A[6]"54rt"
>7A[7]"54rt"
>8A[8]"54rt"
>9A[9]"54rt"
Az"65ty"
>0A[0]"65ty"
>1A[1]"65ty"
>2A[2]"65ty"
>3A[3]"65ty"
>4A[4]"65ty"
>5A[5]"65ty"
>6A[6]"65ty"
>7A[7]"65ty"
>8A[8]"65ty"
>9A[9]"65ty"
Az"76yu"
>0A[0]"76yu"
>1A[1]"76yu"
>2A[2]"76yu"
>3A[3]"76yu"
>4A[4]"76yu"
>5A[5]"76yu"
>6A[6]"76yu"
>7A[7]"76yu"
>8A[8]"76yu"
>9A[9]"76yu"
Az"87ui"
>0A[0]"87ui"
>1A[1]"87ui"
>2A[2]"87ui"
>3A[3]"87ui"
>4A[4]"87ui"
>5A[5]"87ui"
>6A[6]"87ui"
>7A[7]"87ui"
>8A[8]"87ui"
>9A[9]"87ui"
Az"98io"
>0A[0]"98io"
>1A[1]"98io"
>2A[2]"98io"
>3A[3]"98io"
>4A[4]"98io"
>5A[5]"98io"
>6A[6]"98io"
>7A[7]"98io"
>8A[8]"98io"
>9A[9]"98io"
Az"09op"
>0A[0]"09op"
>1A[1]"09op"
>2A[2]"09op"
>3A[3]"09op"
>4A[4]"09op"
>5A[5]"09op"
>6A[6]"09op"
>7A[7]"09op"
>8A[8]"09op"
>9A[9]"09op"
Az"-0p@"
>0A[0]"-0p@"
>1A[1]"-0p@"
>2A[2]"-0p@"
>3A[3]"-0p@"
>4A[4]"-0p@"
>5A[5]"-0p@"
>6A[6]"-0p@"
>7A[7]"-0p@"
>8A[8]"-0p@"
>9A[9]"-0p@"
Az"^-p@"
>0A[0]"^-p@"
>1A[1]"^-p@"
>2A[2]"^-p@"
>3A[3]"^-p@"
>4A[4]"^-p@"
>5A[5]"^-p@"
>6A[6]"^-p@"
>7A[7]"^-p@"
>8A[8]"^-p@"
>9A[9]"^-p@"
Az"\^@["
>0A[0]"\^@["
>1A[1]"\^@["
>2A[2]"\^@["
>3A[3]"\^@["
>4A[4]"\^@["
>5A[5]"\^@["
>6A[6]"\^@["
>7A[7]"\^@["
>8A[8]"\^@["
>9A[9]"\^@["
Az"wqas"
>0A[0]"wqas"
>1A[1]"wqas"
>2A[2]"wqas"
>3A[3]"wqas"
>4A[4]"wqas"
>5A[5]"wqas"
>6A[6]"wqas"
>7A[7]"wqas"
>8A[8]"wqas"
>9A[9]"wqas"
Az"ewsd"
>0A[0]"ewsd"
>1A[1]"ewsd"
>2A[2]"ewsd"
>3A[3]"ewsd"
>4A[4]"ewsd"
>5A[5]"ewsd"
>6A[6]"ewsd"
>7A[7]"ewsd"
>8A[8]"ewsd"
>9A[9]"ewsd"
Az"redf"
>0A[0]"redf"
>1A[1]"redf"
>2A[2]"redf"
>3A[3]"redf"
>4A[4]"redf"
>5A[5]"redf"
>6A[6]"redf"
>7A[7]"redf"
>8A[8]"redf"
>9A[9]"redf"
Az"trfg"
>0A[0]"trfg"
>1A[1]"trfg"
>2A[2]"trfg"
>3A[3]"trfg"
>4A[4]"trfg"
>5A[5]"trfg"
>6A[6]"trfg"
>7A[7]"trfg"
>8A[8]"trfg"
>9A[9]"trfg"
Az"ytgh"
>0A[0]"ytgh"
>1A[1]"ytgh"
>2A[2]"ytgh"
>3A[3]"ytgh"
>4A[4]"ytgh"
>5A[5]"ytgh"
>6A[6]"ytgh"
>7A[7]"ytgh"
>8A[8]"ytgh"
>9A[9]"ytgh"
Az"uyhj"
>0A[0]"uyhj"
>1A[1]"uyhj"
>2A[2]"uyhj"
>3A[3]"uyhj"
>4A[4]"uyhj"
>5A[5]"uyhj"
>6A[6]"uyhj"
>7A[7]"uyhj"
>8A[8]"uyhj"
>9A[9]"uyhj"
Az"iujk"
>0A[0]"iujk"
>1A[1]"iujk"
>2A[2]"iujk"
>3A[3]"iujk"
>4A[4]"iujk"
>5A[5]"iujk"
>6A[6]"iujk"
>7A[7]"iujk"
>8A[8]"iujk"
>9A[9]"iujk"
Az"oikl"
>0A[0]"oikl"
>1A[1]"oikl"
>2A[2]"oikl"
>3A[3]"oikl"
>4A[4]"oikl"
>5A[5]"oikl"
>6A[6]"oikl"
>7A[7]"oikl"
>8A[8]"oikl"
>9A[9]"oikl"
Az"pol;"
>0A[0]"pol;"
>1A[1]"pol;"
>2A[2]"pol;"
>3A[3]"pol;"
>4A[4]"pol;"
>5A[5]"pol;"
>6A[6]"pol;"
>7A[7]"pol;"
>8A[8]"pol;"
>9A[9]"pol;"
Az"@p;:"
>0A[0]"@p;:"
>1A[1]"@p;:"
>2A[2]"@p;:"
>3A[3]"@p;:"
>4A[4]"@p;:"
>5A[5]"@p;:"
>6A[6]"@p;:"
>7A[7]"@p;:"
>8A[8]"@p;:"
>9A[9]"@p;:"
Az"[@:]"
>0A[0]"[@:]"
>1A[1]"[@:]"
>2A[2]"[@:]"
>3A[3]"[@:]"
>4A[4]"[@:]"
>5A[5]"[@:]"
>6A[6]"[@:]"
>7A[7]"[@:]"
>8A[8]"[@:]"
>9A[9]"[@:]"
Az"sazx"
>0A[0]"sazx"
>1A[1]"sazx"
>2A[2]"sazx"
>3A[3]"sazx"
>4A[4]"sazx"
>5A[5]"sazx"
>6A[6]"sazx"
>7A[7]"sazx"
>8A[8]"sazx"
>9A[9]"sazx"
Az"dsxc"
>0A[0]"dsxc"
>1A[1]"dsxc"
>2A[2]"dsxc"
>3A[3]"dsxc"
>4A[4]"dsxc"
>5A[5]"dsxc"
>6A[6]"dsxc"
>7A[7]"dsxc"
>8A[8]"dsxc"
>9A[9]"dsxc"
Az"fdcv"
>0A[0]"fdcv"
>1A[1]"fdcv"
>2A[2]"fdcv"
>3A[3]"fdcv"
>4A[4]"fdcv"
>5A[5]"fdcv"
>6A[6]"fdcv"
>7A[7]"fdcv"
>8A[8]"fdcv"
>9A[9]"fdcv"
Az"gfvb"
>0A[0]"gfvb"
>1A[1]"gfvb"
>2A[2]"gfvb"
>3A[3]"gfvb"
>4A[4]"gfvb"
>5A[5]"gfvb"
>6A[6]"gfvb"
>7A[7]"gfvb"
>8A[8]"gfvb"
>9A[9]"gfvb"
Az"hgbn"
>0A[0]"hgbn"
>1A[1]"hgbn"
>2A[2]"hgbn"
>3A[3]"hgbn"
>4A[4]"hgbn"
>5A[5]"hgbn"
>6A[6]"hgbn"
>7A[7]"hgbn"
>8A[8]"hgbn"
>9A[9]"hgbn"
Az"jhnm"
>0A[0]"jhnm"
>1A[1]"jhnm"
>2A[2]"jhnm"
>3A[3]"jhnm"
>4A[4]"jhnm"
>5A[5]"jhnm"
>6A[6]"jhnm"
>7A[7]"jhnm"
>8A[8]"jhnm"
>9A[9]"jhnm"
Az"kjm,"
>0A[0]"kjm,"
>1A[1]"kjm,"
>2A[2]"kjm,"
>3A[3]"kjm,"
>4A[4]"kjm,"
>5A[5]"kjm,"
>6A[6]"kjm,"
>7A[7]"kjm,"
>8A[8]"kjm,"
>9A[9]"kjm,"
Az"lk,."
>0A[0]"lk,."
>1A[1]"lk,."
>2A[2]"lk,."
>3A[3]"lk,."
>4A[4]"lk,."
>5A[5]"lk,."
>6A[6]"lk,."
>7A[7]"lk,."
>8A[8]"lk,."
>9A[9]"lk,."
Az";l./"
>0A[0]";l./"
>1A[1]";l./"
>2A[2]";l./"
>3A[3]";l./"
>4A[4]";l./"
>5A[5]";l./"
>6A[6]";l./"
>7A[7]";l./"
>8A[8]";l./"
>9A[9]";l./"
Az":;/\"
>0A[0]":;/\"
>1A[1]":;/\"
>2A[2]":;/\"
>3A[3]":;/\"
>4A[4]":;/\"
>5A[5]":;/\"
>6A[6]":;/\"
>7A[7]":;/\"
>8A[8]":;/\"
>9A[9]":;/\"
Az"]:/\"
>0A[0]"]:/\"
>1A[1]"]:/\"
>2A[2]"]:/\"
>3A[3]"]:/\"
>4A[4]"]:/\"
>5A[5]"]:/\"
>6A[6]"]:/\"
>7A[7]"]:/\"
>8A[8]"]:/\"
>9A[9]"]:/\"
Az"1qw2"
>0A[0]"1qw2"
>1A[1]"1qw2"
>2A[2]"1qw2"
>3A[3]"1qw2"
>4A[4]"1qw2"
>5A[5]"1qw2"
>6A[6]"1qw2"
>7A[7]"1qw2"
>8A[8]"1qw2"
>9A[9]"1qw2"
Az"2we3"
>0A[0]"2we3"
>1A[1]"2we3"
>2A[2]"2we3"
>3A[3]"2we3"
>4A[4]"2we3"
>5A[5]"2we3"
>6A[6]"2we3"
>7A[7]"2we3"
>8A[8]"2we3"
>9A[9]"2we3"
Az"3er4"
>0A[0]"3er4"
>1A[1]"3er4"
>2A[2]"3er4"
>3A[3]"3er4"
>4A[4]"3er4"
>5A[5]"3er4"
>6A[6]"3er4"
>7A[7]"3er4"
>8A[8]"3er4"
>9A[9]"3er4"
Az"4rt5"
>0A[0]"4rt5"
>1A[1]"4rt5"
>2A[2]"4rt5"
>3A[3]"4rt5"
>4A[4]"4rt5"
>5A[5]"4rt5"
>6A[6]"4rt5"
>7A[7]"4rt5"
>8A[8]"4rt5"
>9A[9]"4rt5"
Az"5ty6"
>0A[0]"5ty6"
>1A[1]"5ty6"
>2A[2]"5ty6"
>3A[3]"5ty6"
>4A[4]"5ty6"
>5A[5]"5ty6"
>6A[6]"5ty6"
>7A[7]"5ty6"
>8A[8]"5ty6"
>9A[9]"5ty6"
Az"6yu7"
>0A[0]"6yu7"
>1A[1]"6yu7"
>2A[2]"6yu7"
>3A[3]"6yu7"
>4A[4]"6yu7"
>5A[5]"6yu7"
>6A[6]"6yu7"
>7A[7]"6yu7"
>8A[8]"6yu7"
>9A[9]"6yu7"
Az"7ui8"
>0A[0]"7ui8"
>1A[1]"7ui8"
>2A[2]"7ui8"
>3A[3]"7ui8"
>4A[4]"7ui8"
>5A[5]"7ui8"
>6A[6]"7ui8"
>7A[7]"7ui8"
>8A[8]"7ui8"
>9A[9]"7ui8"
Az"8io9"
>0A[0]"8io9"
>1A[1]"8io9"
>2A[2]"8io9"
>3A[3]"8io9"
>4A[4]"8io9"
>5A[5]"8io9"
>6A[6]"8io9"
>7A[7]"8io9"
>8A[8]"8io9"
>9A[9]"8io9"
Az"9op0"
>0A[0]"9op0"
>1A[1]"9op0"
>2A[2]"9op0"
>3A[3]"9op0"
>4A[4]"9op0"
>5A[5]"9op0"
>6A[6]"9op0"
>7A[7]"9op0"
>8A[8]"9op0"
>9A[9]"9op0"
Az"0p@-"
>0A[0]"0p@-"
>1A[1]"0p@-"
>2A[2]"0p@-"
>3A[3]"0p@-"
>4A[4]"0p@-"
>5A[5]"0p@-"
>6A[6]"0p@-"
>7A[7]"0p@-"
>8A[8]"0p@-"
>9A[9]"0p@-"
Az"-p@^"
>0A[0]"-p@^"
>1A[1]"-p@^"
>2A[2]"-p@^"
>3A[3]"-p@^"
>4A[4]"-p@^"
>5A[5]"-p@^"
>6A[6]"-p@^"
>7A[7]"-p@^"
>8A[8]"-p@^"
>9A[9]"-p@^"
Az"^@[\"
>0A[0]"^@[\"
>1A[1]"^@[\"
>2A[2]"^@[\"
>3A[3]"^@[\"
>4A[4]"^@[\"
>5A[5]"^@[\"
>6A[6]"^@[\"
>7A[7]"^@[\"
>8A[8]"^@[\"
>9A[9]"^@[\"
Az"qasw"
>0A[0]"qasw"
>1A[1]"qasw"
>2A[2]"qasw"
>3A[3]"qasw"
>4A[4]"qasw"
>5A[5]"qasw"
>6A[6]"qasw"
>7A[7]"qasw"
>8A[8]"qasw"
>9A[9]"qasw"
Az"wsde"
>0A[0]"wsde"
>1A[1]"wsde"
>2A[2]"wsde"
>3A[3]"wsde"
>4A[4]"wsde"
>5A[5]"wsde"
>6A[6]"wsde"
>7A[7]"wsde"
>8A[8]"wsde"
>9A[9]"wsde"
Az"edfr"
>0A[0]"edfr"
>1A[1]"edfr"
>2A[2]"edfr"
>3A[3]"edfr"
>4A[4]"edfr"
>5A[5]"edfr"
>6A[6]"edfr"
>7A[7]"edfr"
>8A[8]"edfr"
>9A[9]"edfr"
Az"rfgt"
>0A[0]"rfgt"
>1A[1]"rfgt"
>2A[2]"rfgt"
>3A[3]"rfgt"
>4A[4]"rfgt"
>5A[5]"rfgt"
>6A[6]"rfgt"
>7A[7]"rfgt"
>8A[8]"rfgt"
>9A[9]"rfgt"
Az"tghy"
>0A[0]"tghy"
>1A[1]"tghy"
>2A[2]"tghy"
>3A[3]"tghy"
>4A[4]"tghy"
>5A[5]"tghy"
>6A[6]"tghy"
>7A[7]"tghy"
>8A[8]"tghy"
>9A[9]"tghy"
Az"yhju"
>0A[0]"yhju"
>1A[1]"yhju"
>2A[2]"yhju"
>3A[3]"yhju"
>4A[4]"yhju"
>5A[5]"yhju"
>6A[6]"yhju"
>7A[7]"yhju"
>8A[8]"yhju"
>9A[9]"yhju"
Az"ujki"
>0A[0]"ujki"
>1A[1]"ujki"
>2A[2]"ujki"
>3A[3]"ujki"
>4A[4]"ujki"
>5A[5]"ujki"
>6A[6]"ujki"
>7A[7]"ujki"
>8A[8]"ujki"
>9A[9]"ujki"
Az"iklo"
>0A[0]"iklo"
>1A[1]"iklo"
>2A[2]"iklo"
>3A[3]"iklo"
>4A[4]"iklo"
>5A[5]"iklo"
>6A[6]"iklo"
>7A[7]"iklo"
>8A[8]"iklo"
>9A[9]"iklo"
Az"ol;p"
>0A[0]"ol;p"
>1A[1]"ol;p"
>2A[2]"ol;p"
>3A[3]"ol;p"
>4A[4]"ol;p"
>5A[5]"ol;p"
>6A[6]"ol;p"
>7A[7]"ol;p"
>8A[8]"ol;p"
>9A[9]"ol;p"
Az"p;:@"
>0A[0]"p;:@"
>1A[1]"p;:@"
>2A[2]"p;:@"
>3A[3]"p;:@"
>4A[4]"p;:@"
>5A[5]"p;:@"
>6A[6]"p;:@"
>7A[7]"p;:@"
>8A[8]"p;:@"
>9A[9]"p;:@"
Az"@:]["
>0A[0]"@:]["
>1A[1]"@:]["
>2A[2]"@:]["
>3A[3]"@:]["
>4A[4]"@:]["
>5A[5]"@:]["
>6A[6]"@:]["
>7A[7]"@:]["
>8A[8]"@:]["
>9A[9]"@:]["
Az"azxs"
>0A[0]"azxs"
>1A[1]"azxs"
>2A[2]"azxs"
>3A[3]"azxs"
>4A[4]"azxs"
>5A[5]"azxs"
>6A[6]"azxs"
>7A[7]"azxs"
>8A[8]"azxs"
>9A[9]"azxs"
Az"sxcd"
>0A[0]"sxcd"
>1A[1]"sxcd"
>2A[2]"sxcd"
>3A[3]"sxcd"
>4A[4]"sxcd"
>5A[5]"sxcd"
>6A[6]"sxcd"
>7A[7]"sxcd"
>8A[8]"sxcd"
>9A[9]"sxcd"
Az"dcvf"
>0A[0]"dcvf"
>1A[1]"dcvf"
>2A[2]"dcvf"
>3A[3]"dcvf"
>4A[4]"dcvf"
>5A[5]"dcvf"
>6A[6]"dcvf"
>7A[7]"dcvf"
>8A[8]"dcvf"
>9A[9]"dcvf"
Az"fvbg"
>0A[0]"fvbg"
>1A[1]"fvbg"
>2A[2]"fvbg"
>3A[3]"fvbg"
>4A[4]"fvbg"
>5A[5]"fvbg"
>6A[6]"fvbg"
>7A[7]"fvbg"
>8A[8]"fvbg"
>9A[9]"fvbg"
Az"gbnh"
>0A[0]"gbnh"
>1A[1]"gbnh"
>2A[2]"gbnh"
>3A[3]"gbnh"
>4A[4]"gbnh"
>5A[5]"gbnh"
>6A[6]"gbnh"
>7A[7]"gbnh"
>8A[8]"gbnh"
>9A[9]"gbnh"
Az"hnmj"
>0A[0]"hnmj"
>1A[1]"hnmj"
>2A[2]"hnmj"
>3A[3]"hnmj"
>4A[4]"hnmj"
>5A[5]"hnmj"
>6A[6]"hnmj"
>7A[7]"hnmj"
>8A[8]"hnmj"
>9A[9]"hnmj"
Az"jm,k"
>0A[0]"jm,k"
>1A[1]"jm,k"
>2A[2]"jm,k"
>3A[3]"jm,k"
>4A[4]"jm,k"
>5A[5]"jm,k"
>6A[6]"jm,k"
>7A[7]"jm,k"
>8A[8]"jm,k"
>9A[9]"jm,k"
Az"k,.l"
>0A[0]"k,.l"
>1A[1]"k,.l"
>2A[2]"k,.l"
>3A[3]"k,.l"
>4A[4]"k,.l"
>5A[5]"k,.l"
>6A[6]"k,.l"
>7A[7]"k,.l"
>8A[8]"k,.l"
>9A[9]"k,.l"
Az"l./;"
>0A[0]"l./;"
>1A[1]"l./;"
>2A[2]"l./;"
>3A[3]"l./;"
>4A[4]"l./;"
>5A[5]"l./;"
>6A[6]"l./;"
>7A[7]"l./;"
>8A[8]"l./;"
>9A[9]"l./;"
Az";/\:"
>0A[0]";/\:"
>1A[1]";/\:"
>2A[2]";/\:"
>3A[3]";/\:"
>4A[4]";/\:"
>5A[5]";/\:"
>6A[6]";/\:"
>7A[7]";/\:"
>8A[8]";/\:"
>9A[9]";/\:"
Az":/\]"
>0A[0]":/\]"
>1A[1]":/\]"
>2A[2]":/\]"
>3A[3]":/\]"
>4A[4]":/\]"
>5A[5]":/\]"
>6A[6]":/\]"
>7A[7]":/\]"
>8A[8]":/\]"
>9A[9]":/\]"

[List.Rules:KoreLogicRulesDevProdTestUAT]
A0"[dD]ev"
Az"[dD]ev"
A0"[uU]at"
Az"[uU]at"
A0"[pP]rod"
Az"[pP]rod"
A0"[tT]est"
Az"[tT]est"

[List.Rules:KoreLogicRulesPrependAndAppendSpecial]
cA0"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
A0"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesAppendJustNumbers]
cAz"[0-9]"
Az"[0-9]"
cAz"[0-9][0-9]"
Az"[0-9][0-9]"
cAz"[0-9][0-9][0-9]"
Az"[0-9][0-9][0-9]"
cAz"[0-9][0-9][0-9][0-9]"
Az"[0-9][0-9][0-9][0-9]"

[List.Rules:KoreLogicRulesAppendNumbers_and_Specials_Simple]
# cap first letter then add a 0  2 6 9 ! *  to the end
cAz"[0-9!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"[0-9!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
# cap first letter then add a special char - THEN a number  !0 %9 !9 etc
cAz"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][0-9]"
Az"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][0-9]"
# Cap the first letter - then add 0? 0! 5_ .. 9!
cAz"[0-9][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"[0-9][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
## add NUMBER then SPECIAL    1! .. 9? 
Az"[0-9][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
## Add Number Number Special
cAz"[0-9][0-9][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"[0-9][0-9][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
## Add Special Number Number
cAz"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][0-9][0-9]"
Az"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][0-9][0-9]"
# Add 100! ... 999! to the end
cAz"[0-9][0-9][0-9][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"[0-9][0-9][0-9][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesAppendJustSpecials]
cAz"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
cAz"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"                                                               
Az"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"      

[List.Rules:KoreLogicRulesMonthsFullPreface]
A0"[jJ]anuary"
A0"[fF]ebruary"
A0"[mM]arch"
A0"[aA]pril"
A0"[mM]ay"
A0"[jJ]uner"
A0"[jJ]uly"
A0"[aA]ugust"
A0"[sS]eptember"
A0"[oO]ctober"
A0"[nN]ovember"
A0"[dD]ecember"


[List.Rules:KoreLogicRulesAddShortMonthsEverywhere]
Az"[jJ][aA][Nn]"
>8A[8]"[jJ][aA][Nn]"
>7A[7]"[jJ][aA][Nn]"
>6A[6]"[jJ][aA][Nn]"
>5A[5]"[jJ][aA][Nn]"
>4A[4]"[jJ][aA][Nn]"
>3A[3]"[jJ][aA][Nn]"
>2A[2]"[jJ][aA][Nn]"
>1A[1]"[jJ][aA][Nn]"
>0A[0]"[jJ][aA][Nn]"
Az"[fF][eE][bB]"
>0A[0]"[fF][eE][bB]"
>1A[1]"[fF][eE][bB]"
>2A[2]"[fF][eE][bB]"
>3A[3]"[fF][eE][bB]"
>4A[4]"[fF][eE][bB]"
>5A[5]"[fF][eE][bB]"
>6A[6]"[fF][eE][bB]"
>7A[7]"[fF][eE][bB]"
>8A[8]"[fF][eE][bB]"
>9A[9]"[fF][eE][bB]"
Az"[mM][aA][rRyY]"
>0A[0]"[mM][aA][rRyY]"
>1A[1]"[mM][aA][rRyY]"
>2A[2]"[mM][aA][rRyY]"
>3A[3]"[mM][aA][rRyY]"
>4A[4]"[mM][aA][rRyY]"
>5A[5]"[mM][aA][rRyY]"
>6A[6]"[mM][aA][rRyY]"
>7A[7]"[mM][aA][rRyY]"
>8A[8]"[mM][aA][rRyY]"
>9A[9]"[mM][aA][rRyY]"
Az"[aA][pP][rR]"
>0A[0]"[aA][pP][rR]"
>1A[1]"[aA][pP][rR]"
>2A[2]"[aA][pP][rR]"
>3A[3]"[aA][pP][rR]"
>4A[4]"[aA][pP][rR]"
>5A[5]"[aA][pP][rR]"
>6A[6]"[aA][pP][rR]"
>7A[7]"[aA][pP][rR]"
>8A[8]"[aA][pP][rR]"
>9A[9]"[aA][pP][rR]"
Az"[jJ][uU][nNlL]"
>0A[0]"[jJ][uU][nNlL]"
>1A[1]"[jJ][uU][nNlL]"
>2A[2]"[jJ][uU][nNlL]"
>3A[3]"[jJ][uU][nNlL]"
>4A[4]"[jJ][uU][nNlL]"
>5A[5]"[jJ][uU][nNlL]"
>6A[6]"[jJ][uU][nNlL]"
>7A[7]"[jJ][uU][nNlL]"
>8A[8]"[jJ][uU][nNlL]"
>9A[9]"[jJ][uU][nNlL]"
Az"[aA][uU][gG]"
>0A[0]"[aA][uU][gG]"
>1A[1]"[aA][uU][gG]"
>2A[2]"[aA][uU][gG]"
>3A[3]"[aA][uU][gG]"
>4A[4]"[aA][uU][gG]"
>5A[5]"[aA][uU][gG]"
>6A[6]"[aA][uU][gG]"
>7A[7]"[aA][uU][gG]"
>8A[8]"[aA][uU][gG]"
>9A[9]"[aA][uU][gG]"
Az"[sS][eE][pP]"
>0A[0]"[sS][eE][pP]"
>1A[1]"[sS][eE][pP]"
>2A[2]"[sS][eE][pP]"
>3A[3]"[sS][eE][pP]"
>4A[4]"[sS][eE][pP]"
>5A[5]"[sS][eE][pP]"
>6A[6]"[sS][eE][pP]"
>7A[7]"[sS][eE][pP]"
>8A[8]"[sS][eE][pP]"
>9A[9]"[sS][eE][pP]"
Az"[oO][cC][tT]"
>0A[0]"[oO][cC][tT]"
>1A[1]"[oO][cC][tT]"
>2A[2]"[oO][cC][tT]"
>3A[3]"[oO][cC][tT]"
>4A[4]"[oO][cC][tT]"
>5A[5]"[oO][cC][tT]"
>6A[6]"[oO][cC][tT]"
>7A[7]"[oO][cC][tT]"
>8A[8]"[oO][cC][tT]"
>9A[9]"[oO][cC][tT]"
Az"[nN][oO][vV]"
>0A[0]"[nN][oO][vV]"
>1A[1]"[nN][oO][vV]"
>2A[2]"[nN][oO][vV]"
>3A[3]"[nN][oO][vV]"
>4A[4]"[nN][oO][vV]"
>5A[5]"[nN][oO][vV]"
>6A[6]"[nN][oO][vV]"
>7A[7]"[nN][oO][vV]"
>8A[8]"[nN][oO][vV]"
>9A[9]"[nN][oO][vV]"
Az"[dD][eE][cC]"
>0A[0]"[dD][eE][cC]"
>1A[1]"[dD][eE][cC]"
>2A[2]"[dD][eE][cC]"
>3A[3]"[dD][eE][cC]"
>4A[4]"[dD][eE][cC]"
>5A[5]"[dD][eE][cC]"
>6A[6]"[dD][eE][cC]"
>7A[7]"[dD][eE][cC]"
>8A[8]"[dD][eE][cC]"
>9A[9]"[dD][eE][cC]"

[List.Rules:KoreLogicRulesPrepend4LetterMonths]
## Preface each dictionary with Janu janu Febr febr
A0"[jJ]anu"
A0"[fF]ebr"
A0"[mM]arc"
A0"[aA]pr"
A0"[mM]ay"
A0"[jJ]une"
A0"[jJ]uly"
A0"[Aa]ugu"
A0"[sS]ept"
A0"[oO]cto"
A0"[nN]ove"
A0"[Dd]ece"


# this will add the string '2010' at all places in the word: 
# USE this with a 4 or 5 char dictionary file with ALL characters
# soo abcde wiil become
# 2010abcde  a2010bcde  ab2010cde  acd2010de  abcd2010e  abcde2010
[List.Rules:KoreLogicRulesAdd2010Everywhere]
Az"2010"
>0A[0]"2010"
>1A[1]"2010"
>2A[2]"2010"
>3A[3]"2010"
>4A[4]"2010"
>5A[5]"2010"
>6A[6]"2010"
>7A[7]"2010"
>8A[8]"2010"
>9A[9]"2010"


[List.Rules:KoreLogicRulesPrependDaysWeek]
A0"[Mm][oO0][nN][dD][aA4@][yY]"
A0"[Tt][uU][eE3][sS$][dD][aA4@][yY]"
A0"[Ww][eE3][dD][nN][eE3][sS$][dD][aA4@][yY]"
A0"[Tt][hH][uU][rR][sS$][dD][aA4@][yY]"
A0"[Ff][rR][iI1!][dD][aA4@][yY]"
A0"[Ss][aA4@][tT+][uU][rR][dD][aA4@][yY]"
A0"[Ss][uU][nN][dD][aA4@][yY]"


[List.Rules:KoreLogicRulesAdd1234_Everywhere]
Az"1234"
>0A[0]"1234"
>1A[1]"1234"
>2A[2]"1234"
>3A[3]"1234"
>4A[4]"1234"
>5A[5]"1234"
>6A[6]"1234"
>7A[7]"1234"
>8A[8]"1234"
>9A[9]"1234"

[List.Rules:KoreLogicRulesAddSeq_Everywhere]
Az"0123"
>0A[0]"0123"
>1A[1]"0123"
>2A[2]"0123"
>3A[3]"0123"
>4A[4]"0123"
>5A[5]"0123"
>6A[6]"0123"
>7A[7]"0123"
>8A[8]"0123"
>9A[9]"0123"
Az"1234"
>0A[0]"1234"
>1A[1]"1234"
>2A[2]"1234"
>3A[3]"1234"
>4A[4]"1234"
>5A[5]"1234"
>6A[6]"1234"
>7A[7]"1234"
>8A[8]"1234"
>9A[9]"1234"
Az"2345"
>0A[0]"2345"
>1A[1]"2345"
>2A[2]"2345"
>3A[3]"2345"
>4A[4]"2345"
>5A[5]"2345"
>6A[6]"2345"
>7A[7]"2345"
>8A[8]"2345"
>9A[9]"2345"
Az"3456"
>0A[0]"3456"
>1A[1]"3456"
>2A[2]"3456"
>3A[3]"3456"
>4A[4]"3456"
>5A[5]"3456"
>6A[6]"3456"
>7A[7]"3456"
>8A[8]"3456"
>9A[9]"3456"
Az"4567"
>0A[0]"4567"
>1A[1]"4567"
>2A[2]"4567"
>3A[3]"4567"
>4A[4]"4567"
>5A[5]"4567"
>6A[6]"4567"
>7A[7]"4567"
>8A[8]"4567"
>9A[9]"4567"
Az"5678"
>0A[0]"5678"
>1A[1]"5678"
>2A[2]"5678"
>3A[3]"5678"
>4A[4]"5678"
>5A[5]"5678"
>6A[6]"5678"
>7A[7]"5678"
>8A[8]"5678"
>9A[9]"5678"
Az"6789"
>0A[0]"6789"
>1A[1]"6789"
>2A[2]"6789"
>3A[3]"6789"
>4A[4]"6789"
>5A[5]"6789"
>6A[6]"6789"
>7A[7]"6789"
>8A[8]"6789"
>9A[9]"6789"
Az"7890"
>0A[0]"7890"
>1A[1]"7890"
>2A[2]"7890"
>3A[3]"7890"
>4A[4]"7890"
>5A[5]"7890"
>6A[6]"7890"
>7A[7]"7890"
>8A[8]"7890"
>9A[9]"7890"

[List.Rules:KoreLogicRulesAddSeq2_Everywhere]
Az"qwer"
>0A[0]"qwer"
>1A[1]"qwer"
>2A[2]"qwer"
>3A[3]"qwer"
>4A[4]"qwer"
>5A[5]"qwer"
>6A[6]"qwer"
>7A[7]"qwer"
>8A[8]"qwer"
>9A[9]"qwer"
Az"wert"
>0A[0]"wert"
>1A[1]"wert"
>2A[2]"wert"
>3A[3]"wert"
>4A[4]"wert"
>5A[5]"wert"
>6A[6]"wert"
>7A[7]"wert"
>8A[8]"wert"
>9A[9]"wert"
Az"erty"
>0A[0]"erty"
>1A[1]"erty"
>2A[2]"erty"
>3A[3]"erty"
>4A[4]"erty"
>5A[5]"erty"
>6A[6]"erty"
>7A[7]"erty"
>8A[8]"erty"
>9A[9]"erty"
Az"rtyu"
>0A[0]"rtyu"
>1A[1]"rtyu"
>2A[2]"rtyu"
>3A[3]"rtyu"
>4A[4]"rtyu"
>5A[5]"rtyu"
>6A[6]"rtyu"
>7A[7]"rtyu"
>8A[8]"rtyu"
>9A[9]"rtyu"
Az"tyui"
>0A[0]"tyui"
>1A[1]"tyui"
>2A[2]"tyui"
>3A[3]"tyui"
>4A[4]"tyui"
>5A[5]"tyui"
>6A[6]"tyui"
>7A[7]"tyui"
>8A[8]"tyui"
>9A[9]"tyui"
Az"yuio"
>0A[0]"yuio"
>1A[1]"yuio"
>2A[2]"yuio"
>3A[3]"yuio"
>4A[4]"yuio"
>5A[5]"yuio"
>6A[6]"yuio"
>7A[7]"yuio"
>8A[8]"yuio"
>9A[9]"yuio"
Az"uiop"
>0A[0]"uiop"
>1A[1]"uiop"
>2A[2]"uiop"
>3A[3]"uiop"
>4A[4]"uiop"
>5A[5]"uiop"
>6A[6]"uiop"
>7A[7]"uiop"
>8A[8]"uiop"
>9A[9]"uiop"
Az"iop@"
>0A[0]"iop@"
>1A[1]"iop@"
>2A[2]"iop@"
>3A[3]"iop@"
>4A[4]"iop@"
>5A[5]"iop@"
>6A[6]"iop@"
>7A[7]"iop@"
>8A[8]"iop@"
>9A[9]"iop@"
Az"op@["
>0A[0]"op@["
>1A[1]"op@["
>2A[2]"op@["
>3A[3]"op@["
>4A[4]"op@["
>5A[5]"op@["
>6A[6]"op@["
>7A[7]"op@["
>8A[8]"op@["
>9A[9]"op@["
Az"asdf"
>0A[0]"asdf"
>1A[1]"asdf"
>2A[2]"asdf"
>3A[3]"asdf"
>4A[4]"asdf"
>5A[5]"asdf"
>6A[6]"asdf"
>7A[7]"asdf"
>8A[8]"asdf"
>9A[9]"asdf"
Az"sdfg"
>0A[0]"sdfg"
>1A[1]"sdfg"
>2A[2]"sdfg"
>3A[3]"sdfg"
>4A[4]"sdfg"
>5A[5]"sdfg"
>6A[6]"sdfg"
>7A[7]"sdfg"
>8A[8]"sdfg"
>9A[9]"sdfg"
Az"dfgh"
>0A[0]"dfgh"
>1A[1]"dfgh"
>2A[2]"dfgh"
>3A[3]"dfgh"
>4A[4]"dfgh"
>5A[5]"dfgh"
>6A[6]"dfgh"
>7A[7]"dfgh"
>8A[8]"dfgh"
>9A[9]"dfgh"
Az"fghj"
>0A[0]"fghj"
>1A[1]"fghj"
>2A[2]"fghj"
>3A[3]"fghj"
>4A[4]"fghj"
>5A[5]"fghj"
>6A[6]"fghj"
>7A[7]"fghj"
>8A[8]"fghj"
>9A[9]"fghj"
Az"ghjk"
>0A[0]"ghjk"
>1A[1]"ghjk"
>2A[2]"ghjk"
>3A[3]"ghjk"
>4A[4]"ghjk"
>5A[5]"ghjk"
>6A[6]"ghjk"
>7A[7]"ghjk"
>8A[8]"ghjk"
>9A[9]"ghjk"
Az"hjkl"
>0A[0]"hjkl"
>1A[1]"hjkl"
>2A[2]"hjkl"
>3A[3]"hjkl"
>4A[4]"hjkl"
>5A[5]"hjkl"
>6A[6]"hjkl"
>7A[7]"hjkl"
>8A[8]"hjkl"
>9A[9]"hjkl"
Az"jkl;"
>0A[0]"jkl;"
>1A[1]"jkl;"
>2A[2]"jkl;"
>3A[3]"jkl;"
>4A[4]"jkl;"
>5A[5]"jkl;"
>6A[6]"jkl;"
>7A[7]"jkl;"
>8A[8]"jkl;"
>9A[9]"jkl;"
Az"kl;:"
>0A[0]"kl;:"
>1A[1]"kl;:"
>2A[2]"kl;:"
>3A[3]"kl;:"
>4A[4]"kl;:"
>5A[5]"kl;:"
>6A[6]"kl;:"
>7A[7]"kl;:"
>8A[8]"kl;:"
>9A[9]"kl;:"
Az"zxcv"
>0A[0]"zxcv"
>1A[1]"zxcv"
>2A[2]"zxcv"
>3A[3]"zxcv"
>4A[4]"zxcv"
>5A[5]"zxcv"
>6A[6]"zxcv"
>7A[7]"zxcv"
>8A[8]"zxcv"
>9A[9]"zxcv"
Az"xcvb"
>0A[0]"xcvb"
>1A[1]"xcvb"
>2A[2]"xcvb"
>3A[3]"xcvb"
>4A[4]"xcvb"
>5A[5]"xcvb"
>6A[6]"xcvb"
>7A[7]"xcvb"
>8A[8]"xcvb"
>9A[9]"xcvb"
Az"cvbn"
>0A[0]"cvbn"
>1A[1]"cvbn"
>2A[2]"cvbn"
>3A[3]"cvbn"
>4A[4]"cvbn"
>5A[5]"cvbn"
>6A[6]"cvbn"
>7A[7]"cvbn"
>8A[8]"cvbn"
>9A[9]"cvbn"
Az"vbnm"
>0A[0]"vbnm"
>1A[1]"vbnm"
>2A[2]"vbnm"
>3A[3]"vbnm"
>4A[4]"vbnm"
>5A[5]"vbnm"
>6A[6]"vbnm"
>7A[7]"vbnm"
>8A[8]"vbnm"
>9A[9]"vbnm"
Az"bnm,"
>0A[0]"bnm,"
>1A[1]"bnm,"
>2A[2]"bnm,"
>3A[3]"bnm,"
>4A[4]"bnm,"
>5A[5]"bnm,"
>6A[6]"bnm,"
>7A[7]"bnm,"
>8A[8]"bnm,"
>9A[9]"bnm,"
Az"nm,."
>0A[0]"nm,."
>1A[1]"nm,."
>2A[2]"nm,."
>3A[3]"nm,."
>4A[4]"nm,."
>5A[5]"nm,."
>6A[6]"nm,."
>7A[7]"nm,."
>8A[8]"nm,."
>9A[9]"nm,."
Az"m,./"
>0A[0]"m,./"
>1A[1]"m,./"
>2A[2]"m,./"
>3A[3]"m,./"
>4A[4]"m,./"
>5A[5]"m,./"
>6A[6]"m,./"
>7A[7]"m,./"
>8A[8]"m,./"
>9A[9]"m,./"
Az",./\\"
>0A[0]",./\\"
>1A[1]",./\\"
>2A[2]",./\\"
>3A[3]",./\\"
>4A[4]",./\\"
>5A[5]",./\\"
>6A[6]",./\\"
>7A[7]",./\\"
>8A[8]",./\\"
>9A[9]",./\\"
Az"zaq1"
>0A[0]"zaq1"
>1A[1]"zaq1"
>2A[2]"zaq1"
>3A[3]"zaq1"
>4A[4]"zaq1"
>5A[5]"zaq1"
>6A[6]"zaq1"
>7A[7]"zaq1"
>8A[8]"zaq1"
>9A[9]"zaq1"
Az"1qaz"
>0A[0]"1qaz"
>1A[1]"1qaz"
>2A[2]"1qaz"
>3A[3]"1qaz"
>4A[4]"1qaz"
>5A[5]"1qaz"
>6A[6]"1qaz"
>7A[7]"1qaz"
>8A[8]"1qaz"
>9A[9]"1qaz"
Az"2wsx"
>0A[0]"2wsx"
>1A[1]"2wsx"
>2A[2]"2wsx"
>3A[3]"2wsx"
>4A[4]"2wsx"
>5A[5]"2wsx"
>6A[6]"2wsx"
>7A[7]"2wsx"
>8A[8]"2wsx"
>9A[9]"2wsx"
Az"xsw2"
>0A[0]"xsw2"
>1A[1]"xsw2"
>2A[2]"xsw2"
>3A[3]"xsw2"
>4A[4]"xsw2"
>5A[5]"xsw2"
>6A[6]"xsw2"
>7A[7]"xsw2"
>8A[8]"xsw2"
>9A[9]"xsw2"
Az"3edc"
>0A[0]"3edc"
>1A[1]"3edc"
>2A[2]"3edc"
>3A[3]"3edc"
>4A[4]"3edc"
>5A[5]"3edc"
>6A[6]"3edc"
>7A[7]"3edc"
>8A[8]"3edc"
>9A[9]"3edc"
Az"cde3"
>0A[0]"cde3"
>1A[1]"cde3"
>2A[2]"cde3"
>3A[3]"cde3"
>4A[4]"cde3"
>5A[5]"cde3"
>6A[6]"cde3"
>7A[7]"cde3"
>8A[8]"cde3"
>9A[9]"cde3"
Az"4rfv"
>0A[0]"4rfv"
>1A[1]"4rfv"
>2A[2]"4rfv"
>3A[3]"4rfv"
>4A[4]"4rfv"
>5A[5]"4rfv"
>6A[6]"4rfv"
>7A[7]"4rfv"
>8A[8]"4rfv"
>9A[9]"4rfv"
Az"vfr4"
>0A[0]"vfr4"
>1A[1]"vfr4"
>2A[2]"vfr4"
>3A[3]"vfr4"
>4A[4]"vfr4"
>5A[5]"vfr4"
>6A[6]"vfr4"
>7A[7]"vfr4"
>8A[8]"vfr4"
>9A[9]"vfr4"
Az"5tgb"
>0A[0]"5tgb"
>1A[1]"5tgb"
>2A[2]"5tgb"
>3A[3]"5tgb"
>4A[4]"5tgb"
>5A[5]"5tgb"
>6A[6]"5tgb"
>7A[7]"5tgb"
>8A[8]"5tgb"
>9A[9]"5tgb"
Az"bgt5"
>0A[0]"bgt5"
>1A[1]"bgt5"
>2A[2]"bgt5"
>3A[3]"bgt5"
>4A[4]"bgt5"
>5A[5]"bgt5"
>6A[6]"bgt5"
>7A[7]"bgt5"
>8A[8]"bgt5"
>9A[9]"bgt5"
Az"6yhn"
>0A[0]"6yhn"
>1A[1]"6yhn"
>2A[2]"6yhn"
>3A[3]"6yhn"
>4A[4]"6yhn"
>5A[5]"6yhn"
>6A[6]"6yhn"
>7A[7]"6yhn"
>8A[8]"6yhn"
>9A[9]"6yhn"
Az"nhy6"
>0A[0]"nhy6"
>1A[1]"nhy6"
>2A[2]"nhy6"
>3A[3]"nhy6"
>4A[4]"nhy6"
>5A[5]"nhy6"
>6A[6]"nhy6"
>7A[7]"nhy6"
>8A[8]"nhy6"
>9A[9]"nhy6"
Az"7ujm"
>0A[0]"7ujm"
>1A[1]"7ujm"
>2A[2]"7ujm"
>3A[3]"7ujm"
>4A[4]"7ujm"
>5A[5]"7ujm"
>6A[6]"7ujm"
>7A[7]"7ujm"
>8A[8]"7ujm"
>9A[9]"7ujm"
Az"mju7"
>0A[0]"mju7"
>1A[1]"mju7"
>2A[2]"mju7"
>3A[3]"mju7"
>4A[4]"mju7"
>5A[5]"mju7"
>6A[6]"mju7"
>7A[7]"mju7"
>8A[8]"mju7"
>9A[9]"mju7"
Az"8ik,"
>0A[0]"8ik,"
>1A[1]"8ik,"
>2A[2]"8ik,"
>3A[3]"8ik,"
>4A[4]"8ik,"
>5A[5]"8ik,"
>6A[6]"8ik,"
>7A[7]"8ik,"
>8A[8]"8ik,"
>9A[9]"8ik,"
Az",ki8"
>0A[0]",ki8"
>1A[1]",ki8"
>2A[2]",ki8"
>3A[3]",ki8"
>4A[4]",ki8"
>5A[5]",ki8"
>6A[6]",ki8"
>7A[7]",ki8"
>8A[8]",ki8"
>9A[9]",ki8"
Az"9ol."
>0A[0]"9ol."
>1A[1]"9ol."
>2A[2]"9ol."
>3A[3]"9ol."
>4A[4]"9ol."
>5A[5]"9ol."
>6A[6]"9ol."
>7A[7]"9ol."
>8A[8]"9ol."
>9A[9]"9ol."
Az".lo9"
>0A[0]".lo9"
>1A[1]".lo9"
>2A[2]".lo9"
>3A[3]".lo9"
>4A[4]".lo9"
>5A[5]".lo9"
>6A[6]".lo9"
>7A[7]".lo9"
>8A[8]".lo9"
>9A[9]".lo9"
Az"0p;/"
>0A[0]"0p;/"
>1A[1]"0p;/"
>2A[2]"0p;/"
>3A[3]"0p;/"
>4A[4]"0p;/"
>5A[5]"0p;/"
>6A[6]"0p;/"
>7A[7]"0p;/"
>8A[8]"0p;/"
>9A[9]"0p;/"
Az"/;p0"
>0A[0]"/;p0"
>1A[1]"/;p0"
>2A[2]"/;p0"
>3A[3]"/;p0"
>4A[4]"/;p0"
>5A[5]"/;p0"
>6A[6]"/;p0"
>7A[7]"/;p0"
>8A[8]"/;p0"
>9A[9]"/;p0"
Az"-@:\\"
>0A[0]"-@:\\"
>1A[1]"-@:\\"
>2A[2]"-@:\\"
>3A[3]"-@:\\"
>4A[4]"-@:\\"
>5A[5]"-@:\\"
>6A[6]"-@:\\"
>7A[7]"-@:\\"
>8A[8]"-@:\\"
>9A[9]"-@:\\"
Az"\:@-"
>0A[0]"\:@-"
>1A[1]"\:@-"
>2A[2]"\:@-"
>3A[3]"\:@-"
>4A[4]"\:@-"
>5A[5]"\:@-"
>6A[6]"\:@-"
>7A[7]"\:@-"
>8A[8]"\:@-"
>9A[9]"\:@-"

[List.Rules:KoreLogicRulesAddNumNumNumNum_Everywhere]
Az"[0-9][0-9][0-9][0-9]"
>0A[0]"[0-9][0-9][0-9][0-9]"
>1A[1]"[0-9][0-9][0-9][0-9]"
>2A[2]"[0-9][0-9][0-9][0-9]"
>3A[3]"[0-9][0-9][0-9][0-9]"
>4A[4]"[0-9][0-9][0-9][0-9]"

[List.Rules:KoreLogicRulesAppendMonthDay]
Az"[jJ]anuary"
Az"[jJ]anuary[0-9]"
Az"[jJ]anuary[0-9][0-9]"
Az"[fF]ebruary"
Az"[fF]ebruary[0-9]"
Az"[fF]ebruary[0-9][0-9]"
Az"[mM]arch"
Az"[mM]arch[0-9]"
Az"[mM]arch[0-9][0-9]"
Az"[aA]pril"
Az"[aA]pril[0-9]"
Az"[aA]pril[0-9][0-9]"
Az"[mM]ay"
Az"[mM]ay[0-9]"
Az"[mM]ay[0-9][0-9]"
Az"[jJ]une"
Az"[jJ]une[0-9]"
Az"[jJ]une[0-9[0-9]]"
Az"[jJ]uly"
Az"[jJ]uly[0-9]"
Az"[jJ]uly[0-9][0-9]"
Az"[aA]ugust"
Az"[aA]ugust[0-9]"
Az"[aA]ugust[0-9][0-9]"
Az"[sS]eptember"
Az"[sS]eptember[0-9]"
Az"[sS]eptember[0-9[0-9]"
Az"[oO]ctober"
Az"[oO]ctober[0-9]"
Az"[oO]ctober[0-9][0-9]"
Az"[nN]ovember"
Az"[nN]ovember[0-9]"
Az"[nN]ovember[0-9][0-9]"
Az"[dD]ecember"
Az"[dD]ecember[0-9]"
Az"[dD]ecember[0-9][0-9]"


[List.Rules:KoreLogicRulesAppendMonthCurrentYear]
Az"[jJ]an2010"
Az"[fF]eb2010"
Az"[mM]ar2010"
Az"[aA]pr2010"
Az"[mM]ay2010"
Az"[jJ]un2010"
Az"[jJ]ul2010"
Az"[Aa]ug2010"
Az"[sS]ep2010"
Az"[oO]ct2010"
Az"[nN]ov2010"
Az"[Dd]ec2010"


[List.Rules:KoreLogicRulesReplaceNumbers2Special]
/1s1!
/2s2@
/3s3#
/4s4$
/5s5%
/6s6^
/7s7&
/8s8*
/9s9(
/0s0)
/1s1!%12s2@
/1s1!%13s3#
/1s1!%14s4$
/1s1!%15s5%
/1s1!%16s6^
/1s1!%17s7&
/1s1!%18s8*
/1s1!%19s9(
/1s1!%10s0)
/2s2@%13s3#
/2s2@%14s4$
/2s2@%15s5%
/2s2@%16s6^
/2s2@%17s7&
/2s2@%18s8*
/2s2@%19s9(
/2s2@%10s0)
/3s3#%14s4$
/3s3#%15s5%
/3s3#%16s6^
/3s3#%17s7&
/3s3#%18s8*
/3s3#%19s9(
/3s3#%10s0)
/4s4$%15s5%
/4s4$%16s6^
/4s4$%17s7&
/4s4$%18s8*
/4s4$%19s9(
/4s4$%10s0)
/5s5%%16s6^
/5s5%%17s7&
/5s5%%18s8*
/5s5%%19s9(
/5s5%%10s0)
/6s6^%17s7&
/6s6^%18s8*
/6s6^%19s9(
/6s6^%10s0)
/7s7&%18s8*
/7s7&%19s9(
/7s7&%10s0)
/8s8*%19s9(
/8s8*%10s0)
/9s9(%10s0)


[List.Rules:KoreLogicRulesReplaceNumbers]
/0s01
/0s02
/0s03
/0s04
/0s05
/0s06
/0s07
/0s08
/0s09
/1s10
/1s12
/1s13
/1s14
/1s15
/1s16
/1s17
/1s18
/1s19
/2s20
/2s21
/2s23
/2s24
/2s25
/2s26
/2s27
/2s28
/2s29
/3s30
/3s31
/3s32
/3s34
/3s35
/3s36
/3s37
/3s38
/3s39
/4s40
/4s41
/4s42
/4s43
/4s45
/4s46
/4s47
/4s48
/4s49
/5s50
/5s51
/5s52
/5s53
/5s54
/5s56
/5s57
/5s58
/5s59
/6s60
/6s61
/6s62
/6s63
/6s64
/6s65
/6s67
/6s68
/6s69
/7s70
/7s71
/7s72
/7s73
/7s74
/7s75
/7s76
/7s78
/7s79
/8s80
/8s81
/8s82
/8s83
/8s84
/8s85
/8s86
/8s87
/8s89
/9s90
/9s91
/9s92
/9s93
/9s94
/9s95
/9s96
/9s97
/9s98


# This is a lamer/faster version of --rules:nt
[List.Rules:KoreLogicRulesReplaceLettersCaps]
/asaA
/bsbB
/cscC
/dsdD
/eseE
/fsfF
/gsgG
/hshH
/isiI
/jsjJ
/kskK
/lslL
/msmM
/nsnN
/osoO
/pspP
/qsqQ
/rsrR
/sssS
/tstT
/usuU
/vsvV
/wswW
/xsxX
/ysyY
/zszZ


[List.Rules:KoreLogicRulesAddDotCom]
Az".com"
cAz".com"
Az".net"
cAz".net"
Az".org"
cAz".org"

[List.Rules:KoreLogicRulesAppendCap-Num_or_Special-Twice]
cAz"[A-Z][0-9][0-9]"
Az"[A-Z][0-9][0-9]"
cAz"[A-Z][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][0-9]"
Az"[A-Z][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][0-9]"
cAz"[A-Z][0-9][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"[A-Z][0-9][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
cAz"[A-Z][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"[A-Z][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesAppendSpecialLowerLower]
cAz"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][a-z][a-z]"
Az"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][a-z][a-z]"

[List.Rules:KoreLogicRulesAppendJustSpecials3Times]
cAz"[!$@#%.][!$@#%.][!$@#%.]"
Az"[!$@#%.][!$@#%.][!$@#%.]"
cAz"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
Az"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesPrependJustSpecials]
cA0"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
A0"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
cA0"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
A0"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"

[List.Rules:KoreLogicRulesAppend1_AddSpecialEverywhere]
>4cA[0-5]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"1"
>5cA[6]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"1"
>6cA[7]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"1"
>7cA[8]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"1"
>8cA[9]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"1"
>4A[0-5]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"1"
>5A[6]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"1"
>6A[7]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"1"
>7A[8]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"1"
>8A[9]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"1"

[List.Rules:KoreLogicRulesPrependNumNum_AppendNumSpecial]
cA0"[0-9][0-9]"Az"[0-9][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"
A0"[0-9][0-9]"Az"[0-9][!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"


[List.Rules:KoreLogicRulesAppendNum_AddSpecialEverywhere]
>4cA[0-5]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9]"
>4A[0-5]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9]"
>5cA[6]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9]"
>5A[6]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9]"
>6cA[7]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9]"
>6A[7]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9]"
>7cA[8]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9]"
>7A[8]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9]"
>8cA[9]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9]"
>8A[9]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9]"


[List.Rules:KoreLogicRulesAppendNumNum_AddSpecialEverywhere]
>4cA[0-5]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9]"
>5cA[6]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9]"
>6cA[7]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9]"
>7cA[8]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9]"
>8cA[9]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9]"
# no cap
>4A[0-5]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9]"
>5A[6]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9]"
>6A[7]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9]"
>7A[8]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9]"
>8A[9]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9]"


[List.Rules:KoreLogicRulesAppendNumNumNum_AddSpecialEverywhere]
>4cA[0-5]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9][0-9]"
>5cA[6]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9][0-9]"
>6cA[7]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9][0-9]"
>7cA[8]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9][0-9]"
>8cA[9]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9][0-9]"
# no cap
>4A[0-5]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9][0-9]"
>5A[6]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9][0-9]"
>6A[7]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9][0-9]"
>7A[8]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9][0-9]"
>8A[9]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"[0-9][0-9][0-9]"


[List.Rules:KoreLogicRulesAppendYears_AddSpecialEverywhere]
>4cA[0-5]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"19[4-9][0-9]"
>4cA[0-5]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"20[0-1][0-9]"
>5cA[6]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"19[4-9][0-9]"
>5cA[6]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"20[0-1][0-9]"
>6cA[7]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"19[4-9][0-9]"
>6cA[7]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"20[0-1][0-9]"
>7cA[8]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"19[4-9][0-9]"
>7cA[8]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"20[0-1][0-9]"
>8cA[9]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"19[4-9][0-9]"
>8cA[9]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"20[0-1][0-9]"
# no cap
>4A[0-5]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"19[4-9][0-9]"
>4A[0-5]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"20[0-1][0-9]"
>5A[6]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"19[4-9][0-9]"
>5A[6]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"20[0-1][0-9]"
>6A[7]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"19[4-9][0-9]"
>6A[7]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"20[0-1][0-9]"
>7A[8]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"19[4-9][0-9]"
>7A[8]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"20[0-1][0-9]"
>8A[9]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"19[4-9][0-9]"
>8A[9]"[!$@#%.^&()_+\-={}|\[\]\\;':,/\<\>?`~*]"Az"20[0-1][0-9]"

# This rule needs work actually --- you have to 'sort -u' its output    rick
# /a = reject if it doesnt have an 'a'
# the [:c] does waste some effort - and generate dupes. This is wasteful,
# but I want to keep it in b/c the original crack/JtR rules use it.
[List.Rules:KoreLogicRulesL33t]
/asa@[:c]
/asa4[:c]
/AsA4[:c]
/AsA@[:c]
/bsb8[:c]
/BsB8[:c]
/ese3[:c]
/EsE3[:c]
/isi1[:c]
/isi![:c]
/isi|[:c]
/IsI1[:c]
/IsI![:c]
/IsI|[:c]
/lsl1[:c]
/lsl7[:c]
/lsl|[:c]
/lsl![:c]
/Lsl1[:c]
/Lsl7[:c]
/Lsl|[:c]
/Lsl![:c]
/oso0[:c]
/OsO0[:c]
/sss$[:c]
/sss5[:c]
/SsS$[:c]
/SsS5[:c]
/tst+[:c]
/TsT+[:c]
/1s1![:c]
/1s1i[:c]
/1s1I[:c]
/1s1|[:c]
/0s0o[:c]
/0s0O[:c]
/3s3e[:c]
/3s3E[:c]
/4s4a[:c]
/4s4A[:c]
/5s5s[:c]
/5s5S[:c]
/7s7l[:c]
/7s7L[:c]
/8s8b[:c]
/8s8B[:c]
/asa@/bsb8[:c]
/asa@/BsB8[:c]
/asa@/ese3[:c]
/asa@/EsE3[:c]
/asa@/isi1[:c]
/asa@/isi![:c]
/asa@/isi|[:c]
/asa@/IsI1[:c]
/asa@/IsI![:c]
/asa@/IsI|[:c]
/asa@/lsl1[:c]
/asa@/lsl7[:c]
/asa@/lsl|[:c]
/asa@/lsl![:c]
/asa@/Lsl1[:c]
/asa@/Lsl7[:c]
/asa@/Lsl|[:c]
/asa@/Lsl![:c]
/asa@/oso0[:c]
/asa@/OsO0[:c]
/asa@/sss$[:c]
/asa@/sss5[:c]
/asa@/SsS$[:c]
/asa@/SsS5[:c]
/asa@/tst+[:c]
/asa@/TsT+[:c]
/asa@/1s1![:c]
/asa@/1s1i[:c]
/asa@/1s1I[:c]
/asa@/1s1|[:c]
/asa@/0s0o[:c]
/asa@/0s0O[:c]
/asa@/3s3e[:c]
/asa@/3s3E[:c]
/asa@/4s4a[:c]
/asa@/4s4A[:c]
/asa@/5s5s[:c]
/asa@/5s5S[:c]
/asa@/7s7l[:c]
/asa@/7s7L[:c]
/asa@/8s8b[:c]
/asa@/8s8B[:c]
/asa4/AsA4[:c]
/asa4/AsA@[:c]
/asa4/bsb8[:c]
/asa4/BsB8[:c]
/asa4/ese3[:c]
/asa4/EsE3[:c]
/asa4/isi1[:c]
/asa4/isi![:c]
/asa4/isi|[:c]
/asa4/IsI1[:c]
/asa4/IsI![:c]
/asa4/IsI|[:c]
/asa4/lsl1[:c]
/asa4/lsl7[:c]
/asa4/lsl|[:c]
/asa4/lsl![:c]
/asa4/Lsl1[:c]
/asa4/Lsl7[:c]
/asa4/Lsl|[:c]
/asa4/Lsl![:c]
/asa4/oso0[:c]
/asa4/OsO0[:c]
/asa4/sss$[:c]
/asa4/sss5[:c]
/asa4/SsS$[:c]
/asa4/SsS5[:c]
/asa4/tst+[:c]
/asa4/TsT+[:c]
/asa4/1s1![:c]
/asa4/1s1i[:c]
/asa4/1s1I[:c]
/asa4/1s1|[:c]
/asa4/0s0o[:c]
/asa4/0s0O[:c]
/asa4/3s3e[:c]
/asa4/3s3E[:c]
/asa4/4s4a[:c]
/asa4/4s4A[:c]
/asa4/5s5s[:c]
/asa4/5s5S[:c]
/asa4/7s7l[:c]
/asa4/7s7L[:c]
/asa4/8s8b[:c]
/asa4/8s8B[:c]
/AsA4/asa@[:c]
/AsA4/asa4[:c]
/AsA4/BsB8[:c]
/AsA4/ese3[:c]
/AsA4/EsE3[:c]
/AsA4/isi1[:c]
/AsA4/isi![:c]
/AsA4/isi|[:c]
/AsA4/IsI1[:c]
/AsA4/IsI![:c]
/AsA4/IsI|[:c]
/AsA4/lsl1[:c]
/AsA4/lsl7[:c]
/AsA4/lsl|[:c]
/AsA4/lsl![:c]
/AsA4/Lsl1[:c]
/AsA4/Lsl7[:c]
/AsA4/Lsl|[:c]
/AsA4/Lsl![:c]
/AsA4/oso0[:c]
/AsA4/OsO0[:c]
/AsA4/sss$[:c]
/AsA4/sss5[:c]
/AsA4/SsS$[:c]
/AsA4/SsS5[:c]
/AsA4/tst+[:c]
/AsA4/TsT+[:c]
/AsA4/1s1![:c]
/AsA4/1s1i[:c]
/AsA4/1s1I[:c]
/AsA4/1s1|[:c]
/AsA4/0s0o[:c]
/AsA4/0s0O[:c]
/AsA4/3s3e[:c]
/AsA4/3s3E[:c]
/AsA4/4s4a[:c]
/AsA4/4s4A[:c]
/AsA4/5s5s[:c]
/AsA4/5s5S[:c]
/AsA4/7s7l[:c]
/AsA4/7s7L[:c]
/AsA4/8s8b[:c]
/AsA4/8s8B[:c]
/AsA@/asa@[:c]
/AsA@/asa4[:c]
/AsA@/bsb8[:c]
/AsA@/BsB8[:c]
/AsA@/ese3[:c]
/AsA@/EsE3[:c]
/AsA@/isi1[:c]
/AsA@/isi![:c]
/AsA@/isi|[:c]
/AsA@/IsI1[:c]
/AsA@/IsI![:c]
/AsA@/IsI|[:c]
/AsA@/lsl1[:c]
/AsA@/lsl7[:c]
/AsA@/lsl|[:c]
/AsA@/lsl![:c]
/AsA@/Lsl1[:c]
/AsA@/Lsl7[:c]
/AsA@/Lsl|[:c]
/AsA@/Lsl![:c]
/AsA@/oso0[:c]
/AsA@/OsO0[:c]
/AsA@/sss$[:c]
/AsA@/sss5[:c]
/AsA@/SsS$[:c]
/AsA@/SsS5[:c]
/AsA@/tst+[:c]
/AsA@/TsT+[:c]
/AsA@/1s1![:c]
/AsA@/1s1i[:c]
/AsA@/1s1I[:c]
/AsA@/1s1|[:c]
/AsA@/0s0o[:c]
/AsA@/0s0O[:c]
/AsA@/3s3e[:c]
/AsA@/3s3E[:c]
/AsA@/4s4a[:c]
/AsA@/4s4A[:c]
/AsA@/5s5s[:c]
/AsA@/5s5S[:c]
/AsA@/7s7l[:c]
/AsA@/7s7L[:c]
/AsA@/8s8b[:c]
/AsA@/8s8B[:c]
/bsb8/asa@[:c]
/bsb8/asa4[:c]
/bsb8/AsA4[:c]
/bsb8/AsA@[:c]
/bsb8/BsB8[:c]
/bsb8/ese3[:c]
/bsb8/EsE3[:c]
/bsb8/isi1[:c]
/bsb8/isi![:c]
/bsb8/isi|[:c]
/bsb8/IsI1[:c]
/bsb8/IsI![:c]
/bsb8/IsI|[:c]
/bsb8/lsl1[:c]
/bsb8/lsl7[:c]
/bsb8/lsl|[:c]
/bsb8/lsl![:c]
/bsb8/Lsl1[:c]
/bsb8/Lsl7[:c]
/bsb8/Lsl|[:c]
/bsb8/Lsl![:c]
/bsb8/oso0[:c]
/bsb8/OsO0[:c]
/bsb8/sss$[:c]
/bsb8/sss5[:c]
/bsb8/SsS$[:c]
/bsb8/SsS5[:c]
/bsb8/tst+[:c]
/bsb8/TsT+[:c]
/bsb8/1s1![:c]
/bsb8/1s1i[:c]
/bsb8/1s1I[:c]
/bsb8/1s1|[:c]
/bsb8/0s0o[:c]
/bsb8/0s0O[:c]
/bsb8/3s3e[:c]
/bsb8/3s3E[:c]
/bsb8/4s4a[:c]
/bsb8/4s4A[:c]
/bsb8/5s5s[:c]
/bsb8/5s5S[:c]
/bsb8/7s7l[:c]
/bsb8/7s7L[:c]
/bsb8/8s8b[:c]
/bsb8/8s8B[:c]
/BsB8/asa@[:c]
/BsB8/asa4[:c]
/BsB8/AsA4[:c]
/BsB8/AsA@[:c]
/BsB8/bsb8[:c]
/BsB8/ese3[:c]
/BsB8/EsE3[:c]
/BsB8/isi1[:c]
/BsB8/isi![:c]
/BsB8/isi|[:c]
/BsB8/IsI1[:c]
/BsB8/IsI![:c]
/BsB8/IsI|[:c]
/BsB8/lsl1[:c]
/BsB8/lsl7[:c]
/BsB8/lsl|[:c]
/BsB8/lsl![:c]
/BsB8/Lsl1[:c]
/BsB8/Lsl7[:c]
/BsB8/Lsl|[:c]
/BsB8/Lsl![:c]
/BsB8/oso0[:c]
/BsB8/OsO0[:c]
/BsB8/sss$[:c]
/BsB8/sss5[:c]
/BsB8/SsS$[:c]
/BsB8/SsS5[:c]
/BsB8/tst+[:c]
/BsB8/TsT+[:c]
/BsB8/1s1![:c]
/BsB8/1s1i[:c]
/BsB8/1s1I[:c]
/BsB8/1s1|[:c]
/BsB8/0s0o[:c]
/BsB8/0s0O[:c]
/BsB8/3s3e[:c]
/BsB8/3s3E[:c]
/BsB8/4s4a[:c]
/BsB8/4s4A[:c]
/BsB8/5s5s[:c]
/BsB8/5s5S[:c]
/BsB8/7s7l[:c]
/BsB8/7s7L[:c]
/BsB8/8s8b[:c]
/BsB8/8s8B[:c]
/ese3/asa@[:c]
/ese3/asa4[:c]
/ese3/AsA4[:c]
/ese3/AsA@[:c]
/ese3/bsb8[:c]
/ese3/BsB8[:c]
/ese3/EsE3[:c]
/ese3/isi1[:c]
/ese3/isi![:c]
/ese3/isi|[:c]
/ese3/IsI1[:c]
/ese3/IsI![:c]
/ese3/IsI|[:c]
/ese3/lsl1[:c]
/ese3/lsl7[:c]
/ese3/lsl|[:c]
/ese3/lsl![:c]
/ese3/Lsl1[:c]
/ese3/Lsl7[:c]
/ese3/Lsl|[:c]
/ese3/Lsl![:c]
/ese3/oso0[:c]
/ese3/OsO0[:c]
/ese3/sss$[:c]
/ese3/sss5[:c]
/ese3/SsS$[:c]
/ese3/SsS5[:c]
/ese3/tst+[:c]
/ese3/TsT+[:c]
/ese3/1s1![:c]
/ese3/1s1i[:c]
/ese3/1s1I[:c]
/ese3/1s1|[:c]
/ese3/0s0o[:c]
/ese3/0s0O[:c]
/ese3/3s3e[:c]
/ese3/3s3E[:c]
/ese3/4s4a[:c]
/ese3/4s4A[:c]
/ese3/5s5s[:c]
/ese3/5s5S[:c]
/ese3/7s7l[:c]
/ese3/7s7L[:c]
/ese3/8s8b[:c]
/ese3/8s8B[:c]
/EsE3/asa@[:c]
/EsE3/asa4[:c]
/EsE3/AsA4[:c]
/EsE3/AsA@[:c]
/EsE3/bsb8[:c]
/EsE3/BsB8[:c]
/EsE3/ese3[:c]
/EsE3/isi1[:c]
/EsE3/isi![:c]
/EsE3/isi|[:c]
/EsE3/IsI1[:c]
/EsE3/IsI![:c]
/EsE3/IsI|[:c]
/EsE3/lsl1[:c]
/EsE3/lsl7[:c]
/EsE3/lsl|[:c]
/EsE3/lsl![:c]
/EsE3/Lsl1[:c]
/EsE3/Lsl7[:c]
/EsE3/Lsl|[:c]
/EsE3/Lsl![:c]
/EsE3/oso0[:c]
/EsE3/OsO0[:c]
/EsE3/sss$[:c]
/EsE3/sss5[:c]
/EsE3/SsS$[:c]
/EsE3/SsS5[:c]
/EsE3/tst+[:c]
/EsE3/TsT+[:c]
/EsE3/1s1![:c]
/EsE3/1s1i[:c]
/EsE3/1s1I[:c]
/EsE3/1s1|[:c]
/EsE3/0s0o[:c]
/EsE3/0s0O[:c]
/EsE3/3s3e[:c]
/EsE3/3s3E[:c]
/EsE3/4s4a[:c]
/EsE3/4s4A[:c]
/EsE3/5s5s[:c]
/EsE3/5s5S[:c]
/EsE3/7s7l[:c]
/EsE3/7s7L[:c]
/EsE3/8s8b[:c]
/EsE3/8s8B[:c]
/isi1/asa@[:c]
/isi1/asa4[:c]
/isi1/AsA4[:c]
/isi1/AsA@[:c]
/isi1/bsb8[:c]
/isi1/BsB8[:c]
/isi1/ese3[:c]
/isi1/EsE3[:c]
/isi1/IsI1[:c]
/isi1/IsI![:c]
/isi1/IsI|[:c]
/isi1/lsl1[:c]
/isi1/lsl7[:c]
/isi1/lsl|[:c]
/isi1/lsl![:c]
/isi1/Lsl1[:c]
/isi1/Lsl7[:c]
/isi1/Lsl|[:c]
/isi1/Lsl![:c]
/isi1/oso0[:c]
/isi1/OsO0[:c]
/isi1/sss$[:c]
/isi1/sss5[:c]
/isi1/SsS$[:c]
/isi1/SsS5[:c]
/isi1/tst+[:c]
/isi1/TsT+[:c]
/isi1/1s1![:c]
/isi1/1s1i[:c]
/isi1/1s1I[:c]
/isi1/1s1|[:c]
/isi1/0s0o[:c]
/isi1/0s0O[:c]
/isi1/3s3e[:c]
/isi1/3s3E[:c]
/isi1/4s4a[:c]
/isi1/4s4A[:c]
/isi1/5s5s[:c]
/isi1/5s5S[:c]
/isi1/7s7l[:c]
/isi1/7s7L[:c]
/isi1/8s8b[:c]
/isi1/8s8B[:c]
/isi!/asa@[:c]
/isi!/asa4[:c]
/isi!/AsA4[:c]
/isi!/AsA@[:c]
/isi!/bsb8[:c]
/isi!/BsB8[:c]
/isi!/ese3[:c]
/isi!/EsE3[:c]
/isi!/isi1[:c]
/isi!/isi|[:c]
/isi!/IsI1[:c]
/isi!/IsI![:c]
/isi!/IsI|[:c]
/isi!/lsl1[:c]
/isi!/lsl7[:c]
/isi!/lsl|[:c]
/isi!/lsl![:c]
/isi!/Lsl1[:c]
/isi!/Lsl7[:c]
/isi!/Lsl|[:c]
/isi!/Lsl![:c]
/isi!/oso0[:c]
/isi!/OsO0[:c]
/isi!/sss$[:c]
/isi!/sss5[:c]
/isi!/SsS$[:c]
/isi!/SsS5[:c]
/isi!/tst+[:c]
/isi!/TsT+[:c]
/isi!/1s1![:c]
/isi!/1s1i[:c]
/isi!/1s1I[:c]
/isi!/1s1|[:c]
/isi!/0s0o[:c]
/isi!/0s0O[:c]
/isi!/3s3e[:c]
/isi!/3s3E[:c]
/isi!/4s4a[:c]
/isi!/4s4A[:c]
/isi!/5s5s[:c]
/isi!/5s5S[:c]
/isi!/7s7l[:c]
/isi!/7s7L[:c]
/isi!/8s8b[:c]
/isi!/8s8B[:c]
/isi|/asa@[:c]
/isi|/asa4[:c]
/isi|/AsA4[:c]
/isi|/AsA@[:c]
/isi|/bsb8[:c]
/isi|/BsB8[:c]
/isi|/ese3[:c]
/isi|/EsE3[:c]
/isi|/isi1[:c]
/isi|/isi![:c]
/isi|/IsI1[:c]
/isi|/IsI![:c]
/isi|/IsI|[:c]
/isi|/lsl1[:c]
/isi|/lsl7[:c]
/isi|/lsl|[:c]
/isi|/lsl![:c]
/isi|/Lsl1[:c]
/isi|/Lsl7[:c]
/isi|/Lsl|[:c]
/isi|/Lsl![:c]
/isi|/oso0[:c]
/isi|/OsO0[:c]
/isi|/sss$[:c]
/isi|/sss5[:c]
/isi|/SsS$[:c]
/isi|/SsS5[:c]
/isi|/tst+[:c]
/isi|/TsT+[:c]
/isi|/1s1![:c]
/isi|/1s1i[:c]
/isi|/1s1I[:c]
/isi|/1s1|[:c]
/isi|/0s0o[:c]
/isi|/0s0O[:c]
/isi|/3s3e[:c]
/isi|/3s3E[:c]
/isi|/4s4a[:c]
/isi|/4s4A[:c]
/isi|/5s5s[:c]
/isi|/5s5S[:c]
/isi|/7s7l[:c]
/isi|/7s7L[:c]
/isi|/8s8b[:c]
/isi|/8s8B[:c]
/IsI1/asa@[:c]
/IsI1/asa4[:c]
/IsI1/AsA4[:c]
/IsI1/AsA@[:c]
/IsI1/bsb8[:c]
/IsI1/BsB8[:c]
/IsI1/ese3[:c]
/IsI1/EsE3[:c]
/IsI1/isi1[:c]
/IsI1/isi![:c]
/IsI1/isi|[:c]
/IsI1/lsl1[:c]
/IsI1/lsl7[:c]
/IsI1/lsl|[:c]
/IsI1/lsl![:c]
/IsI1/Lsl1[:c]
/IsI1/Lsl7[:c]
/IsI1/Lsl|[:c]
/IsI1/Lsl![:c]
/IsI1/oso0[:c]
/IsI1/OsO0[:c]
/IsI1/sss$[:c]
/IsI1/sss5[:c]
/IsI1/SsS$[:c]
/IsI1/SsS5[:c]
/IsI1/tst+[:c]
/IsI1/TsT+[:c]
/IsI1/1s1![:c]
/IsI1/1s1i[:c]
/IsI1/1s1I[:c]
/IsI1/1s1|[:c]
/IsI1/0s0o[:c]
/IsI1/0s0O[:c]
/IsI1/3s3e[:c]
/IsI1/3s3E[:c]
/IsI1/4s4a[:c]
/IsI1/4s4A[:c]
/IsI1/5s5s[:c]
/IsI1/5s5S[:c]
/IsI1/7s7l[:c]
/IsI1/7s7L[:c]
/IsI1/8s8b[:c]
/IsI1/8s8B[:c]
/IsI!/asa@[:c]
/IsI!/asa4[:c]
/IsI!/AsA4[:c]
/IsI!/AsA@[:c]
/IsI!/bsb8[:c]
/IsI!/BsB8[:c]
/IsI!/ese3[:c]
/IsI!/EsE3[:c]
/IsI!/isi1[:c]
/IsI!/isi![:c]
/IsI!/isi|[:c]
/IsI!/IsI1[:c]
/IsI!/IsI|[:c]
/IsI!/lsl1[:c]
/IsI!/lsl7[:c]
/IsI!/lsl|[:c]
/IsI!/lsl![:c]
/IsI!/Lsl1[:c]
/IsI!/Lsl7[:c]
/IsI!/Lsl|[:c]
/IsI!/Lsl![:c]
/IsI!/oso0[:c]
/IsI!/OsO0[:c]
/IsI!/sss$[:c]
/IsI!/sss5[:c]
/IsI!/SsS$[:c]
/IsI!/SsS5[:c]
/IsI!/tst+[:c]
/IsI!/TsT+[:c]
/IsI!/1s1![:c]
/IsI!/1s1i[:c]
/IsI!/1s1I[:c]
/IsI!/1s1|[:c]
/IsI!/0s0o[:c]
/IsI!/0s0O[:c]
/IsI!/3s3e[:c]
/IsI!/3s3E[:c]
/IsI!/4s4a[:c]
/IsI!/4s4A[:c]
/IsI!/5s5s[:c]
/IsI!/5s5S[:c]
/IsI!/7s7l[:c]
/IsI!/7s7L[:c]
/IsI!/8s8b[:c]
/IsI!/8s8B[:c]
/IsI|/asa@[:c]
/IsI|/asa4[:c]
/IsI|/AsA4[:c]
/IsI|/AsA@[:c]
/IsI|/bsb8[:c]
/IsI|/BsB8[:c]
/IsI|/ese3[:c]
/IsI|/EsE3[:c]
/IsI|/isi1[:c]
/IsI|/isi![:c]
/IsI|/isi|[:c]
/IsI|/IsI1[:c]
/IsI|/IsI![:c]
/IsI|/lsl1[:c]
/IsI|/lsl7[:c]
/IsI|/lsl|[:c]
/IsI|/lsl![:c]
/IsI|/Lsl1[:c]
/IsI|/Lsl7[:c]
/IsI|/Lsl|[:c]
/IsI|/Lsl![:c]
/IsI|/oso0[:c]
/IsI|/OsO0[:c]
/IsI|/sss$[:c]
/IsI|/sss5[:c]
/IsI|/SsS$[:c]
/IsI|/SsS5[:c]
/IsI|/tst+[:c]
/IsI|/TsT+[:c]
/IsI|/1s1![:c]
/IsI|/1s1i[:c]
/IsI|/1s1I[:c]
/IsI|/1s1|[:c]
/IsI|/0s0o[:c]
/IsI|/0s0O[:c]
/IsI|/3s3e[:c]
/IsI|/3s3E[:c]
/IsI|/4s4a[:c]
/IsI|/4s4A[:c]
/IsI|/5s5s[:c]
/IsI|/5s5S[:c]
/IsI|/7s7l[:c]
/IsI|/7s7L[:c]
/IsI|/8s8b[:c]
/IsI|/8s8B[:c]
/lsl1/asa@[:c]
/lsl1/asa4[:c]
/lsl1/AsA4[:c]
/lsl1/AsA@[:c]
/lsl1/bsb8[:c]
/lsl1/BsB8[:c]
/lsl1/ese3[:c]
/lsl1/EsE3[:c]
/lsl1/isi1[:c]
/lsl1/isi![:c]
/lsl1/isi|[:c]
/lsl1/IsI1[:c]
/lsl1/IsI![:c]
/lsl1/IsI|[:c]
/lsl1/Lsl1[:c]
/lsl1/Lsl7[:c]
/lsl1/Lsl|[:c]
/lsl1/Lsl![:c]
/lsl1/oso0[:c]
/lsl1/OsO0[:c]
/lsl1/sss$[:c]
/lsl1/sss5[:c]
/lsl1/SsS$[:c]
/lsl1/SsS5[:c]
/lsl1/tst+[:c]
/lsl1/TsT+[:c]
/lsl1/1s1![:c]
/lsl1/1s1i[:c]
/lsl1/1s1I[:c]
/lsl1/1s1|[:c]
/lsl1/0s0o[:c]
/lsl1/0s0O[:c]
/lsl1/3s3e[:c]
/lsl1/3s3E[:c]
/lsl1/4s4a[:c]
/lsl1/4s4A[:c]
/lsl1/5s5s[:c]
/lsl1/5s5S[:c]
/lsl1/7s7l[:c]
/lsl1/7s7L[:c]
/lsl1/8s8b[:c]
/lsl1/8s8B[:c]
/lsl7/asa@[:c]
/lsl7/asa4[:c]
/lsl7/AsA4[:c]
/lsl7/AsA@[:c]
/lsl7/bsb8[:c]
/lsl7/BsB8[:c]
/lsl7/ese3[:c]
/lsl7/EsE3[:c]
/lsl7/isi1[:c]
/lsl7/isi![:c]
/lsl7/isi|[:c]
/lsl7/IsI1[:c]
/lsl7/IsI![:c]
/lsl7/IsI|[:c]
/lsl7/lsl1[:c]
/lsl7/lsl|[:c]
/lsl7/lsl![:c]
/lsl7/Lsl1[:c]
/lsl7/Lsl7[:c]
/lsl7/Lsl|[:c]
/lsl7/Lsl![:c]
/lsl7/oso0[:c]
/lsl7/OsO0[:c]
/lsl7/sss$[:c]
/lsl7/sss5[:c]
/lsl7/SsS$[:c]
/lsl7/SsS5[:c]
/lsl7/tst+[:c]
/lsl7/TsT+[:c]
/lsl7/1s1![:c]
/lsl7/1s1i[:c]
/lsl7/1s1I[:c]
/lsl7/1s1|[:c]
/lsl7/0s0o[:c]
/lsl7/0s0O[:c]
/lsl7/3s3e[:c]
/lsl7/3s3E[:c]
/lsl7/4s4a[:c]
/lsl7/4s4A[:c]
/lsl7/5s5s[:c]
/lsl7/5s5S[:c]
/lsl7/7s7l[:c]
/lsl7/7s7L[:c]
/lsl7/8s8b[:c]
/lsl7/8s8B[:c]
/lsl|/asa@[:c]
/lsl|/asa4[:c]
/lsl|/AsA4[:c]
/lsl|/AsA@[:c]
/lsl|/bsb8[:c]
/lsl|/BsB8[:c]
/lsl|/ese3[:c]
/lsl|/EsE3[:c]
/lsl|/isi1[:c]
/lsl|/isi![:c]
/lsl|/isi|[:c]
/lsl|/IsI1[:c]
/lsl|/IsI![:c]
/lsl|/IsI|[:c]
/lsl|/lsl1[:c]
/lsl|/lsl7[:c]
/lsl|/lsl![:c]
/lsl|/Lsl1[:c]
/lsl|/Lsl7[:c]
/lsl|/Lsl|[:c]
/lsl|/Lsl![:c]
/lsl|/oso0[:c]
/lsl|/OsO0[:c]
/lsl|/sss$[:c]
/lsl|/sss5[:c]
/lsl|/SsS$[:c]
/lsl|/SsS5[:c]
/lsl|/tst+[:c]
/lsl|/TsT+[:c]
/lsl|/1s1![:c]
/lsl|/1s1i[:c]
/lsl|/1s1I[:c]
/lsl|/1s1|[:c]
/lsl|/0s0o[:c]
/lsl|/0s0O[:c]
/lsl|/3s3e[:c]
/lsl|/3s3E[:c]
/lsl|/4s4a[:c]
/lsl|/4s4A[:c]
/lsl|/5s5s[:c]
/lsl|/5s5S[:c]
/lsl|/7s7l[:c]
/lsl|/7s7L[:c]
/lsl|/8s8b[:c]
/lsl|/8s8B[:c]
/lsl!/asa@[:c]
/lsl!/asa4[:c]
/lsl!/AsA4[:c]
/lsl!/AsA@[:c]
/lsl!/bsb8[:c]
/lsl!/BsB8[:c]
/lsl!/ese3[:c]
/lsl!/EsE3[:c]
/lsl!/isi1[:c]
/lsl!/isi![:c]
/lsl!/isi|[:c]
/lsl!/IsI1[:c]
/lsl!/IsI![:c]
/lsl!/IsI|[:c]
/lsl!/lsl1[:c]
/lsl!/lsl7[:c]
/lsl!/lsl|[:c]
/lsl!/Lsl1[:c]
/lsl!/Lsl7[:c]
/lsl!/Lsl|[:c]
/lsl!/Lsl![:c]
/lsl!/oso0[:c]
/lsl!/OsO0[:c]
/lsl!/sss$[:c]
/lsl!/sss5[:c]
/lsl!/SsS$[:c]
/lsl!/SsS5[:c]
/lsl!/tst+[:c]
/lsl!/TsT+[:c]
/lsl!/1s1![:c]
/lsl!/1s1i[:c]
/lsl!/1s1I[:c]
/lsl!/1s1|[:c]
/lsl!/0s0o[:c]
/lsl!/0s0O[:c]
/lsl!/3s3e[:c]
/lsl!/3s3E[:c]
/lsl!/4s4a[:c]
/lsl!/4s4A[:c]
/lsl!/5s5s[:c]
/lsl!/5s5S[:c]
/lsl!/7s7l[:c]
/lsl!/7s7L[:c]
/lsl!/8s8b[:c]
/lsl!/8s8B[:c]
/Lsl1/asa@[:c]
/Lsl1/asa4[:c]
/Lsl1/AsA4[:c]
/Lsl1/AsA@[:c]
/Lsl1/bsb8[:c]
/Lsl1/BsB8[:c]
/Lsl1/ese3[:c]
/Lsl1/EsE3[:c]
/Lsl1/isi1[:c]
/Lsl1/isi![:c]
/Lsl1/isi|[:c]
/Lsl1/IsI1[:c]
/Lsl1/IsI![:c]
/Lsl1/IsI|[:c]
/Lsl1/lsl1[:c]
/Lsl1/lsl7[:c]
/Lsl1/lsl|[:c]
/Lsl1/lsl![:c]
/Lsl1/oso0[:c]
/Lsl1/OsO0[:c]
/Lsl1/sss$[:c]
/Lsl1/sss5[:c]
/Lsl1/SsS$[:c]
/Lsl1/SsS5[:c]
/Lsl1/tst+[:c]
/Lsl1/TsT+[:c]
/Lsl1/1s1![:c]
/Lsl1/1s1i[:c]
/Lsl1/1s1I[:c]
/Lsl1/1s1|[:c]
/Lsl1/0s0o[:c]
/Lsl1/0s0O[:c]
/Lsl1/3s3e[:c]
/Lsl1/3s3E[:c]
/Lsl1/4s4a[:c]
/Lsl1/4s4A[:c]
/Lsl1/5s5s[:c]
/Lsl1/5s5S[:c]
/Lsl1/7s7l[:c]
/Lsl1/7s7L[:c]
/Lsl1/8s8b[:c]
/Lsl1/8s8B[:c]
/Lsl7/asa@[:c]
/Lsl7/asa4[:c]
/Lsl7/AsA4[:c]
/Lsl7/AsA@[:c]
/Lsl7/bsb8[:c]
/Lsl7/BsB8[:c]
/Lsl7/ese3[:c]
/Lsl7/EsE3[:c]
/Lsl7/isi1[:c]
/Lsl7/isi![:c]
/Lsl7/isi|[:c]
/Lsl7/IsI1[:c]
/Lsl7/IsI![:c]
/Lsl7/IsI|[:c]
/Lsl7/lsl1[:c]
/Lsl7/lsl7[:c]
/Lsl7/lsl|[:c]
/Lsl7/lsl![:c]
/Lsl7/Lsl1[:c]
/Lsl7/Lsl|[:c]
/Lsl7/Lsl![:c]
/Lsl7/oso0[:c]
/Lsl7/OsO0[:c]
/Lsl7/sss$[:c]
/Lsl7/sss5[:c]
/Lsl7/SsS$[:c]
/Lsl7/SsS5[:c]
/Lsl7/tst+[:c]
/Lsl7/TsT+[:c]
/Lsl7/1s1![:c]
/Lsl7/1s1i[:c]
/Lsl7/1s1I[:c]
/Lsl7/1s1|[:c]
/Lsl7/0s0o[:c]
/Lsl7/0s0O[:c]
/Lsl7/3s3e[:c]
/Lsl7/3s3E[:c]
/Lsl7/4s4a[:c]
/Lsl7/4s4A[:c]
/Lsl7/5s5s[:c]
/Lsl7/5s5S[:c]
/Lsl7/7s7l[:c]
/Lsl7/7s7L[:c]
/Lsl7/8s8b[:c]
/Lsl7/8s8B[:c]
/Lsl|/asa@[:c]
/Lsl|/asa4[:c]
/Lsl|/AsA4[:c]
/Lsl|/AsA@[:c]
/Lsl|/bsb8[:c]
/Lsl|/BsB8[:c]
/Lsl|/ese3[:c]
/Lsl|/EsE3[:c]
/Lsl|/isi1[:c]
/Lsl|/isi![:c]
/Lsl|/isi|[:c]
/Lsl|/IsI1[:c]
/Lsl|/IsI![:c]
/Lsl|/IsI|[:c]
/Lsl|/lsl1[:c]
/Lsl|/lsl7[:c]
/Lsl|/lsl|[:c]
/Lsl|/lsl![:c]
/Lsl|/oso0[:c]
/Lsl|/OsO0[:c]
/Lsl|/sss$[:c]
/Lsl|/sss5[:c]
/Lsl|/SsS$[:c]
/Lsl|/SsS5[:c]
/Lsl|/tst+[:c]
/Lsl|/TsT+[:c]
/Lsl|/1s1![:c]
/Lsl|/1s1i[:c]
/Lsl|/1s1I[:c]
/Lsl|/1s1|[:c]
/Lsl|/0s0o[:c]
/Lsl|/0s0O[:c]
/Lsl|/3s3e[:c]
/Lsl|/3s3E[:c]
/Lsl|/4s4a[:c]
/Lsl|/4s4A[:c]
/Lsl|/5s5s[:c]
/Lsl|/5s5S[:c]
/Lsl|/7s7l[:c]
/Lsl|/7s7L[:c]
/Lsl|/8s8b[:c]
/Lsl|/8s8B[:c]
/Lsl!/asa@[:c]
/Lsl!/asa4[:c]
/Lsl!/AsA4[:c]
/Lsl!/AsA@[:c]
/Lsl!/bsb8[:c]
/Lsl!/BsB8[:c]
/Lsl!/ese3[:c]
/Lsl!/EsE3[:c]
/Lsl!/isi1[:c]
/Lsl!/isi![:c]
/Lsl!/isi|[:c]
/Lsl!/IsI1[:c]
/Lsl!/IsI![:c]
/Lsl!/IsI|[:c]
/Lsl!/lsl1[:c]
/Lsl!/lsl7[:c]
/Lsl!/lsl|[:c]
/Lsl!/lsl![:c]
/Lsl!/oso0[:c]
/Lsl!/OsO0[:c]
/Lsl!/sss$[:c]
/Lsl!/sss5[:c]
/Lsl!/SsS$[:c]
/Lsl!/SsS5[:c]
/Lsl!/tst+[:c]
/Lsl!/TsT+[:c]
/Lsl!/1s1![:c]
/Lsl!/1s1i[:c]
/Lsl!/1s1I[:c]
/Lsl!/1s1|[:c]
/Lsl!/0s0o[:c]
/Lsl!/0s0O[:c]
/Lsl!/3s3e[:c]
/Lsl!/3s3E[:c]
/Lsl!/4s4a[:c]
/Lsl!/4s4A[:c]
/Lsl!/5s5s[:c]
/Lsl!/5s5S[:c]
/Lsl!/7s7l[:c]
/Lsl!/7s7L[:c]
/Lsl!/8s8b[:c]
/Lsl!/8s8B[:c]
/oso0/asa@[:c]
/oso0/asa4[:c]
/oso0/AsA4[:c]
/oso0/AsA@[:c]
/oso0/bsb8[:c]
/oso0/BsB8[:c]
/oso0/ese3[:c]
/oso0/EsE3[:c]
/oso0/isi1[:c]
/oso0/isi![:c]
/oso0/isi|[:c]
/oso0/IsI1[:c]
/oso0/IsI![:c]
/oso0/IsI|[:c]
/oso0/lsl1[:c]
/oso0/lsl7[:c]
/oso0/lsl|[:c]
/oso0/lsl![:c]
/oso0/Lsl1[:c]
/oso0/Lsl7[:c]
/oso0/Lsl|[:c]
/oso0/Lsl![:c]
/oso0/OsO0[:c]
/oso0/sss$[:c]
/oso0/sss5[:c]
/oso0/SsS$[:c]
/oso0/SsS5[:c]
/oso0/tst+[:c]
/oso0/TsT+[:c]
/oso0/1s1![:c]
/oso0/1s1i[:c]
/oso0/1s1I[:c]
/oso0/1s1|[:c]
/oso0/0s0o[:c]
/oso0/0s0O[:c]
/oso0/3s3e[:c]
/oso0/3s3E[:c]
/oso0/4s4a[:c]
/oso0/4s4A[:c]
/oso0/5s5s[:c]
/oso0/5s5S[:c]
/oso0/7s7l[:c]
/oso0/7s7L[:c]
/oso0/8s8b[:c]
/oso0/8s8B[:c]
/OsO0/asa@[:c]
/OsO0/asa4[:c]
/OsO0/AsA4[:c]
/OsO0/AsA@[:c]
/OsO0/bsb8[:c]
/OsO0/BsB8[:c]
/OsO0/ese3[:c]
/OsO0/EsE3[:c]
/OsO0/isi1[:c]
/OsO0/isi![:c]
/OsO0/isi|[:c]
/OsO0/IsI1[:c]
/OsO0/IsI![:c]
/OsO0/IsI|[:c]
/OsO0/lsl1[:c]
/OsO0/lsl7[:c]
/OsO0/lsl|[:c]
/OsO0/lsl![:c]
/OsO0/Lsl1[:c]
/OsO0/Lsl7[:c]
/OsO0/Lsl|[:c]
/OsO0/Lsl![:c]
/OsO0/oso0[:c]
/OsO0/sss$[:c]
/OsO0/sss5[:c]
/OsO0/SsS$[:c]
/OsO0/SsS5[:c]
/OsO0/tst+[:c]
/OsO0/TsT+[:c]
/OsO0/1s1![:c]
/OsO0/1s1i[:c]
/OsO0/1s1I[:c]
/OsO0/1s1|[:c]
/OsO0/0s0o[:c]
/OsO0/0s0O[:c]
/OsO0/3s3e[:c]
/OsO0/3s3E[:c]
/OsO0/4s4a[:c]
/OsO0/4s4A[:c]
/OsO0/5s5s[:c]
/OsO0/5s5S[:c]
/OsO0/7s7l[:c]
/OsO0/7s7L[:c]
/OsO0/8s8b[:c]
/OsO0/8s8B[:c]
/sss$/asa@[:c]
/sss$/asa4[:c]
/sss$/AsA4[:c]
/sss$/AsA@[:c]
/sss$/bsb8[:c]
/sss$/BsB8[:c]
/sss$/ese3[:c]
/sss$/EsE3[:c]
/sss$/isi1[:c]
/sss$/isi![:c]
/sss$/isi|[:c]
/sss$/IsI1[:c]
/sss$/IsI![:c]
/sss$/IsI|[:c]
/sss$/lsl1[:c]
/sss$/lsl7[:c]
/sss$/lsl|[:c]
/sss$/lsl![:c]
/sss$/Lsl1[:c]
/sss$/Lsl7[:c]
/sss$/Lsl|[:c]
/sss$/Lsl![:c]
/sss$/oso0[:c]
/sss$/OsO0[:c]
/sss$/SsS$[:c]
/sss$/SsS5[:c]
/sss$/tst+[:c]
/sss$/TsT+[:c]
/sss$/1s1![:c]
/sss$/1s1i[:c]
/sss$/1s1I[:c]
/sss$/1s1|[:c]
/sss$/0s0o[:c]
/sss$/0s0O[:c]
/sss$/3s3e[:c]
/sss$/3s3E[:c]
/sss$/4s4a[:c]
/sss$/4s4A[:c]
/sss$/5s5s[:c]
/sss$/5s5S[:c]
/sss$/7s7l[:c]
/sss$/7s7L[:c]
/sss$/8s8b[:c]
/sss$/8s8B[:c]
/sss5/asa@[:c]
/sss5/asa4[:c]
/sss5/AsA4[:c]
/sss5/AsA@[:c]
/sss5/bsb8[:c]
/sss5/BsB8[:c]
/sss5/ese3[:c]
/sss5/EsE3[:c]
/sss5/isi1[:c]
/sss5/isi![:c]
/sss5/isi|[:c]
/sss5/IsI1[:c]
/sss5/IsI![:c]
/sss5/IsI|[:c]
/sss5/lsl1[:c]
/sss5/lsl7[:c]
/sss5/lsl|[:c]
/sss5/lsl![:c]
/sss5/Lsl1[:c]
/sss5/Lsl7[:c]
/sss5/Lsl|[:c]
/sss5/Lsl![:c]
/sss5/oso0[:c]
/sss5/OsO0[:c]
/sss5/SsS$[:c]
/sss5/SsS5[:c]
/sss5/tst+[:c]
/sss5/TsT+[:c]
/sss5/1s1![:c]
/sss5/1s1i[:c]
/sss5/1s1I[:c]
/sss5/1s1|[:c]
/sss5/0s0o[:c]
/sss5/0s0O[:c]
/sss5/3s3e[:c]
/sss5/3s3E[:c]
/sss5/4s4a[:c]
/sss5/4s4A[:c]
/sss5/5s5s[:c]
/sss5/5s5S[:c]
/sss5/7s7l[:c]
/sss5/7s7L[:c]
/sss5/8s8b[:c]
/sss5/8s8B[:c]
/SsS$/asa@[:c]
/SsS$/asa4[:c]
/SsS$/AsA4[:c]
/SsS$/AsA@[:c]
/SsS$/bsb8[:c]
/SsS$/BsB8[:c]
/SsS$/ese3[:c]
/SsS$/EsE3[:c]
/SsS$/isi1[:c]
/SsS$/isi![:c]
/SsS$/isi|[:c]
/SsS$/IsI1[:c]
/SsS$/IsI![:c]
/SsS$/IsI|[:c]
/SsS$/lsl1[:c]
/SsS$/lsl7[:c]
/SsS$/lsl|[:c]
/SsS$/lsl![:c]
/SsS$/Lsl1[:c]
/SsS$/Lsl7[:c]
/SsS$/Lsl|[:c]
/SsS$/Lsl![:c]
/SsS$/oso0[:c]
/SsS$/OsO0[:c]
/SsS$/sss$[:c]
/SsS$/sss5[:c]
/SsS$/tst+[:c]
/SsS$/TsT+[:c]
/SsS$/1s1![:c]
/SsS$/1s1i[:c]
/SsS$/1s1I[:c]
/SsS$/1s1|[:c]
/SsS$/0s0o[:c]
/SsS$/0s0O[:c]
/SsS$/3s3e[:c]
/SsS$/3s3E[:c]
/SsS$/4s4a[:c]
/SsS$/4s4A[:c]
/SsS$/5s5s[:c]
/SsS$/5s5S[:c]
/SsS$/7s7l[:c]
/SsS$/7s7L[:c]
/SsS$/8s8b[:c]
/SsS$/8s8B[:c]
/SsS5/asa@[:c]
/SsS5/asa4[:c]
/SsS5/AsA4[:c]
/SsS5/AsA@[:c]
/SsS5/bsb8[:c]
/SsS5/BsB8[:c]
/SsS5/ese3[:c]
/SsS5/EsE3[:c]
/SsS5/isi1[:c]
/SsS5/isi![:c]
/SsS5/isi|[:c]
/SsS5/IsI1[:c]
/SsS5/IsI![:c]
/SsS5/IsI|[:c]
/SsS5/lsl1[:c]
/SsS5/lsl7[:c]
/SsS5/lsl|[:c]
/SsS5/lsl![:c]
/SsS5/Lsl1[:c]
/SsS5/Lsl7[:c]
/SsS5/Lsl|[:c]
/SsS5/Lsl![:c]
/SsS5/oso0[:c]
/SsS5/OsO0[:c]
/SsS5/sss$[:c]
/SsS5/sss5[:c]
/SsS5/tst+[:c]
/SsS5/TsT+[:c]
/SsS5/1s1![:c]
/SsS5/1s1i[:c]
/SsS5/1s1I[:c]
/SsS5/1s1|[:c]
/SsS5/0s0o[:c]
/SsS5/0s0O[:c]
/SsS5/3s3e[:c]
/SsS5/3s3E[:c]
/SsS5/4s4a[:c]
/SsS5/4s4A[:c]
/SsS5/5s5s[:c]
/SsS5/5s5S[:c]
/SsS5/7s7l[:c]
/SsS5/7s7L[:c]
/SsS5/8s8b[:c]
/SsS5/8s8B[:c]
/tst+/asa@[:c]
/tst+/asa4[:c]
/tst+/AsA4[:c]
/tst+/AsA@[:c]
/tst+/bsb8[:c]
/tst+/BsB8[:c]
/tst+/ese3[:c]
/tst+/EsE3[:c]
/tst+/isi1[:c]
/tst+/isi![:c]
/tst+/isi|[:c]
/tst+/IsI1[:c]
/tst+/IsI![:c]
/tst+/IsI|[:c]
/tst+/lsl1[:c]
/tst+/lsl7[:c]
/tst+/lsl|[:c]
/tst+/lsl![:c]
/tst+/Lsl1[:c]
/tst+/Lsl7[:c]
/tst+/Lsl|[:c]
/tst+/Lsl![:c]
/tst+/oso0[:c]
/tst+/OsO0[:c]
/tst+/sss$[:c]
/tst+/sss5[:c]
/tst+/SsS$[:c]
/tst+/SsS5[:c]
/tst+/TsT+[:c]
/tst+/1s1![:c]
/tst+/1s1i[:c]
/tst+/1s1I[:c]
/tst+/1s1|[:c]
/tst+/0s0o[:c]
/tst+/0s0O[:c]
/tst+/3s3e[:c]
/tst+/3s3E[:c]
/tst+/4s4a[:c]
/tst+/4s4A[:c]
/tst+/5s5s[:c]
/tst+/5s5S[:c]
/tst+/7s7l[:c]
/tst+/7s7L[:c]
/tst+/8s8b[:c]
/tst+/8s8B[:c]
/TsT+/asa@[:c]
/TsT+/asa4[:c]
/TsT+/AsA4[:c]
/TsT+/AsA@[:c]
/TsT+/bsb8[:c]
/TsT+/BsB8[:c]
/TsT+/ese3[:c]
/TsT+/EsE3[:c]
/TsT+/isi1[:c]
/TsT+/isi![:c]
/TsT+/isi|[:c]
/TsT+/IsI1[:c]
/TsT+/IsI![:c]
/TsT+/IsI|[:c]
/TsT+/lsl1[:c]
/TsT+/lsl7[:c]
/TsT+/lsl|[:c]
/TsT+/lsl![:c]
/TsT+/Lsl1[:c]
/TsT+/Lsl7[:c]
/TsT+/Lsl|[:c]
/TsT+/Lsl![:c]
/TsT+/oso0[:c]
/TsT+/OsO0[:c]
/TsT+/sss$[:c]
/TsT+/sss5[:c]
/TsT+/SsS$[:c]
/TsT+/SsS5[:c]
/TsT+/tst+[:c]
/TsT+/1s1![:c]
/TsT+/1s1i[:c]
/TsT+/1s1I[:c]
/TsT+/1s1|[:c]
/TsT+/0s0o[:c]
/TsT+/0s0O[:c]
/TsT+/3s3e[:c]
/TsT+/3s3E[:c]
/TsT+/4s4a[:c]
/TsT+/4s4A[:c]
/TsT+/5s5s[:c]
/TsT+/5s5S[:c]
/TsT+/7s7l[:c]
/TsT+/7s7L[:c]
/TsT+/8s8b[:c]
/TsT+/8s8B[:c]
/1s1!/asa@[:c]
/1s1!/asa4[:c]
/1s1!/AsA4[:c]
/1s1!/AsA@[:c]
/1s1!/bsb8[:c]
/1s1!/BsB8[:c]
/1s1!/ese3[:c]
/1s1!/EsE3[:c]
/1s1!/isi1[:c]
/1s1!/isi![:c]
/1s1!/isi|[:c]
/1s1!/IsI1[:c]
/1s1!/IsI![:c]
/1s1!/IsI|[:c]
/1s1!/lsl1[:c]
/1s1!/lsl7[:c]
/1s1!/lsl|[:c]
/1s1!/lsl![:c]
/1s1!/Lsl1[:c]
/1s1!/Lsl7[:c]
/1s1!/Lsl|[:c]
/1s1!/Lsl![:c]
/1s1!/oso0[:c]
/1s1!/OsO0[:c]
/1s1!/sss$[:c]
/1s1!/sss5[:c]
/1s1!/SsS$[:c]
/1s1!/SsS5[:c]
/1s1!/tst+[:c]
/1s1!/TsT+[:c]
/1s1!/0s0o[:c]
/1s1!/0s0O[:c]
/1s1!/3s3e[:c]
/1s1!/3s3E[:c]
/1s1!/4s4a[:c]
/1s1!/4s4A[:c]
/1s1!/5s5s[:c]
/1s1!/5s5S[:c]
/1s1!/7s7l[:c]
/1s1!/7s7L[:c]
/1s1!/8s8b[:c]
/1s1!/8s8B[:c]
/1s1i/asa@[:c]
/1s1i/asa4[:c]
/1s1i/AsA4[:c]
/1s1i/AsA@[:c]
/1s1i/bsb8[:c]
/1s1i/BsB8[:c]
/1s1i/ese3[:c]
/1s1i/EsE3[:c]
/1s1i/isi1[:c]
/1s1i/isi![:c]
/1s1i/isi|[:c]
/1s1i/IsI1[:c]
/1s1i/IsI![:c]
/1s1i/IsI|[:c]
/1s1i/lsl1[:c]
/1s1i/lsl7[:c]
/1s1i/lsl|[:c]
/1s1i/lsl![:c]
/1s1i/Lsl1[:c]
/1s1i/Lsl7[:c]
/1s1i/Lsl|[:c]
/1s1i/Lsl![:c]
/1s1i/oso0[:c]
/1s1i/OsO0[:c]
/1s1i/sss$[:c]
/1s1i/sss5[:c]
/1s1i/SsS$[:c]
/1s1i/SsS5[:c]
/1s1i/tst+[:c]
/1s1i/TsT+[:c]
/1s1i/0s0o[:c]
/1s1i/0s0O[:c]
/1s1i/3s3e[:c]
/1s1i/3s3E[:c]
/1s1i/4s4a[:c]
/1s1i/4s4A[:c]
/1s1i/5s5s[:c]
/1s1i/5s5S[:c]
/1s1i/7s7l[:c]
/1s1i/7s7L[:c]
/1s1i/8s8b[:c]
/1s1i/8s8B[:c]
/1s1I/asa@[:c]
/1s1I/asa4[:c]
/1s1I/AsA4[:c]
/1s1I/AsA@[:c]
/1s1I/bsb8[:c]
/1s1I/BsB8[:c]
/1s1I/ese3[:c]
/1s1I/EsE3[:c]
/1s1I/isi1[:c]
/1s1I/isi![:c]
/1s1I/isi|[:c]
/1s1I/IsI1[:c]
/1s1I/IsI![:c]
/1s1I/IsI|[:c]
/1s1I/lsl1[:c]
/1s1I/lsl7[:c]
/1s1I/lsl|[:c]
/1s1I/lsl![:c]
/1s1I/Lsl1[:c]
/1s1I/Lsl7[:c]
/1s1I/Lsl|[:c]
/1s1I/Lsl![:c]
/1s1I/oso0[:c]
/1s1I/OsO0[:c]
/1s1I/sss$[:c]
/1s1I/sss5[:c]
/1s1I/SsS$[:c]
/1s1I/SsS5[:c]
/1s1I/tst+[:c]
/1s1I/TsT+[:c]
/1s1I/1s1![:c]
/1s1I/1s1i[:c]
/1s1I/1s1|[:c]
/1s1I/0s0o[:c]
/1s1I/0s0O[:c]
/1s1I/3s3e[:c]
/1s1I/3s3E[:c]
/1s1I/4s4a[:c]
/1s1I/4s4A[:c]
/1s1I/5s5s[:c]
/1s1I/5s5S[:c]
/1s1I/7s7l[:c]
/1s1I/7s7L[:c]
/1s1I/8s8b[:c]
/1s1I/8s8B[:c]
/1s1|/asa@[:c]
/1s1|/asa4[:c]
/1s1|/AsA4[:c]
/1s1|/AsA@[:c]
/1s1|/bsb8[:c]
/1s1|/BsB8[:c]
/1s1|/ese3[:c]
/1s1|/EsE3[:c]
/1s1|/isi1[:c]
/1s1|/isi![:c]
/1s1|/isi|[:c]
/1s1|/IsI1[:c]
/1s1|/IsI![:c]
/1s1|/IsI|[:c]
/1s1|/lsl1[:c]
/1s1|/lsl7[:c]
/1s1|/lsl|[:c]
/1s1|/lsl![:c]
/1s1|/Lsl1[:c]
/1s1|/Lsl7[:c]
/1s1|/Lsl|[:c]
/1s1|/Lsl![:c]
/1s1|/oso0[:c]
/1s1|/OsO0[:c]
/1s1|/sss$[:c]
/1s1|/sss5[:c]
/1s1|/SsS$[:c]
/1s1|/SsS5[:c]
/1s1|/tst+[:c]
/1s1|/TsT+[:c]
/1s1|/1s1![:c]
/1s1|/1s1i[:c]
/1s1|/1s1I[:c]
/1s1|/0s0o[:c]
/1s1|/0s0O[:c]
/1s1|/3s3e[:c]
/1s1|/3s3E[:c]
/1s1|/4s4a[:c]
/1s1|/4s4A[:c]
/1s1|/5s5s[:c]
/1s1|/5s5S[:c]
/1s1|/7s7l[:c]
/1s1|/7s7L[:c]
/1s1|/8s8b[:c]
/1s1|/8s8B[:c]
/0s0o/asa@[:c]
/0s0o/asa4[:c]
/0s0o/AsA4[:c]
/0s0o/AsA@[:c]
/0s0o/bsb8[:c]
/0s0o/BsB8[:c]
/0s0o/ese3[:c]
/0s0o/EsE3[:c]
/0s0o/isi1[:c]
/0s0o/isi![:c]
/0s0o/isi|[:c]
/0s0o/IsI1[:c]
/0s0o/IsI![:c]
/0s0o/IsI|[:c]
/0s0o/lsl1[:c]
/0s0o/lsl7[:c]
/0s0o/lsl|[:c]
/0s0o/lsl![:c]
/0s0o/Lsl1[:c]
/0s0o/Lsl7[:c]
/0s0o/Lsl|[:c]
/0s0o/Lsl![:c]
/0s0o/oso0[:c]
/0s0o/OsO0[:c]
/0s0o/sss$[:c]
/0s0o/sss5[:c]
/0s0o/SsS$[:c]
/0s0o/SsS5[:c]
/0s0o/tst+[:c]
/0s0o/TsT+[:c]
/0s0o/1s1![:c]
/0s0o/1s1i[:c]
/0s0o/1s1I[:c]
/0s0o/1s1|[:c]
/0s0o/3s3e[:c]
/0s0o/3s3E[:c]
/0s0o/4s4a[:c]
/0s0o/4s4A[:c]
/0s0o/5s5s[:c]
/0s0o/5s5S[:c]
/0s0o/7s7l[:c]
/0s0o/7s7L[:c]
/0s0o/8s8b[:c]
/0s0o/8s8B[:c]
/0s0O/asa@[:c]
/0s0O/asa4[:c]
/0s0O/AsA4[:c]
/0s0O/AsA@[:c]
/0s0O/bsb8[:c]
/0s0O/BsB8[:c]
/0s0O/ese3[:c]
/0s0O/EsE3[:c]
/0s0O/isi1[:c]
/0s0O/isi![:c]
/0s0O/isi|[:c]
/0s0O/IsI1[:c]
/0s0O/IsI![:c]
/0s0O/IsI|[:c]
/0s0O/lsl1[:c]
/0s0O/lsl7[:c]
/0s0O/lsl|[:c]
/0s0O/lsl![:c]
/0s0O/Lsl1[:c]
/0s0O/Lsl7[:c]
/0s0O/Lsl|[:c]
/0s0O/Lsl![:c]
/0s0O/oso0[:c]
/0s0O/OsO0[:c]
/0s0O/sss$[:c]
/0s0O/sss5[:c]
/0s0O/SsS$[:c]
/0s0O/SsS5[:c]
/0s0O/tst+[:c]
/0s0O/TsT+[:c]
/0s0O/1s1![:c]
/0s0O/1s1i[:c]
/0s0O/1s1I[:c]
/0s0O/1s1|[:c]
/0s0O/3s3e[:c]
/0s0O/3s3E[:c]
/0s0O/4s4a[:c]
/0s0O/4s4A[:c]
/0s0O/5s5s[:c]
/0s0O/5s5S[:c]
/0s0O/7s7l[:c]
/0s0O/7s7L[:c]
/0s0O/8s8b[:c]
/0s0O/8s8B[:c]
/3s3e/asa@[:c]
/3s3e/asa4[:c]
/3s3e/AsA4[:c]
/3s3e/AsA@[:c]
/3s3e/bsb8[:c]
/3s3e/BsB8[:c]
/3s3e/ese3[:c]
/3s3e/EsE3[:c]
/3s3e/isi1[:c]
/3s3e/isi![:c]
/3s3e/isi|[:c]
/3s3e/IsI1[:c]
/3s3e/IsI![:c]
/3s3e/IsI|[:c]
/3s3e/lsl1[:c]
/3s3e/lsl7[:c]
/3s3e/lsl|[:c]
/3s3e/lsl![:c]
/3s3e/Lsl1[:c]
/3s3e/Lsl7[:c]
/3s3e/Lsl|[:c]
/3s3e/Lsl![:c]
/3s3e/oso0[:c]
/3s3e/OsO0[:c]
/3s3e/sss$[:c]
/3s3e/sss5[:c]
/3s3e/SsS$[:c]
/3s3e/SsS5[:c]
/3s3e/tst+[:c]
/3s3e/TsT+[:c]
/3s3e/1s1![:c]
/3s3e/1s1i[:c]
/3s3e/1s1I[:c]
/3s3e/1s1|[:c]
/3s3e/0s0o[:c]
/3s3e/0s0O[:c]
/3s3e/4s4a[:c]
/3s3e/4s4A[:c]
/3s3e/5s5s[:c]
/3s3e/5s5S[:c]
/3s3e/7s7l[:c]
/3s3e/7s7L[:c]
/3s3e/8s8b[:c]
/3s3e/8s8B[:c]
/3s3E/asa@[:c]
/3s3E/asa4[:c]
/3s3E/AsA4[:c]
/3s3E/AsA@[:c]
/3s3E/bsb8[:c]
/3s3E/BsB8[:c]
/3s3E/ese3[:c]
/3s3E/EsE3[:c]
/3s3E/isi1[:c]
/3s3E/isi![:c]
/3s3E/isi|[:c]
/3s3E/IsI1[:c]
/3s3E/IsI![:c]
/3s3E/IsI|[:c]
/3s3E/lsl1[:c]
/3s3E/lsl7[:c]
/3s3E/lsl|[:c]
/3s3E/lsl![:c]
/3s3E/Lsl1[:c]
/3s3E/Lsl7[:c]
/3s3E/Lsl|[:c]
/3s3E/Lsl![:c]
/3s3E/oso0[:c]
/3s3E/OsO0[:c]
/3s3E/sss$[:c]
/3s3E/sss5[:c]
/3s3E/SsS$[:c]
/3s3E/SsS5[:c]
/3s3E/tst+[:c]
/3s3E/TsT+[:c]
/3s3E/1s1![:c]
/3s3E/1s1i[:c]
/3s3E/1s1I[:c]
/3s3E/1s1|[:c]
/3s3E/0s0o[:c]
/3s3E/0s0O[:c]
/3s3E/4s4a[:c]
/3s3E/4s4A[:c]
/3s3E/5s5s[:c]
/3s3E/5s5S[:c]
/3s3E/7s7l[:c]
/3s3E/7s7L[:c]
/3s3E/8s8b[:c]
/3s3E/8s8B[:c]
/4s4a/asa@[:c]
/4s4a/asa4[:c]
/4s4a/AsA4[:c]
/4s4a/AsA@[:c]
/4s4a/bsb8[:c]
/4s4a/BsB8[:c]
/4s4a/ese3[:c]
/4s4a/EsE3[:c]
/4s4a/isi1[:c]
/4s4a/isi![:c]
/4s4a/isi|[:c]
/4s4a/IsI1[:c]
/4s4a/IsI![:c]
/4s4a/IsI|[:c]
/4s4a/lsl1[:c]
/4s4a/lsl7[:c]
/4s4a/lsl|[:c]
/4s4a/lsl![:c]
/4s4a/Lsl1[:c]
/4s4a/Lsl7[:c]
/4s4a/Lsl|[:c]
/4s4a/Lsl![:c]
/4s4a/oso0[:c]
/4s4a/OsO0[:c]
/4s4a/sss$[:c]
/4s4a/sss5[:c]
/4s4a/SsS$[:c]
/4s4a/SsS5[:c]
/4s4a/tst+[:c]
/4s4a/TsT+[:c]
/4s4a/1s1![:c]
/4s4a/1s1i[:c]
/4s4a/1s1I[:c]
/4s4a/1s1|[:c]
/4s4a/0s0o[:c]
/4s4a/0s0O[:c]
/4s4a/3s3e[:c]
/4s4a/3s3E[:c]
/4s4a/5s5s[:c]
/4s4a/5s5S[:c]
/4s4a/7s7l[:c]
/4s4a/7s7L[:c]
/4s4a/8s8b[:c]
/4s4a/8s8B[:c]
/4s4A/asa@[:c]
/4s4A/asa4[:c]
/4s4A/AsA4[:c]
/4s4A/AsA@[:c]
/4s4A/bsb8[:c]
/4s4A/BsB8[:c]
/4s4A/ese3[:c]
/4s4A/EsE3[:c]
/4s4A/isi1[:c]
/4s4A/isi![:c]
/4s4A/isi|[:c]
/4s4A/IsI1[:c]
/4s4A/IsI![:c]
/4s4A/IsI|[:c]
/4s4A/lsl1[:c]
/4s4A/lsl7[:c]
/4s4A/lsl|[:c]
/4s4A/lsl![:c]
/4s4A/Lsl1[:c]
/4s4A/Lsl7[:c]
/4s4A/Lsl|[:c]
/4s4A/Lsl![:c]
/4s4A/oso0[:c]
/4s4A/OsO0[:c]
/4s4A/sss$[:c]
/4s4A/sss5[:c]
/4s4A/SsS$[:c]
/4s4A/SsS5[:c]
/4s4A/tst+[:c]
/4s4A/TsT+[:c]
/4s4A/1s1![:c]
/4s4A/1s1i[:c]
/4s4A/1s1I[:c]
/4s4A/1s1|[:c]
/4s4A/0s0o[:c]
/4s4A/0s0O[:c]
/4s4A/3s3e[:c]
/4s4A/3s3E[:c]
/4s4A/5s5s[:c]
/4s4A/5s5S[:c]
/4s4A/7s7l[:c]
/4s4A/7s7L[:c]
/4s4A/8s8b[:c]
/4s4A/8s8B[:c]
/5s5s/asa@[:c]
/5s5s/asa4[:c]
/5s5s/AsA4[:c]
/5s5s/AsA@[:c]
/5s5s/bsb8[:c]
/5s5s/BsB8[:c]
/5s5s/ese3[:c]
/5s5s/EsE3[:c]
/5s5s/isi1[:c]
/5s5s/isi![:c]
/5s5s/isi|[:c]
/5s5s/IsI1[:c]
/5s5s/IsI![:c]
/5s5s/IsI|[:c]
/5s5s/lsl1[:c]
/5s5s/lsl7[:c]
/5s5s/lsl|[:c]
/5s5s/lsl![:c]
/5s5s/Lsl1[:c]
/5s5s/Lsl7[:c]
/5s5s/Lsl|[:c]
/5s5s/Lsl![:c]
/5s5s/oso0[:c]
/5s5s/OsO0[:c]
/5s5s/sss$[:c]
/5s5s/sss5[:c]
/5s5s/SsS$[:c]
/5s5s/SsS5[:c]
/5s5s/tst+[:c]
/5s5s/TsT+[:c]
/5s5s/1s1![:c]
/5s5s/1s1i[:c]
/5s5s/1s1I[:c]
/5s5s/1s1|[:c]
/5s5s/0s0o[:c]
/5s5s/0s0O[:c]
/5s5s/3s3e[:c]
/5s5s/3s3E[:c]
/5s5s/4s4a[:c]
/5s5s/4s4A[:c]
/5s5s/7s7l[:c]
/5s5s/7s7L[:c]
/5s5s/8s8b[:c]
/5s5s/8s8B[:c]
/5s5S/asa@[:c]
/5s5S/asa4[:c]
/5s5S/AsA4[:c]
/5s5S/AsA@[:c]
/5s5S/bsb8[:c]
/5s5S/BsB8[:c]
/5s5S/ese3[:c]
/5s5S/EsE3[:c]
/5s5S/isi1[:c]
/5s5S/isi![:c]
/5s5S/isi|[:c]
/5s5S/IsI1[:c]
/5s5S/IsI![:c]
/5s5S/IsI|[:c]
/5s5S/lsl1[:c]
/5s5S/lsl7[:c]
/5s5S/lsl|[:c]
/5s5S/lsl![:c]
/5s5S/Lsl1[:c]
/5s5S/Lsl7[:c]
/5s5S/Lsl|[:c]
/5s5S/Lsl![:c]
/5s5S/oso0[:c]
/5s5S/OsO0[:c]
/5s5S/sss$[:c]
/5s5S/sss5[:c]
/5s5S/SsS$[:c]
/5s5S/SsS5[:c]
/5s5S/tst+[:c]
/5s5S/TsT+[:c]
/5s5S/1s1![:c]
/5s5S/1s1i[:c]
/5s5S/1s1I[:c]
/5s5S/1s1|[:c]
/5s5S/0s0o[:c]
/5s5S/0s0O[:c]
/5s5S/3s3e[:c]
/5s5S/3s3E[:c]
/5s5S/4s4a[:c]
/5s5S/4s4A[:c]
/5s5S/7s7l[:c]
/5s5S/7s7L[:c]
/5s5S/8s8b[:c]
/5s5S/8s8B[:c]
/7s7l/asa@[:c]
/7s7l/asa4[:c]
/7s7l/AsA4[:c]
/7s7l/AsA@[:c]
/7s7l/bsb8[:c]
/7s7l/BsB8[:c]
/7s7l/ese3[:c]
/7s7l/EsE3[:c]
/7s7l/isi1[:c]
/7s7l/isi![:c]
/7s7l/isi|[:c]
/7s7l/IsI1[:c]
/7s7l/IsI![:c]
/7s7l/IsI|[:c]
/7s7l/lsl1[:c]
/7s7l/lsl7[:c]
/7s7l/lsl|[:c]
/7s7l/lsl![:c]
/7s7l/Lsl1[:c]
/7s7l/Lsl7[:c]
/7s7l/Lsl|[:c]
/7s7l/Lsl![:c]
/7s7l/oso0[:c]
/7s7l/OsO0[:c]
/7s7l/sss$[:c]
/7s7l/sss5[:c]
/7s7l/SsS$[:c]
/7s7l/SsS5[:c]
/7s7l/tst+[:c]
/7s7l/TsT+[:c]
/7s7l/1s1![:c]
/7s7l/1s1i[:c]
/7s7l/1s1I[:c]
/7s7l/1s1|[:c]
/7s7l/0s0o[:c]
/7s7l/0s0O[:c]
/7s7l/3s3e[:c]
/7s7l/3s3E[:c]
/7s7l/4s4a[:c]
/7s7l/4s4A[:c]
/7s7l/5s5s[:c]
/7s7l/5s5S[:c]
/7s7l/8s8b[:c]
/7s7l/8s8B[:c]
/7s7L/asa@[:c]
/7s7L/asa4[:c]
/7s7L/AsA4[:c]
/7s7L/AsA@[:c]
/7s7L/bsb8[:c]
/7s7L/BsB8[:c]
/7s7L/ese3[:c]
/7s7L/EsE3[:c]
/7s7L/isi1[:c]
/7s7L/isi![:c]
/7s7L/isi|[:c]
/7s7L/IsI1[:c]
/7s7L/IsI![:c]
/7s7L/IsI|[:c]
/7s7L/lsl1[:c]
/7s7L/lsl7[:c]
/7s7L/lsl|[:c]
/7s7L/lsl![:c]
/7s7L/Lsl1[:c]
/7s7L/Lsl7[:c]
/7s7L/Lsl|[:c]
/7s7L/Lsl![:c]
/7s7L/oso0[:c]
/7s7L/OsO0[:c]
/7s7L/sss$[:c]
/7s7L/sss5[:c]
/7s7L/SsS$[:c]
/7s7L/SsS5[:c]
/7s7L/tst+[:c]
/7s7L/TsT+[:c]
/7s7L/1s1![:c]
/7s7L/1s1i[:c]
/7s7L/1s1I[:c]
/7s7L/1s1|[:c]
/7s7L/0s0o[:c]
/7s7L/0s0O[:c]
/7s7L/3s3e[:c]
/7s7L/3s3E[:c]
/7s7L/4s4a[:c]
/7s7L/4s4A[:c]
/7s7L/5s5s[:c]
/7s7L/5s5S[:c]
/7s7L/8s8b[:c]
/7s7L/8s8B[:c]
/8s8b/asa@[:c]
/8s8b/asa4[:c]
/8s8b/AsA4[:c]
/8s8b/AsA@[:c]
/8s8b/bsb8[:c]
/8s8b/BsB8[:c]
/8s8b/ese3[:c]
/8s8b/EsE3[:c]
/8s8b/isi1[:c]
/8s8b/isi![:c]
/8s8b/isi|[:c]
/8s8b/IsI1[:c]
/8s8b/IsI![:c]
/8s8b/IsI|[:c]
/8s8b/lsl1[:c]
/8s8b/lsl7[:c]
/8s8b/lsl|[:c]
/8s8b/lsl![:c]
/8s8b/Lsl1[:c]
/8s8b/Lsl7[:c]
/8s8b/Lsl|[:c]
/8s8b/Lsl![:c]
/8s8b/oso0[:c]
/8s8b/OsO0[:c]
/8s8b/sss$[:c]
/8s8b/sss5[:c]
/8s8b/SsS$[:c]
/8s8b/SsS5[:c]
/8s8b/tst+[:c]
/8s8b/TsT+[:c]
/8s8b/1s1![:c]
/8s8b/1s1i[:c]
/8s8b/1s1I[:c]
/8s8b/1s1|[:c]
/8s8b/0s0o[:c]
/8s8b/0s0O[:c]
/8s8b/3s3e[:c]
/8s8b/3s3E[:c]
/8s8b/4s4a[:c]
/8s8b/4s4A[:c]
/8s8b/5s5s[:c]
/8s8b/5s5S[:c]
/8s8b/7s7l[:c]
/8s8b/7s7L[:c]
/8s8B/asa@[:c]
/8s8B/asa4[:c]
/8s8B/AsA4[:c]
/8s8B/AsA@[:c]
/8s8B/bsb8[:c]
/8s8B/BsB8[:c]
/8s8B/ese3[:c]
/8s8B/EsE3[:c]
/8s8B/isi1[:c]
/8s8B/isi![:c]
/8s8B/isi|[:c]
/8s8B/IsI1[:c]
/8s8B/IsI![:c]
/8s8B/IsI|[:c]
/8s8B/lsl1[:c]
/8s8B/lsl7[:c]
/8s8B/lsl|[:c]
/8s8B/lsl![:c]
/8s8B/Lsl1[:c]
/8s8B/Lsl7[:c]
/8s8B/Lsl|[:c]
/8s8B/Lsl![:c]
/8s8B/oso0[:c]
/8s8B/OsO0[:c]
/8s8B/sss$[:c]
/8s8B/sss5[:c]
/8s8B/SsS$[:c]
/8s8B/SsS5[:c]
/8s8B/tst+[:c]
/8s8B/TsT+[:c]
/8s8B/1s1![:c]
/8s8B/1s1i[:c]
/8s8B/1s1I[:c]
/8s8B/1s1|[:c]
/8s8B/0s0o[:c]
/8s8B/0s0O[:c]
/8s8B/3s3e[:c]
/8s8B/3s3E[:c]
/8s8B/4s4a[:c]
/8s8B/4s4A[:c]
/8s8B/5s5s[:c]
/8s8B/5s5S[:c]
/8s8B/7s7l[:c]
/8s8B/7s7L[:c]
# These are some popular triple/quad l33t rules
/asa4/ese3/lsl1[:c]
/asa4/ese3/oso0[:c]
/asa4/ese3/sss$[:c]
/asa4/lsl1/oso0[:c]
/asa4/lsl1/sss$[:c]
/asa4/oso0/sss$[:c]
/ese3/lsl1/oso0[:c]
/ese3/lsl1/sss$[:c]
/ese3/oso0/sss$[:c]
/lsl1/oso0/sss$[:c]
/asa4/ese3/lsl1/oso0[:c]
/asa4/ese3/lsl1/sss$[:c]
/asa4/ese3/oso0/sss$[:c]
/asa4/lsl1/oso0/sss$[:c]
/ese3/lsl1/oso0/sss$[:c]
/asa4/ese3/lsl1/oso0/sss$[:c]


[List.Rules:KoreLogicRulesReplaceSpecial2Special]
/!s!@
/!s!#
/!s!$
/!s!%
/!s!^
/!s!&
/!s!(
/!s!)
/!s!-
/!s!=
/!s!_
/!s!+
/!s!\\
/!s!|
/!s!;
/!s!:
/!s!'
/!s!"
/!s!,
/!s!.
/!s!/
/!s!?
/!s!>
/!s!<
/@s@!
/@s@#
/@s@$
/@s@%
/@s@^
/@s@&
/@s@(
/@s@)
/@s@-
/@s@=
/@s@_
/@s@+
/@s@\\
/@s@|
/@s@;
/@s@:
/@s@'
/@s@"
/@s@,
/@s@.
/@s@/
/@s@?
/@s@>
/@s@<
/#s#!
/#s#@
/#s#$
/#s#%
/#s#^
/#s#&
/#s#(
/#s#)
/#s#-
/#s#=
/#s#_
/#s#+
/#s#\\
/#s#|
/#s#;
/#s#:
/#s#'
/#s#"
/#s#,
/#s#.
/#s#/
/#s#?
/#s#>
/#s#<
/$s$!
/$s$@
/$s$#
/$s$%
/$s$^
/$s$&
/$s$(
/$s$)
/$s$-
/$s$=
/$s$_
/$s$+
/$s$\\
/$s$|
/$s$;
/$s$:
/$s$'
/$s$"
/$s$,
/$s$.
/$s$/
/$s$?
/$s$>
/$s$<
/%s%!
/%s%@
/%s%#
/%s%$
/%s%^
/%s%&
/%s%(
/%s%)
/%s%-
/%s%=
/%s%_
/%s%+
/%s%\\
/%s%|
/%s%;
/%s%:
/%s%'
/%s%"
/%s%,
/%s%.
/%s%/
/%s%?
/%s%>
/%s%<
/^s^!
/^s^@
/^s^#
/^s^$
/^s^%
/^s^&
/^s^(
/^s^)
/^s^-
/^s^=
/^s^_
/^s^+
/^s^\\
/^s^|
/^s^;
/^s^:
/^s^'
/^s^"
/^s^,
/^s^.
/^s^/
/^s^?
/^s^>
/^s^<
/&s&!
/&s&@
/&s&#
/&s&$
/&s&%
/&s&^
/&s&(
/&s&)
/&s&-
/&s&=
/&s&_
/&s&+
/&s&\\
/&s&|
/&s&;
/&s&:
/&s&'
/&s&"
/&s&,
/&s&.
/&s&/
/&s&?
/&s&>
/&s&<
/(s(!
/(s(@
/(s(#
/(s($
/(s(%
/(s(^
/(s(&
/(s()
/(s(-
/(s(=
/(s(_
/(s(+
/(s(\\
/(s(|
/(s(;
/(s(:
/(s('
/(s("
/(s(,
/(s(.
/(s(/
/(s(?
/(s(>
/(s(<
/)s)!
/)s)@
/)s)#
/)s)$
/)s)%
/)s)^
/)s)&
/)s)(
/)s)-
/)s)=
/)s)_
/)s)+
/)s)\\
/)s)|
/)s);
/)s):
/)s)'
/)s)"
/)s),
/)s).
/)s)/
/)s)?
/)s)>
/)s)<
/-s-!
/-s-@
/-s-#
/-s-$
/-s-%
/-s-^
/-s-&
/-s-(
/-s-)
/-s--
/-s-=
/-s-_
/-s-+
/-s-\\
/-s-|
/-s-;
/-s-:
/-s-'
/-s-"
/-s-,
/-s-.
/-s-/
/-s-?
/-s->
/-s-<
/=s=!
/=s=@
/=s=#
/=s=$
/=s=%
/=s=^
/=s=&
/=s=(
/=s=)
/=s=-
/=s=_
/=s=+
/=s=\\
/=s=|
/=s=;
/=s=:
/=s='
/=s="
/=s=,
/=s=.
/=s=/
/=s=?
/=s=>
/=s=<
/_s_!
/_s_@
/_s_#
/_s_$
/_s_%
/_s_^
/_s_&
/_s_(
/_s_)
/_s_-
/_s_=
/_s_+
/_s_\\
/_s_|
/_s_;
/_s_:
/_s_'
/_s_"
/_s_,
/_s_.
/_s_/
/_s_?
/_s_>
/_s_<
/+s+!
/+s+@
/+s+#
/+s+$
/+s+%
/+s+^
/+s+&
/+s+(
/+s+)
/+s+-
/+s+=
/+s+_
/+s+\\
/+s+|
/+s+;
/+s+:
/+s+'
/+s+"
/+s+,
/+s+.
/+s+/
/+s+?
/+s+>
/+s+<
/|s|!
/|s|@
/|s|#
/|s|$
/|s|%
/|s|^
/|s|&
/|s|(
/|s|)
/|s|-
/|s|=
/|s|_
/|s|+
/|s|\\
/|s|;
/|s|:
/|s|'
/|s|"
/|s|,
/|s|.
/|s|/
/|s|?
/|s|>
/|s|<
/;s;!
/;s;@
/;s;#
/;s;$
/;s;%
/;s;^
/;s;&
/;s;(
/;s;)
/;s;-
/;s;=
/;s;_
/;s;+
/;s;\\
/;s;|
/;s;:
/;s;'
/;s;"
/;s;,
/;s;.
/;s;/
/;s;?
/;s;>
/;s;<
/:s:!
/:s:@
/:s:#
/:s:$
/:s:%
/:s:^
/:s:&
/:s:(
/:s:)
/:s:-
/:s:=
/:s:_
/:s:+
/:s:\\
/:s:|
/:s:;
/:s::
/:s:'
/:s:"
/:s:,
/:s:.
/:s:/
/:s:?
/:s:>
/:s:<
/'s'!
/'s'@
/'s'#
/'s'$
/'s'%
/'s'^
/'s'&
/'s'(
/'s')
/'s'-
/'s'=
/'s'_
/'s'+
/'s'\\
/'s'|
/'s';
/'s':
/'s'"
/'s',
/'s'.
/'s'/
/'s'?
/'s'>
/'s'<
/"s"!
/"s"@
/"s"#
/"s"$
/"s"%
/"s"^
/"s"&
/"s"(
/"s")
/"s"-
/"s"=
/"s"_
/"s"+
/"s"\\
/"s"|
/"s";
/"s":
/"s"'
/"s",
/"s".
/"s"/
/"s"?
/"s">
/"s"<
/,s,!
/,s,@
/,s,#
/,s,$
/,s,%
/,s,^
/,s,&
/,s,(
/,s,)
/,s,-
/,s,=
/,s,_
/,s,+
/,s,\\
/,s,|
/,s,;
/,s,:
/,s,'
/,s,"
/,s,.
/,s,/
/,s,?
/,s,>
/,s,<
/.s.!
/.s.@
/.s.#
/.s.$
/.s.%
/.s.^
/.s.&
/.s.(
/.s.)
/.s.-
/.s.=
/.s._
/.s.+
/.s.\\
/.s.|
/.s.;
/.s.:
/.s.'
/.s."
/.s.,
/.s./
/.s.?
/.s.>
/.s.<
//s/!
//s/@
//s/#
//s/$
//s/%
//s/^
//s/&
//s/(
//s/)
//s/-
//s/=
//s/_
//s/+
//s/\\
//s/|
//s/;
//s/:
//s/'
//s/"
//s/,
//s/.
//s/?
//s/>
//s/<
/>s>!
/>s>@
/>s>#
/>s>$
/>s>%
/>s>^
/>s>&
/>s>(
/>s>)
/>s>-
/>s>=
/>s>_
/>s>+
/>s>\\
/>s>|
/>s>;
/>s>:
/>s>'
/>s>"
/>s>,
/>s>.
/>s>/
/>s>?
/>s><
/<s<!
/<s<@
/<s<#
/<s<$
/<s<%
/<s<^
/<s<&
/<s<(
/<s<)
/<s<-
/<s<=
/<s<_
/<s<+
/<s<\\
/<s<|
/<s<;
/<s<:
/<s<'
/<s<"
/<s<,
/<s<.
/<s</
/<s<?
/<s<>


# %1a = if the word has at least 1 'a' in it  
# sab = change the 'a' to a 'b'
# Therefor    %1asab
[List.Rules:KoreLogicRulesReplaceLetters]
/asab
/asac
/asad
/asae
/asaf
/asag
/asah
/asai
/asaj
/asak
/asal
/asam
/asan
/asao
/asap
/asaq
/asar
/asas
/asat
/asau
/asav
/asaw
/asax
/asay
/asaz
/asaA
/asaB
/asaC
/asaD
/asaE
/asaF
/asaG
/asaH
/asaI
/asaJ
/asaK
/asaL
/asaM
/asaN
/asaO
/asaP
/asaQ
/asaR
/asaS
/asaT
/asaU
/asaV
/asaW
/asaX
/asaY
/asaZ
/bsba
/bsbc
/bsbd
/bsbe
/bsbf
/bsbg
/bsbh
/bsbi
/bsbj
/bsbk
/bsbl
/bsbm
/bsbn
/bsbo
/bsbp
/bsbq
/bsbr
/bsbs
/bsbt
/bsbu
/bsbv
/bsbw
/bsbx
/bsby
/bsbz
/bsbA
/bsbB
/bsbC
/bsbD
/bsbE
/bsbF
/bsbG
/bsbH
/bsbI
/bsbJ
/bsbK
/bsbL
/bsbM
/bsbN
/bsbO
/bsbP
/bsbQ
/bsbR
/bsbS
/bsbT
/bsbU
/bsbV
/bsbW
/bsbX
/bsbY
/bsbZ
/csca
/cscb
/cscd
/csce
/cscf
/cscg
/csch
/csci
/cscj
/csck
/cscl
/cscm
/cscn
/csco
/cscp
/cscq
/cscr
/cscs
/csct
/cscu
/cscv
/cscw
/cscx
/cscy
/cscz
/cscA
/cscB
/cscC
/cscD
/cscE
/cscF
/cscG
/cscH
/cscI
/cscJ
/cscK
/cscL
/cscM
/cscN
/cscO
/cscP
/cscQ
/cscR
/cscS
/cscT
/cscU
/cscV
/cscW
/cscX
/cscY
/cscZ
/dsda
/dsdb
/dsdc
/dsde
/dsdf
/dsdg
/dsdh
/dsdi
/dsdj
/dsdk
/dsdl
/dsdm
/dsdn
/dsdo
/dsdp
/dsdq
/dsdr
/dsds
/dsdt
/dsdu
/dsdv
/dsdw
/dsdx
/dsdy
/dsdz
/dsdA
/dsdB
/dsdC
/dsdD
/dsdE
/dsdF
/dsdG
/dsdH
/dsdI
/dsdJ
/dsdK
/dsdL
/dsdM
/dsdN
/dsdO
/dsdP
/dsdQ
/dsdR
/dsdS
/dsdT
/dsdU
/dsdV
/dsdW
/dsdX
/dsdY
/dsdZ
/esea
/eseb
/esec
/esed
/esef
/eseg
/eseh
/esei
/esej
/esek
/esel
/esem
/esen
/eseo
/esep
/eseq
/eser
/eses
/eset
/eseu
/esev
/esew
/esex
/esey
/esez
/eseA
/eseB
/eseC
/eseD
/eseE
/eseF
/eseG
/eseH
/eseI
/eseJ
/eseK
/eseL
/eseM
/eseN
/eseO
/eseP
/eseQ
/eseR
/eseS
/eseT
/eseU
/eseV
/eseW
/eseX
/eseY
/eseZ
/fsfa
/fsfb
/fsfc
/fsfd
/fsfe
/fsfg
/fsfh
/fsfi
/fsfj
/fsfk
/fsfl
/fsfm
/fsfn
/fsfo
/fsfp
/fsfq
/fsfr
/fsfs
/fsft
/fsfu
/fsfv
/fsfw
/fsfx
/fsfy
/fsfz
/fsfA
/fsfB
/fsfC
/fsfD
/fsfE
/fsfF
/fsfG
/fsfH
/fsfI
/fsfJ
/fsfK
/fsfL
/fsfM
/fsfN
/fsfO
/fsfP
/fsfQ
/fsfR
/fsfS
/fsfT
/fsfU
/fsfV
/fsfW
/fsfX
/fsfY
/fsfZ
/gsga
/gsgb
/gsgc
/gsgd
/gsge
/gsgf
/gsgh
/gsgi
/gsgj
/gsgk
/gsgl
/gsgm
/gsgn
/gsgo
/gsgp
/gsgq
/gsgr
/gsgs
/gsgt
/gsgu
/gsgv
/gsgw
/gsgx
/gsgy
/gsgz
/gsgA
/gsgB
/gsgC
/gsgD
/gsgE
/gsgF
/gsgG
/gsgH
/gsgI
/gsgJ
/gsgK
/gsgL
/gsgM
/gsgN
/gsgO
/gsgP
/gsgQ
/gsgR
/gsgS
/gsgT
/gsgU
/gsgV
/gsgW
/gsgX
/gsgY
/gsgZ
/hsha
/hshb
/hshc
/hshd
/hshe
/hshf
/hshg
/hshi
/hshj
/hshk
/hshl
/hshm
/hshn
/hsho
/hshp
/hshq
/hshr
/hshs
/hsht
/hshu
/hshv
/hshw
/hshx
/hshy
/hshz
/hshA
/hshB
/hshC
/hshD
/hshE
/hshF
/hshG
/hshH
/hshI
/hshJ
/hshK
/hshL
/hshM
/hshN
/hshO
/hshP
/hshQ
/hshR
/hshS
/hshT
/hshU
/hshV
/hshW
/hshX
/hshY
/hshZ
/isia
/isib
/isic
/isid
/isie
/isif
/isig
/isih
/isij
/isik
/isil
/isim
/isin
/isio
/isip
/isiq
/isir
/isis
/isit
/isiu
/isiv
/isiw
/isix
/isiy
/isiz
/isiA
/isiB
/isiC
/isiD
/isiE
/isiF
/isiG
/isiH
/isiI
/isiJ
/isiK
/isiL
/isiM
/isiN
/isiO
/isiP
/isiQ
/isiR
/isiS
/isiT
/isiU
/isiV
/isiW
/isiX
/isiY
/isiZ
/jsja
/jsjb
/jsjc
/jsjd
/jsje
/jsjf
/jsjg
/jsjh
/jsji
/jsjk
/jsjl
/jsjm
/jsjn
/jsjo
/jsjp
/jsjq
/jsjr
/jsjs
/jsjt
/jsju
/jsjv
/jsjw
/jsjx
/jsjy
/jsjz
/jsjA
/jsjB
/jsjC
/jsjD
/jsjE
/jsjF
/jsjG
/jsjH
/jsjI
/jsjJ
/jsjK
/jsjL
/jsjM
/jsjN
/jsjO
/jsjP
/jsjQ
/jsjR
/jsjS
/jsjT
/jsjU
/jsjV
/jsjW
/jsjX
/jsjY
/jsjZ
/kska
/kskb
/kskc
/kskd
/kske
/kskf
/kskg
/kskh
/kski
/kskj
/kskl
/kskm
/kskn
/ksko
/kskp
/kskq
/kskr
/ksks
/kskt
/ksku
/kskv
/kskw
/kskx
/ksky
/kskz
/kskA
/kskB
/kskC
/kskD
/kskE
/kskF
/kskG
/kskH
/kskI
/kskJ
/kskK
/kskL
/kskM
/kskN
/kskO
/kskP
/kskQ
/kskR
/kskS
/kskT
/kskU
/kskV
/kskW
/kskX
/kskY
/kskZ
/lsla
/lslb
/lslc
/lsld
/lsle
/lslf
/lslg
/lslh
/lsli
/lslj
/lslk
/lslm
/lsln
/lslo
/lslp
/lslq
/lslr
/lsls
/lslt
/lslu
/lslv
/lslw
/lslx
/lsly
/lslz
/lslA
/lslB
/lslC
/lslD
/lslE
/lslF
/lslG
/lslH
/lslI
/lslJ
/lslK
/lslL
/lslM
/lslN
/lslO
/lslP
/lslQ
/lslR
/lslS
/lslT
/lslU
/lslV
/lslW
/lslX
/lslY
/lslZ
/msma
/msmb
/msmc
/msmd
/msme
/msmf
/msmg
/msmh
/msmi
/msmj
/msmk
/msml
/msmn
/msmo
/msmp
/msmq
/msmr
/msms
/msmt
/msmu
/msmv
/msmw
/msmx
/msmy
/msmz
/msmA
/msmB
/msmC
/msmD
/msmE
/msmF
/msmG
/msmH
/msmI
/msmJ
/msmK
/msmL
/msmM
/msmN
/msmO
/msmP
/msmQ
/msmR
/msmS
/msmT
/msmU
/msmV
/msmW
/msmX
/msmY
/msmZ
/nsna
/nsnb
/nsnc
/nsnd
/nsne
/nsnf
/nsng
/nsnh
/nsni
/nsnj
/nsnk
/nsnl
/nsnm
/nsno
/nsnp
/nsnq
/nsnr
/nsns
/nsnt
/nsnu
/nsnv
/nsnw
/nsnx
/nsny
/nsnz
/nsnA
/nsnB
/nsnC
/nsnD
/nsnE
/nsnF
/nsnG
/nsnH
/nsnI
/nsnJ
/nsnK
/nsnL
/nsnM
/nsnN
/nsnO
/nsnP
/nsnQ
/nsnR
/nsnS
/nsnT
/nsnU
/nsnV
/nsnW
/nsnX
/nsnY
/nsnZ
/osoa
/osob
/osoc
/osod
/osoe
/osof
/osog
/osoh
/osoi
/osoj
/osok
/osol
/osom
/oson
/osop
/osoq
/osor
/osos
/osot
/osou
/osov
/osow
/osox
/osoy
/osoz
/osoA
/osoB
/osoC
/osoD
/osoE
/osoF
/osoG
/osoH
/osoI
/osoJ
/osoK
/osoL
/osoM
/osoN
/osoO
/osoP
/osoQ
/osoR
/osoS
/osoT
/osoU
/osoV
/osoW
/osoX
/osoY
/osoZ
/pspa
/pspb
/pspc
/pspd
/pspe
/pspf
/pspg
/psph
/pspi
/pspj
/pspk
/pspl
/pspm
/pspn
/pspo
/pspq
/pspr
/psps
/pspt
/pspu
/pspv
/pspw
/pspx
/pspy
/pspz
/pspA
/pspB
/pspC
/pspD
/pspE
/pspF
/pspG
/pspH
/pspI
/pspJ
/pspK
/pspL
/pspM
/pspN
/pspO
/pspP
/pspQ
/pspR
/pspS
/pspT
/pspU
/pspV
/pspW
/pspX
/pspY
/pspZ
/qsqa
/qsqb
/qsqc
/qsqd
/qsqe
/qsqf
/qsqg
/qsqh
/qsqi
/qsqj
/qsqk
/qsql
/qsqm
/qsqn
/qsqo
/qsqp
/qsqr
/qsqs
/qsqt
/qsqu
/qsqv
/qsqw
/qsqx
/qsqy
/qsqz
/qsqA
/qsqB
/qsqC
/qsqD
/qsqE
/qsqF
/qsqG
/qsqH
/qsqI
/qsqJ
/qsqK
/qsqL
/qsqM
/qsqN
/qsqO
/qsqP
/qsqQ
/qsqR
/qsqS
/qsqT
/qsqU
/qsqV
/qsqW
/qsqX
/qsqY
/qsqZ
/rsra
/rsrb
/rsrc
/rsrd
/rsre
/rsrf
/rsrg
/rsrh
/rsri
/rsrj
/rsrk
/rsrl
/rsrm
/rsrn
/rsro
/rsrp
/rsrq
/rsrs
/rsrt
/rsru
/rsrv
/rsrw
/rsrx
/rsry
/rsrz
/rsrA
/rsrB
/rsrC
/rsrD
/rsrE
/rsrF
/rsrG
/rsrH
/rsrI
/rsrJ
/rsrK
/rsrL
/rsrM
/rsrN
/rsrO
/rsrP
/rsrQ
/rsrR
/rsrS
/rsrT
/rsrU
/rsrV
/rsrW
/rsrX
/rsrY
/rsrZ
/sssa
/sssb
/sssc
/sssd
/ssse
/sssf
/sssg
/sssh
/sssi
/sssj
/sssk
/sssl
/sssm
/sssn
/ssso
/sssp
/sssq
/sssr
/ssst
/sssu
/sssv
/sssw
/sssx
/sssy
/sssz
/sssA
/sssB
/sssC
/sssD
/sssE
/sssF
/sssG
/sssH
/sssI
/sssJ
/sssK
/sssL
/sssM
/sssN
/sssO
/sssP
/sssQ
/sssR
/sssS
/sssT
/sssU
/sssV
/sssW
/sssX
/sssY
/sssZ
/tsta
/tstb
/tstc
/tstd
/tste
/tstf
/tstg
/tsth
/tsti
/tstj
/tstk
/tstl
/tstm
/tstn
/tsto
/tstp
/tstq
/tstr
/tsts
/tstu
/tstv
/tstw
/tstx
/tsty
/tstz
/tstA
/tstB
/tstC
/tstD
/tstE
/tstF
/tstG
/tstH
/tstI
/tstJ
/tstK
/tstL
/tstM
/tstN
/tstO
/tstP
/tstQ
/tstR
/tstS
/tstT
/tstU
/tstV
/tstW
/tstX
/tstY
/tstZ
/usua
/usub
/usuc
/usud
/usue
/usuf
/usug
/usuh
/usui
/usuj
/usuk
/usul
/usum
/usun
/usuo
/usup
/usuq
/usur
/usus
/usut
/usuv
/usuw
/usux
/usuy
/usuz
/usuA
/usuB
/usuC
/usuD
/usuE
/usuF
/usuG
/usuH
/usuI
/usuJ
/usuK
/usuL
/usuM
/usuN
/usuO
/usuP
/usuQ
/usuR
/usuS
/usuT
/usuU
/usuV
/usuW
/usuX
/usuY
/usuZ
/vsva
/vsvb
/vsvc
/vsvd
/vsve
/vsvf
/vsvg
/vsvh
/vsvi
/vsvj
/vsvk
/vsvl
/vsvm
/vsvn
/vsvo
/vsvp
/vsvq
/vsvr
/vsvs
/vsvt
/vsvu
/vsvw
/vsvx
/vsvy
/vsvz
/vsvA
/vsvB
/vsvC
/vsvD
/vsvE
/vsvF
/vsvG
/vsvH
/vsvI
/vsvJ
/vsvK
/vsvL
/vsvM
/vsvN
/vsvO
/vsvP
/vsvQ
/vsvR
/vsvS
/vsvT
/vsvU
/vsvV
/vsvW
/vsvX
/vsvY
/vsvZ
/wswa
/wswb
/wswc
/wswd
/wswe
/wswf
/wswg
/wswh
/wswi
/wswj
/wswk
/wswl
/wswm
/wswn
/wswo
/wswp
/wswq
/wswr
/wsws
/wswt
/wswu
/wswv
/wswx
/wswy
/wswz
/wswA
/wswB
/wswC
/wswD
/wswE
/wswF
/wswG
/wswH
/wswI
/wswJ
/wswK
/wswL
/wswM
/wswN
/wswO
/wswP
/wswQ
/wswR
/wswS
/wswT
/wswU
/wswV
/wswW
/wswX
/wswY
/wswZ
/xsxa
/xsxb
/xsxc
/xsxd
/xsxe
/xsxf
/xsxg
/xsxh
/xsxi
/xsxj
/xsxk
/xsxl
/xsxm
/xsxn
/xsxo
/xsxp
/xsxq
/xsxr
/xsxs
/xsxt
/xsxu
/xsxv
/xsxw
/xsxy
/xsxz
/xsxA
/xsxB
/xsxC
/xsxD
/xsxE
/xsxF
/xsxG
/xsxH
/xsxI
/xsxJ
/xsxK
/xsxL
/xsxM
/xsxN
/xsxO
/xsxP
/xsxQ
/xsxR
/xsxS
/xsxT
/xsxU
/xsxV
/xsxW
/xsxX
/xsxY
/xsxZ
/ysya
/ysyb
/ysyc
/ysyd
/ysye
/ysyf
/ysyg
/ysyh
/ysyi
/ysyj
/ysyk
/ysyl
/ysym
/ysyn
/ysyo
/ysyp
/ysyq
/ysyr
/ysys
/ysyt
/ysyu
/ysyv
/ysyw
/ysyx
/ysyz
/ysyA
/ysyB
/ysyC
/ysyD
/ysyE
/ysyF
/ysyG
/ysyH
/ysyI
/ysyJ
/ysyK
/ysyL
/ysyM
/ysyN
/ysyO
/ysyP
/ysyQ
/ysyR
/ysyS
/ysyT
/ysyU
/ysyV
/ysyW
/ysyX
/ysyY
/ysyZ
/zsza
/zszb
/zszc
/zszd
/zsze
/zszf
/zszg
/zszh
/zszi
/zszj
/zszk
/zszl
/zszm
/zszn
/zszo
/zszp
/zszq
/zszr

####################################################################
# KoreLogic Custom External Rules:
####################################################################

# This will only allow passwords with AT LEAST one 
# special character, one capital *AND* one number
# ./john -i:all -stdout -session:test --external:Filter_AtLeastOneCapSpecialNum | strings
[List.External:Filter_AtLeastOneCapSpecialNum]
void filter()
{      
        int i, c ;
        int yesCAP;
        int yesNUM;
        int yesSPECIAL;

        i = 0;
        yesCAP = 0;
        yesNUM = 0;
        yesSPECIAL = 0;
        while (c = word[i++])
        {
        if (c >= 'A' && c <= 'Z') { yesCAP = 1; }
        if (c >= '0' && c <= '9') { yesNUM = 1; }
        if (c == '!' || c == '$' || c == '@' || c == '#' ) { yesSPECIAL = 1; }
        }

        if (yesCAP==0 || yesNUM==0 || yesSPECIAL==0) { word = 0; return;}
}


[List.External:6plus2010exclam]
void init()
{
        word[11] = 0;
}
void filter()
{
        word[6] = '2';
        word[7] = '0';
        word[8] = '1';
        word[9] = '0';
        word[10] = '!';
}

# use these with 6 characters - such as -i:all6
[List.External:6plus2010]
void init() { word[10] = 0; }
void filter() {
        word[6] = '2';
        word[7] = '0';
        word[8] = '1';
        word[9] = '0'; }


# use these with 6 characters - such as -i:all6
[List.External:6plus1234]
void init() { word[10] = 0; }
void filter() {
        word[6] = '1';
        word[7] = '2';
        word[8] = '3';
        word[9] = '4'; }

# use these with 6 characters - such as -i:all6
[List.External:6plus10exclaim]
void init() { word[9] = 0; }
void filter() {
        word[6] = '1';
        word[7] = '0';
        word[8] = '!'; }

[List.External:7Prepend2Numbers]
void init() { word[9] = 0; }
void filter() {
        word[8] = word[6];
        word[7] = word[5];
        word[6] = word[4];
        word[5] = word[3];
        word[4] = word[2];
        word[3] = word[1];
        word[2] = word[0];
        word[1] = '0';
        word[0] = '2'; }

